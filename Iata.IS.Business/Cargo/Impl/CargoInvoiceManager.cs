using System;
using System.Configuration;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Iata.IS.AdminSystem;
using System.Collections.Generic;
using Iata.IS.Business.Common;
using Iata.IS.Business.MemberProfile;
using Iata.IS.Core;
using Iata.IS.Core.DI;
using Iata.IS.Core.Exceptions;
using Iata.IS.Data;
using Iata.IS.Data.Cargo;
using Iata.IS.Data.Impl;
using Iata.IS.Data.MemberProfile;
using Iata.IS.Model.Base;
using Iata.IS.Model.Calendar;
using Iata.IS.Model.Cargo.Base;
using Iata.IS.Model.Cargo.Common;
using Iata.IS.Model.Cargo.Enums;
using Iata.IS.Model.Common;
using Iata.IS.Model.MemberProfile;
using Iata.IS.Model.Cargo;
using Iata.IS.Model.Enums;
using log4net;
using Iata.IS.Model.Cargo.BillingHistory;
using TransactionType = Iata.IS.Model.Enums.TransactionType;
using BillingCode = Iata.IS.Model.Cargo.Enums.BillingCode;
using SubmissionMethod = Iata.IS.Model.Cargo.Enums.SubmissionMethod;
using Iata.IS.Model.MemberProfile.Enums;
using TransactionStatus = Iata.IS.Model.Common.TransactionStatus;
using System.Globalization;
using Iata.IS.Data.Common;
using NVelocity;
using Iata.IS.Business.TemplatedTextGenerator;
using Iata.IS.Business.FileCore;
using System.IO;
using Iata.IS.Model.Pax.Common;
using Iata.IS.Model.Pax.Enums;
using System.Net;
using Iata.IS.Model.BroadcastMessages;
using Iata.IS.Business.BroadcastMessages.Impl;
using Iata.IS.Business.Security;
using Iata.IS.DR.Business.Validation.Cargo;

//InvoiceManager
namespace Iata.IS.Business.Cargo.Impl
{
  public class CargoInvoiceManager : InvoiceManagerBase, ICargoInvoiceManager, IValidationCgoInvoiceManager
  {
    private static readonly ILog Logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
    public ICargoBillingMemoRepository BillingMemoRepository { get; set; }
    public ICargoCreditMemoRecordRepository CreditMemoRepository { get; set; }
    private const string ReasonCode6B = "6B";
    private const string ReasonCode6A = "6A";
    private const string ReasonCode2C = "2C";
    private const string ReasonCode2Z = "2Z";
    private const string ReasonCode16 = "16";
    private const string ReasonCode17 = "17";

    private const string TotalIscDifferenceRejectionFlag = "I";
    private const string TotalVatAmountFeeDifference = "V";
    private const string ReasonCode = "1A";
    private const string TimeLimitFlag = "TL";
    private const string ValidationFlagDelimeter = ",";
    private const string DuplicateValidationFlag = "DU";

    private const string CheckDigitValidationFlag = "CD";

    private const string ProvisoReqSpaP = "P";
    private const string ProvisoReqSpaR = "R";
    private const string ProvisoReqSpaS = "S";
    private const string KgLbIndicatorK = "K";
    private const string KgLbIndicatorL = "L";
    private const string PartShipMentIndicatorP = "P";
    private ITemplatedTextGenerator _templatedTextGenerator;
    private const string CargoBillingHistoryAuditTrailTemplateResourceName = "Iata.IS.Business.App_Data.Templates.CargoBillingHistoryAuditTrailPdf.vm";
    private const string ReasonCodeErrorMessage = "Reason Code";
    private const int MaxReasonRemarkCharLength = 4000;

    /* CMP #613: Validation for Cargo Other Charges Breakdown */
    private const string OtherChargesAllowed = "OtherChargesAllowed";
    private const string OtherChargesDifference = "OtherChargesDifference";
    private static readonly Dictionary<int, string> CargoBillingCodeToEnumMap = new Dictionary<int, string> { { 1, "P" }, { 2, "C" }, { 3, "B" }, { 4, "T" }, { 5, "R" } };
    private CargoValidationManager cargoValidationManager = new CargoValidationManager();

    /// <summary>
    /// Gets or sets the Ach configuration repository.
    /// </summary>
    /// <value>The Ach configuration repository.</value>
    public IRepository<AchConfiguration> AchRepository { get; set; }

    /// <summary>
    /// Gets or sets the Billing Memo Attachment repository.
    /// </summary>
    public ICargoBillingMemoAttachmentRepository BillingMemoAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the BM awb attachment repository.
    /// </summary>
    /// <value>
    /// The BM awb attachment repository.
    /// </value>
    public IBMAwbAttachmentRepository BMAwbAttachmentRepository { get; set; }

    /// <summary>
    /// IsInputFile Repository.
    /// </summary>
    public IRepository<IsInputFile> IsInputFileRepository { get; set; }

    /// <summary>
    /// Gets or sets the Billing Memo Attachment repository.
    /// </summary>
    public ICargoAwbAttachmentRepository CargoAwbAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo billing memo awb repository.
    /// </summary>
    /// <value>
    /// The cargo billing memo awb repository.
    /// </value>
    public ICargoBillingMemoAwbRepository BMAwbRepository { get; set; }
   
    /// <summary>
    /// Gets or sets the cargo credit memo awb repository.
    /// </summary>
    /// <value>
    /// The cargo credit memo awb repository.
    /// </value>
    public ICargoCreditMemoAwbRepository CMAwbRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo correspondence repository.
    /// </summary>
    /// <value>
    /// The cargo correspondence repository.
    /// </value>
    public ICargoCorrespondenceRepository CargoCorrespondenceRepository { get; set; }

    /// <summary>
    /// Gets or sets the BM awb vat repository.
    /// </summary>
    /// <value>
    /// The BM awb vat repository.
    /// </value>
    public IRepository<BMAwbVat> BMAwbVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the BM awb other charge repository.
    /// </summary>
    /// <value>
    /// The BM awb other charge repository.
    /// </value>
    public IRepository<BMAwbOtherCharge> BMAwbOtherChargeRepository { get; set; }

    /// <summary>
    /// Gets or sets the BM awb prorate ladder detail repository.
    /// </summary>
    /// <value>
    /// The BM awb prorate ladder detail repository.
    /// </value>
    public IRepository<BMAwbProrateLadderDetail> BMAwbProrateLadderDetailRepository { get; set; }

    /// <summary>
    /// Gets or sets the correspondence repository.
    /// </summary>
    /// <value>The correspondence repository.</value>
    public IRepository<CargoCorrespondence> CorrespondenceRepository { get; set; }

    /// <summary>
    /// Gets or sets the exchange rate repository.
    /// </summary>
    /// <value>The exchange rate repository.</value>
    public IRepository<ExchangeRate> ExchangeRateRepository { get; set; }

    /// <summary>
    /// Gets or sets the RM awb prorate ladder detail repository.
    /// </summary>
    /// <value>
    /// The RM awb prorate ladder detail repository.
    /// </value>
    public IRepository<RMAwbProrateLadderDetail> RMAwbProrateLadderDetailRepository { get; set; }

    /// <summary>
    /// Gets or sets the billing memo vat repository.
    /// </summary>
    /// <value>
    /// The billing memo vat repository.
    /// </value>
    public IRepository<CargoBillingMemoVat> BillingMemoVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the rejection memo repository.
    /// </summary>
    /// <value>The rejection memo repository.</value>
    public IRejectionMemoRecordRepository RejectionMemoRepository { get; set; }

    /// <summary>
    /// Gets or sets the source code repository.
    /// </summary>
    /// <value>The source code repository.</value>
    public IRepository<ReasonCode> ReasonCodeRepository { get; set; }

    /// <summary>
    /// Gets or sets the rejection memo vat repository.
    /// </summary>
    public IRepository<CgoRejectionMemoVat> RejectionMemoVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo invoice repository.
    /// </summary>
    /// <value>
    /// The cargo invoice repository.
    /// </value>
    public ICargoInvoiceRepository CargoInvoiceRepository { get; set; }

    /// <summary>
    /// Gets or sets the rejection memo Awb breakdown repository.
    /// </summary>
    /// <value>The rejection memo Awb breakdown repository.</value>
    public IRMAwbRepository RMAwbRepository { get; set; }

    /// <summary>
    /// Gets or sets the rm reason acceptable difference repository.
    /// </summary>
    /// <value>
    /// The rm reason acceptable difference repository.
    /// </value>
    public IRepository<CgoRMReasonAcceptableDiff> RmReasonAcceptableDifferenceRepository { get; set; }


    /// <summary>
    /// Gets or sets the rejection memo Attachment repository.
    /// </summary>
    public ICgoRejectionMemoAttachmentRepository RejectionMemoAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the RM awb attachment repository.
    /// </summary>
    /// <value>
    /// The RM awb attachment repository.
    /// </value>
    public IRMAwbAttachmentRepository RMAwbAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo credit memo attachment repository.
    /// </summary>
    /// <value>
    /// The cargo credit memo attachment repository.
    /// </value>
    public ICargoCreditMemoAttachmentRepository CargoCreditMemoAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo credit memo awb attachment repository.
    /// </summary>
    /// <value>
    /// The cargo credit memo awb attachment repository.
    /// </value>
    public ICargoCreditMemoAwbAttachmentRepository CargoCreditMemoAwbAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the rejection memo AWB Vat Breakdown repository.
    /// </summary>
    public IRepository<RMAwbVat> RMAwbVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the rejection memo AWB Other charge repository.
    /// </summary>
    public IRepository<RMAwbOtherCharge> RMAwbOtherChargeRepository { get; set; }
    /// <summary>
    /// Gets or sets the coupon record repository.
    /// </summary>
    /// <value>The awb record repository.</value>
    public ICargoAwbRecordRepository CargoAwbRecordRepository { get; set; }

    /// <summary>
    /// Gets or sets the awb record attachment repository.
    /// </summary>
    /// <value>
    /// The awb record attachment repository.
    /// </value>
    public IAwbRecordAttachmentRepository AwbRecordAttachmentRepository { get; set; }

    /// <summary>
    /// Gets or sets the awb record vat repository.
    /// </summary>
    /// <value>
    /// The awb record vat repository.
    /// </value>
    public IRepository<AwbVat> AwbRecordVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the awb record ot repository.
    /// </summary>
    /// <value>
    /// The awb record ot repository.
    /// </value>
    public IRepository<AwbOtherCharge> AwbRecordOtRepository { get; set; }

    /// <summary>
    /// CargoInvoiceVat Repository, will be injected by the container.
    /// </summary>
    public IRepository<CargoInvoiceTotalVat> CargoInvoiceVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo invoice total vat repository.
    /// </summary>
    /// <value>
    /// The cargo invoice total vat repository.
    /// </value>
    public ICargoInvoiceTotalVatRepository CargoInvoiceTotalVatRepository { get; set; }

    /// <summary>
    /// Gets or sets the cargo billing code sub total repository.
    /// </summary>
    /// <value>
    /// The cargo billing code sub total repository.
    /// </value>
    public ICargoBillingCodeSubTotalRepository CargoBillingCodeSubTotalRepository { get; set; }

    /// <summary>
    /// Gets or sets SourceCodevatTotal repository
    /// </summary>
    public ICargoBillingCodeSubTotalVatRepository CargoBillingCodeSubTotalVatRepository { get; set; }

    /// <summary>
    /// CreditMemo Repository, will be injected by the container.
    /// </summary>
    /// <value>The credit memo repository.</value>
    public ICargoCreditMemoRecordRepository CargoCreditMemoRepository { get; set; }

    /// <summary>
    /// Gets or sets the remove invoice duplicate check.
    /// </summary>
    /// <value>
    /// The remove invoice duplicate check.
    /// </value>
    public IRemoveInvoiceDupCheck RemoveInvoiceDuplicateCheck { get; set; }

    /// <summary>
    /// Gets or sets the QueryAndDownloadDetailsManager
    /// </summary>
    public IQueryAndDownloadDetailsManager QueryAndDownloadDetailsManager
    {
      get;
      set;
    }


    //====28.11.2011=============================================================
    /// <summary>
    /// Generate the cargo Invoces old IDEC file.
    /// </summary>
    public void GenerateCargoOldIdec(BillingPeriod billingPeriod)
    {
    //  BillingPeriod lastBillingMonthPeriod = CalendarManager.GetLastClosedBillingPeriod();
      //lastBillingMonthPeriod.Period = 4;
      //lastBillingMonthPeriod.Month = 12;
      //lastBillingMonthPeriod.Year = 2011;
      Logger.Info(string.Format("Last Closed Billing Month Period :Y{0}-M{1}-P{2}", billingPeriod.Year, billingPeriod.Month, billingPeriod.Period));
      if (billingPeriod.Period == 4)
      {
          GenerateCargoOldIdecInternal(billingPeriod);
      }
    }

    /// <summary>
    /// Generate the cargo Invoces old IDEC file.
    /// </summary>
    public void GenerateCargoOldIdecInternal(BillingPeriod lastBillingMonthPeriod, int regenerateFlag = 0, int billingMemberId = 0)
    {
      try
      {
        // billingMemberId = 11;
        StringBuilder stringBuilderCargoIdecHeaderAndCoupons;
        //Get Invoices & coupons for pericular year and month having Value Confurmation Status other than 1 or 3
        //var checkentities = new[] { LoadStrategy.CargoEntities.AwbRecord, LoadStrategy.CargoEntities.BillingMember, LoadStrategy.CargoEntities.BilledMember };
        //List<CargoInvoice> checkCargoInvoicelist = new List<CargoInvoice>();
        //if (regenerateFlag == 0)
        //{
        //    checkCargoInvoicelist =
        //        CargoInvoiceRepository.GetCargoOldIdecInvoiceLS(new LoadStrategy(string.Join(",", checkentities)),
        //                                                        billingYear: lastBillingMonthPeriod.Year,
        //                                                        billingMonth: lastBillingMonthPeriod.Month);
        //    //checkValueConfurmation: 1);
        //}
        //if (checkCargoInvoicelist.Count == 0)
        //lastBillingMonthPeriod.Period = 4;
        //lastBillingMonthPeriod.Month = 11;
        if (regenerateFlag == 0)
        {
          //Get Invoices & coupons for pericular year and month having ValueConfurmationStatus 1 or 3

          var entities = new[] { LoadStrategy.CargoEntities.AwbRecord, LoadStrategy.CargoEntities.BillingMember, LoadStrategy.CargoEntities.BilledMember, LoadStrategy.CargoEntities.InvoiceTotal, LoadStrategy.CargoEntities.BillingCodeSubTotal, LoadStrategy.CargoEntities.ListingCurrency };
          List<CargoInvoice> cargoInvoicelist = new List<CargoInvoice>();
          if (billingMemberId == 0)
          {
            cargoInvoicelist = CargoInvoiceRepository.GetCargoOldIdecInvoiceLS(new LoadStrategy(string.Join(",", entities)),
                                                                      billingYear: lastBillingMonthPeriod.Year,
                                                                      billingMonth: lastBillingMonthPeriod.Month);
          }
          else
          {
            cargoInvoicelist = CargoInvoiceRepository.GetCargoOldIdecInvoiceLS(new LoadStrategy(string.Join(",", entities)),
                                                                         billingYear: lastBillingMonthPeriod.Year,
                                                                         billingMonth: lastBillingMonthPeriod.Month, billingMemberId: billingMemberId);
          }
          //Get the distinct Billing Members to generate seperate files
          var cgoBillingMembers = (from invoice in cargoInvoicelist
                                   group invoice by invoice.BillingMemberId
                                     into invoiceGroup
                                     select new { BillingMemberId = invoiceGroup.Key, Count = invoiceGroup.Select(b => b.BillingMemberId).Count() });
          foreach (var cgoBillingMember in cgoBillingMembers)
          {
            stringBuilderCargoIdecHeaderAndCoupons = new StringBuilder();
            long recordSequenceNumber = 0;
            decimal exchangeRate = 0;
            double fileTotalGrossValue = 0;
            double fileTotalInterlineServiceCharge = 0;
            double fileTotalTax = 0;
            int fileTotalNoCoupons = 0;
            int fileTotalNoRecords = 0;
            decimal fileNetTotal = 0;
            double fileTotalHandlingFeeAmount = 0;
            decimal fileNetBillingAmount = 0;
            decimal fileTotalWeightCharges = 0;
            decimal fileTotalOtherCharges = 0;
            decimal fileTotalISCamount = 0;

            //int AwbRecordSeqNo = 0;
            //Billing Member
            string billingMemberCodeNumeric = string.Empty;
            string billingMemberCodeAlpha = string.Empty;
            //Get all invoices according to billing Member
            //var memberCgoInvoicelist = cargoInvoicelist.Where(i => i.BillingMemberId == cgoBillingMember.BillingMemberId).OrderBy(i => i.BilledMember.MemberCodeNumeric).ThenBy(i => i.BillingPeriod).ThenBy(i => i.InvoiceNumber).ToList();
            var memberCgoInvoicelist = cargoInvoicelist.Where(i => i.BillingMemberId == cgoBillingMember.BillingMemberId).OrderBy(i => i.BilledMember.MemberCodeNumeric).ThenBy(i => i.BillingPeriod).ThenBy(i => i.InvoiceNumber).ThenBy(i => i.AwbDataRecord.OrderBy(p => p.BillingCodeId)).ToList();
            foreach (CargoInvoice invoice in memberCgoInvoicelist)
            {
              billingMemberCodeAlpha = invoice.BillingMember.MemberCodeAlpha;
              billingMemberCodeNumeric = invoice.BillingMember.MemberCodeNumeric;
              var billingMember = invoice.BillingMember;
              var billedMember = invoice.BilledMember;
              var awbRecord = invoice.AwbDataRecord;


              var blcode = (from blcd in invoice.AwbDataRecord group blcd by blcd.BillingCodeId into blgroup select new { BillingCodeId = blgroup.Key, count = blgroup.Select(b => b.BillingCodeId).Count() });
              foreach (var AwbRecordSequence in blcode.OrderBy(s => s.BillingCodeId))
              //foreach (var AwbRecordSequence in invoice.AwbDataRecord.OrderBy(s => s.BillingCodeId))
              {

                //    var awbBatches = (from batch in invoice.AwbDataRecord.Where(a=> a.BillingCodeId==1)
                //                     group batch by batch.BatchSequenceNumber
                //                         into batchGroup
                //                         select new { BatchSequenceNumber = batchGroup.Key, Count = batchGroup.Select(b => b.InvoiceId).Count() });
                //foreach (var couponSequence in awbBatches.OrderBy(s => s.BatchSequenceNumber))
                //{
                int AwbRecordSeqNo = 0;
                AwbRecordSeqNo = AwbRecordSequence.BillingCodeId;
                //AwbRecordSeqNo = AwbRecordSequence.OrderBy(s=>s.BillingCodeId));
                if (AwbRecordSeqNo == 1)
                {


                  #region Invoice Header Details

                  recordSequenceNumber++;

                  //Standerd Messege Identifier Always 'CBD' For Passenger invoices
                  stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                  //Record Sequence 8N
                  stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                  //Standerd Field identifier '15' for header details.
                  stringBuilderCargoIdecHeaderAndCoupons.Append("15");

                  //Billing Airline code 
                  stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

                  //Billed Airline code 
                  stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                  //Billing Code
                  //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.AwbDataRecord.BillingCode.ToString().PadLeft(1, '0'));
                  stringBuilderCargoIdecHeaderAndCoupons.Append('P');

                  //Invoice Number
                  stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

                  //Page/batch Sequence Number '00000' for header
                  stringBuilderCargoIdecHeaderAndCoupons.Append("00000");

                  //Record Sequence within Page/batch  Number '00000' for header
                  stringBuilderCargoIdecHeaderAndCoupons.Append("00000");

                  //Billing Date in 'YYMM00' format
                  stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(invoice.BillingYear).Substring(2, 2).PadLeft(2, '0') +
                                                              Convert.ToString(invoice.BillingMonth.ToString().PadLeft(2, '0')) + "00");

                  //Listing Currency
                  stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(invoice.ListingCurrencyDisplayText.ToString()).PadLeft(3, '0'));

                  //Billing Currency
                  stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(invoice.BillingCurrencyDisplayText.ToString()).PadLeft(3, '0'));

                  //Currency Adjustment method 'C5' for header
                  stringBuilderCargoIdecHeaderAndCoupons.Append("C5");

                  //KG\LB indicator
                  stringBuilderCargoIdecHeaderAndCoupons.Append(" ");
                  //foreach (AwbRecord AwbRec in invoice.AwbDataRecord)
                  //{
                  // //stringBuilderCargoIdecHeaderAndCoupons.Append((AwbRec.KgLbIndicator == null ? " " : AwbRec.KgLbIndicator));
                  //}

                  //Rate of exchange  (exchange rate converted into multiplicative factor)
                  // In IS format, this is represented as a dividing factor. 
                  // In Old-IDEC, it should be a multiplicative factor.
                  // Formula = 1/ Listing/Evaluation to Billing Rate; rounded (closest) to 5 decimal places.
                  //CMP#648: Convert Exchange rate into nullable field.
                  if (invoice.ExchangeRate.HasValue &&  invoice.ExchangeRate.Value > 0)
                  {
                    exchangeRate = ConvertUtil.Round((1 / invoice.ExchangeRate.Value), 5);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(
                        Math.Abs(exchangeRate).ToString("N5").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                            CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(8, '0'));
                  }
                  else
                  {
                    stringBuilderCargoIdecHeaderAndCoupons.Append(("0").PadLeft(8, '0'));
                  }

                  //currency Conversion Indicator '9' to indicate down conversion
                  stringBuilderCargoIdecHeaderAndCoupons.Append("9");

                  //Period Number 
                  stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingPeriod.ToString().PadLeft(2, '0'));

                  ////filler
                  stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(80));

                  stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

                  #endregion

                  #region Invoice AwbRecord and Batch/Page Total Details

                  int batchSequenceNumber = 0;
                  double batchTotalGrossValue = 0;
                  double batchTotalInterlineServiceCharge = 0;
                  double batchTotalTax = 0;
                  int batchTotalNoCoupons = 0;
                  int ScheduleTotalNoCoupons = 0;
                  double batchTotalHandlingFeeAmount = 0;

                  //Invoice Variables 
                  double invoiceTotalGrossValue = 0;
                  double invoiceTotalInterlineServiceCharge = 0;
                  double invoiceTotalTax = 0;
                  int invoiceTotalNoCoupons = 0;
                  double invoiceNetTotal = 0;
                  double invoiceTotalHandlingFeeAmount = 0;
                  double invoiceNetBillingAmount = 0;

                  var awbBatches = (from batch in invoice.AwbDataRecord.Where(a => a.BillingCodeId == 1)
                                    group batch by batch.BatchSequenceNumber
                                      into batchGroup
                                      select new { BatchSequenceNumber = batchGroup.Key, Count = batchGroup.Select(b => b.InvoiceId).Count() });
                  foreach (var couponSequence in awbBatches.OrderBy(s => s.BatchSequenceNumber))
                  {
                    batchSequenceNumber = couponSequence.BatchSequenceNumber;
                    batchTotalGrossValue = 0;
                    batchTotalInterlineServiceCharge = 0;
                    batchTotalTax = 0;
                    batchTotalNoCoupons = 0;
                    batchTotalHandlingFeeAmount = 0;
                    //foreach (
                    //    var coupon in
                    //        invoice.AwbDataRecord.Where(c => c.BatchSequenceNumber == couponSequence.BatchSequenceNumber).OrderBy(o => o.BatchSequenceNumber).ThenBy(
                    //            o => o.RecordSequenceWithinBatch))
                    foreach (
                        var coupon in
                            invoice.AwbDataRecord.Where(c => c.BatchSequenceNumber == couponSequence.BatchSequenceNumber && c.BillingCodeId == 1).OrderBy(o => o.BatchSequenceNumber).ThenBy(
                                o => o.RecordSequenceWithinBatch))
                    {
                      invoiceTotalNoCoupons++;

                      #region Invoice Coupons/Awb Details

                      recordSequenceNumber++;
                      batchTotalNoCoupons++;

                      ScheduleTotalNoCoupons++;

                      //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                      stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                      //Record Sequence Number
                      stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                      //Standerd Field identifier '25' for AWB details.
                      stringBuilderCargoIdecHeaderAndCoupons.Append("25");

                      //Billing Airline code 
                      stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

                      //Billed Airline code 
                      stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                      //Billing Code
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.BillingCodeId == 1 ? "P" : "C").PadLeft(1, '0'));

                      //Invoice Number
                      stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

                      //Page/batch Sequence Number 
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.BatchSequenceNumber.ToString().PadLeft(5, '0'));

                      //Record Sequence Within Batch
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.RecordSequenceWithinBatch.ToString().PadLeft(5, '0'));

                      //Required
                      ////Awb Date in 'YYMMDD' format
                      //stringBuilderCargoIdecHeaderAndCoupons.Append("00" + Convert.ToDateTime(coupon.AwbDate).ToString("MMdd"));
                      var dtm = Convert.ToDateTime(coupon.AwbDate).Month;
                      var dtd = Convert.ToDateTime(coupon.AwbDate).Day;
                      if (dtm.ToString().Length > 1 && dtd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dtm.ToString().Length == 1 && dtd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dtm.ToString().Length == 1 && dtd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dtm.ToString().Length > 1 && dtd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }

                      //Ticket Issuing Airline
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.AwbIssueingAirline ?? string.Empty).PadLeft(4, '0'));

                      //AwbSerialNumber 
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.AwbSerialNumber.ToString().PadLeft(7, '0'));

                      //Not Required
                      ////Ticket/Document Number
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.TicketDocOrFimNumber.ToString().PadLeft(11, '0'));

                      //Check Digit
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.AwbCheckDigit.ToString().PadLeft(1, '0'));

                      //Origin
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ConsignmentOriginId.ToString().PadRight(4, ' '));

                      //Destination
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ConsignmentDestinationId.ToString().PadRight(4, ' '));

                      // Carriage From
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.CarriageFromId.ToString().PadRight(4, ' '));

                      //Carriage To
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.CarriageToId.ToString().PadRight(4, ' '));

                      ////DateOfCarriage in 'YYMMDD' format
                      //stringBuilderCargoIdecHeaderAndCoupons.Append("00" + Convert.ToDateTime(coupon.DateOfCarriage).ToString("MMdd"));

                      //stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Month).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));

                      var dcm = Convert.ToDateTime(coupon.DateOfCarriage).Month;
                      var dcd = Convert.ToDateTime(coupon.DateOfCarriage).Day;
                      if (dcm.ToString().Length > 1 && dcd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dcm.ToString().Length == 1 && dcd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dcm.ToString().Length == 1 && dcd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dcm.ToString().Length > 1 && dcd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }




                      //WeightCharges
                      double awbWeightCharge = Convert.ToDouble(coupon.WeightCharges + coupon.ValuationCharges);
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(awbWeightCharge).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(11, '0'));

                      //OtherCharges
                      double awbOtherCharges = Convert.ToDouble(coupon.OtherCharges + coupon.VatAmount);
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(awbOtherCharges).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(11, '0'));

                      //WeightCharges/ Amount Subject to ISC
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(coupon.AmountSubjectToIsc).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(11, '0'));

                      //ISC
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(coupon.IscPer).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(5, '0'));

                      //ISC
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.IscPer < 0 ? "M" : "P");

                      //Currency Adjustment Indicator
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.CurrencyAdjustmentIndicator == null ? " " : coupon.CurrencyAdjustmentIndicator).PadRight(3, ' '));

                      //Actual Flown Weight
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.BilledWeight.ToString().PadLeft(6, '0'));

                      //Proviso/Req. Billing indicator
                      if (string.IsNullOrEmpty(coupon.ProvisoReqSpa))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(' ');
                      }
                      else if (coupon.ProvisoReqSpa.Equals("P"))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ProvisoReqSpa.ToString().PadLeft(1, ' '));
                      }
                      else if (coupon.ProvisoReqSpa.Equals("R"))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ProvisoReqSpa.ToString().PadLeft(1, ' '));
                      }
                      else if (coupon.ProvisoReqSpa.Equals("S"))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(' ');
                      }

                      //Prorate %
                      if (string.IsNullOrEmpty(coupon.ProvisoReqSpa))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ProratePer.ToString().PadLeft(2, '0'));
                      }
                      else
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append("00");
                      }
                      //Part-shipment indicator
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.PartShipmentIndicator.ToString().PadLeft(1, ' '));
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.PartShipmentIndicator == null ? " " : coupon.PartShipmentIndicator).PadLeft(1, ' '));

                      ////filler
                      stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(4));

                      //Filling Reference
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.FilingReference.ToString().PadLeft(10, '0'));
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.FilingReference == null ? " " : coupon.FilingReference).PadLeft(10, ' '));

                      stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

                      #endregion
                    }

                    #region Batch/Page Total Details

                    recordSequenceNumber++;

                    //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                    stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                    //Record Sequence Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                    //Standerd Field identifier '40' for Batch/Page Total details.
                    stringBuilderCargoIdecHeaderAndCoupons.Append("45");

                    //Billing Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

                    //Billed Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                    //Billing Code
                    //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                    stringBuilderCargoIdecHeaderAndCoupons.Append('P');

                    //Invoice Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));


                    //Page/batch Sequence Number 
                    stringBuilderCargoIdecHeaderAndCoupons.Append(batchSequenceNumber.ToString().PadLeft(5, '0'));

                    //Record Sequence Within Batch
                    stringBuilderCargoIdecHeaderAndCoupons.Append("99999");
                    // double TotalAmountSubjectToIsc = 0;
                    double TotalawbWeightCharges = 0;
                    double TotalawbOtherCharge = 0;
                    double TotalAmountSubjectToIsc = 0;

                    foreach (
                       var couponT in
                           invoice.AwbDataRecord.Where(c => c.BatchSequenceNumber == couponSequence.BatchSequenceNumber && c.BillingCodeId == 1).OrderBy(o => o.BatchSequenceNumber).ThenBy(
                               o => o.RecordSequenceWithinBatch))
                    {
                      ////WeightCharges
                      TotalawbWeightCharges = TotalawbWeightCharges + Convert.ToDouble(couponT.WeightCharges + couponT.ValuationCharges);
                      //OtherCharges
                      TotalawbOtherCharge = TotalawbOtherCharge + Convert.ToDouble(couponT.OtherCharges + couponT.VatAmount);
                      //Total ISC amount
                      TotalAmountSubjectToIsc = (TotalAmountSubjectToIsc + couponT.IscAmount);
                    }
                    ////WeightCharges
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbWeightCharges).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
                    //OtherCharges
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbOtherCharge).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //ISC Sign
                    stringBuilderCargoIdecHeaderAndCoupons.Append(TotalAmountSubjectToIsc < 0 ? "M" : "P");

                    //totalISCamount
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalAmountSubjectToIsc).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //Net Total : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Net Billing Amount : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Number of AWB records : The count of Awb records that exist in the batch 
                    stringBuilderCargoIdecHeaderAndCoupons.Append(batchTotalNoCoupons.ToString().PadLeft(6, '0'));

                    //Filler
                    stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(24));

                    ////Filler
                    // stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(17));

                    stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

                    #endregion

                  }

                  #endregion

                  #region Billing code subtotal record / schedule Total Details
                  recordSequenceNumber++;
                  //var awbBillingCodeSubTotal = (from batch in invoice.CGOBillingCodeSubTotal
                  //                     group batch by batch.BillingCode 
                  //                     //    into batchGroup
                  //    select new { BatchSequenceNumber = batchGroup.Key, Count = batchGroup.Select(b => b.InvoiceId).Count() });
                  //foreach (var couponSequence in awbBatches.OrderBy(s => s.BatchSequenceNumber))
                  foreach (
                          var BillingSubTotal in
                              invoice.CGOBillingCodeSubTotal.Where(c => c.InvoiceId == invoice.Id && c.BillingCode == 1))
                  //.OrderBy(o => o.BatchSequenceNumber).ThenBy(o => o.RecordSequenceWithinBatch))
                  {
                    // foreach (var BillingSubTotal in invoice.CGOBillingCodeSubTotal)

                    //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                    stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                    //Record Sequence Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                    //Standerd Field identifier '40' for Batch/Page Total details.
                    stringBuilderCargoIdecHeaderAndCoupons.Append("45");

                    //Billing Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));
                    //Billed Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                    //Billing Code
                    //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                    stringBuilderCargoIdecHeaderAndCoupons.Append('P');

                    //Invoice Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

                    //Page/batch Sequence Number 
                    stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

                    //Record Sequence Within Batch
                    stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

                    ////WeightCharges
                    decimal TotalawbWeightCharg = (BillingSubTotal.TotalWeightCharge + BillingSubTotal.TotalValuationCharge);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbWeightCharg).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //OtherCharges
                    decimal TotalawbOtherCharg = (BillingSubTotal.TotalOtherCharge + BillingSubTotal.TotalVatAmount);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbOtherCharg).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //ISC Sign
                    stringBuilderCargoIdecHeaderAndCoupons.Append(BillingSubTotal.TotalIscAmount < 0 ? "M" : "P");

                    //totalISCamount
                    //decimal TotalawbOtherCharg = ( + BillingSubTotal.TotalVatAmount);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(BillingSubTotal.TotalIscAmount).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //Net Total : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Net Billing Amount : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Number of Coupons : The count of coupon records that exist in the batch 
                    stringBuilderCargoIdecHeaderAndCoupons.Append(ScheduleTotalNoCoupons.ToString().PadLeft(6, '0'));

                    ////filler
                    stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(24));

                    stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");
                  }

                  #endregion

                }
                else if (AwbRecordSeqNo == 2)
                {
                  #region Invoice Header Details

                  recordSequenceNumber++;

                  //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                  stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                  //Record Sequence 8N
                  stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                  //Standerd Field identifier '15' for header details.
                  stringBuilderCargoIdecHeaderAndCoupons.Append("15");

                  //Billing Airline code 
                  stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

                  //Billed Airline code 
                  stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                  //Billing Code
                  //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                  stringBuilderCargoIdecHeaderAndCoupons.Append('C');

                  //Invoice Number
                  stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

                  //Page/batch Sequence Number '00000' for header
                  stringBuilderCargoIdecHeaderAndCoupons.Append("00000");

                  //Record Sequence within Page/batch  Number '00000' for header
                  stringBuilderCargoIdecHeaderAndCoupons.Append("00000");

                  //Billing Date in 'YYMM00' format
                  stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(invoice.BillingYear).Substring(2, 2).PadLeft(2, '0') +
                                                              Convert.ToString(invoice.BillingMonth.ToString().PadLeft(2, '0')) + "00");

                  //Listing Currency
                  stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(invoice.ListingCurrencyDisplayText).PadLeft(3, '0'));

                  //Billing Currency
                  stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(invoice.BillingCurrencyDisplayText).PadLeft(3, '0'));

                  //Currency Adjustment method 'C5' for header
                  stringBuilderCargoIdecHeaderAndCoupons.Append("C5");

                  //KG\LB indicator
                  stringBuilderCargoIdecHeaderAndCoupons.Append(" ");
                  //foreach (AwbRecord AwbRec in invoice.AwbDataRecord)
                  //{
                  // //stringBuilderCargoIdecHeaderAndCoupons.Append((AwbRec.KgLbIndicator == null ? " " : AwbRec.KgLbIndicator));
                  //}

                  //Rate of exchange  (exchange rate converted into multiplicative factor)
                  // In IS format, this is represented as a dividing factor. 
                  // In Old-IDEC, it should be a multiplicative factor.
                  // Formula = 1/ Listing/Evaluation to Billing Rate; rounded (closest) to 5 decimal places.
                  //CMP#648: Convert Exchange rate into nullable field.
                  if (invoice.ExchangeRate.HasValue && invoice.ExchangeRate.Value > 0)
                  {
                    exchangeRate = ConvertUtil.Round((1 / invoice.ExchangeRate.Value), 5);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(
                        Math.Abs(exchangeRate).ToString("N5").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                            CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(8, '0'));
                  }
                  else
                  {
                    stringBuilderCargoIdecHeaderAndCoupons.Append(("0").PadLeft(8, '0'));
                  }

                  //currency Conversion Indicator '9' to indicate down conversion
                  stringBuilderCargoIdecHeaderAndCoupons.Append("9");

                  //Period Number 
                  stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingPeriod.ToString().PadLeft(2, '0'));

                  ////filler
                  stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(80));

                  stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

                  #endregion

                  #region Invoice AwbRecord and Batch/Page Total Details

                  int batchSequenceNumber = 0;
                  double batchTotalGrossValue = 0;
                  double batchTotalInterlineServiceCharge = 0;
                  double batchTotalTax = 0;
                  int batchTotalNoCoupons = 0;
                  int ScheduleTotalNoCoupons = 0;
                  double batchTotalHandlingFeeAmount = 0;

                  //Invoice Variables 
                  double invoiceTotalGrossValue = 0;
                  double invoiceTotalInterlineServiceCharge = 0;
                  double invoiceTotalTax = 0;
                  int invoiceTotalNoCoupons = 0;
                  double invoiceNetTotal = 0;
                  double invoiceTotalHandlingFeeAmount = 0;
                  double invoiceNetBillingAmount = 0;
                  var awbBatches = (from batch in invoice.AwbDataRecord.Where(a => a.BillingCodeId == 2)
                                    group batch by batch.BatchSequenceNumber
                                      into batchGroup
                                      select new { BatchSequenceNumber = batchGroup.Key, Count = batchGroup.Select(b => b.InvoiceId).Count() });
                  foreach (var couponSequence in awbBatches.OrderBy(s => s.BatchSequenceNumber))
                  {
                    batchSequenceNumber = couponSequence.BatchSequenceNumber;
                    batchTotalGrossValue = 0;
                    batchTotalInterlineServiceCharge = 0;
                    batchTotalTax = 0;
                    batchTotalNoCoupons = 0;
                    batchTotalHandlingFeeAmount = 0;
                    //foreach (
                    //    var coupon in
                    //        invoice.AwbDataRecord.Where(c => c.BatchSequenceNumber == couponSequence.BatchSequenceNumber).OrderBy(o => o.BatchSequenceNumber).ThenBy(
                    //            o => o.RecordSequenceWithinBatch))
                    foreach (
                        var coupon in
                            invoice.AwbDataRecord.Where(c => c.BatchSequenceNumber == couponSequence.BatchSequenceNumber && c.BillingCodeId == 2).OrderBy(o => o.BatchSequenceNumber).ThenBy(
                                o => o.RecordSequenceWithinBatch))
                    {
                      invoiceTotalNoCoupons++;

                      #region Invoice Coupons/Awb Details

                      recordSequenceNumber++;
                      batchTotalNoCoupons++;
                      ScheduleTotalNoCoupons++;

                      //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                      stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                      //Record Sequence Number
                      stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                      //Standerd Field identifier '25' for AWB details.
                      stringBuilderCargoIdecHeaderAndCoupons.Append("25");

                      //Billing Airline code 
                      stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

                      //Billed Airline code 
                      stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                      //Billing Code
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.BillingCodeId == 1 ? "P" : "C").PadLeft(1, '0'));

                      //Invoice Number
                      stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

                      //Page/batch Sequence Number 
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.BatchSequenceNumber.ToString().PadLeft(5, '0'));

                      //Record Sequence Within Batch
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.RecordSequenceWithinBatch.ToString().PadLeft(5, '0'));

                      //Required
                      ////Awb Date in 'YYMMDD' format
                      //stringBuilderCargoIdecHeaderAndCoupons.Append("00" + Convert.ToDateTime(coupon.AwbDate).ToString("MMdd"));
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Month).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));

                      var dtmm = Convert.ToDateTime(coupon.AwbDate).Month;
                      var dtdd = Convert.ToDateTime(coupon.AwbDate).Day;
                      if (dtmm.ToString().Length > 1 && dtdd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dtmm.ToString().Length == 1 && dtdd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dtmm.ToString().Length == 1 && dtdd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dtmm.ToString().Length > 1 && dtdd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.AwbDate).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.AwbDate).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.AwbDate).Day).Substring(0, 2).PadLeft(2, '0'));
                      }



                      //Ticket Issuing Airline
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.AwbIssueingAirline ?? string.Empty).PadLeft(4, '0'));

                      //AwbSerialNumber 
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.AwbSerialNumber.ToString().PadLeft(7, '0'));

                      //Not Required
                      ////Ticket/Document Number
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.TicketDocOrFimNumber.ToString().PadLeft(11, '0'));

                      //Check Digit
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.AwbCheckDigit.ToString().PadLeft(1, '0'));

                      //Origin
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ConsignmentOriginId.ToString().PadRight(4, ' '));

                      //Destination
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ConsignmentDestinationId.ToString().PadRight(4, ' '));

                      // Carriage From
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.CarriageFromId.ToString().PadRight(4, ' '));

                      //Carriage To
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.CarriageToId.ToString().PadRight(4, ' '));


                      ////DateOfCarriage in 'YYMMDD' format
                      // stringBuilderCargoIdecHeaderAndCoupons.Append("00" + Convert.ToDateTime(coupon.DateOfCarriage).ToString("MMdd"));
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Month).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      var dcmm = Convert.ToDateTime(coupon.DateOfCarriage).Month;
                      var dcdd = Convert.ToDateTime(coupon.DateOfCarriage).Day;
                      if (dcmm.ToString().Length > 1 && dcdd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dcmm.ToString().Length == 1 && dcdd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dcmm.ToString().Length == 1 && dcdd.ToString().Length > 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString("0" + (Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }
                      else if (dcmm.ToString().Length > 1 && dcdd.ToString().Length == 1)
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(Convert.ToString(Convert.ToDateTime(coupon.DateOfCarriage).Year).Substring(2, 2).PadLeft(2, '0') + Convert.ToString((Convert.ToDateTime(coupon.DateOfCarriage).Month)).Substring(0, 2).PadLeft(2, '0') + Convert.ToString("0" + Convert.ToDateTime(coupon.DateOfCarriage).Day).Substring(0, 2).PadLeft(2, '0'));
                      }



                      //WeightCharges
                      double awbWeightCharge = Convert.ToDouble(coupon.WeightCharges + coupon.ValuationCharges);
                      // stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(awbWeightCharge).ToString().PadLeft(11, '0'));

                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(awbWeightCharge).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                       CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(11, '0'));

                      //  .ToString("N2").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      //CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty)

                      //OtherCharges
                      double awbOtherCharges = Convert.ToDouble(coupon.OtherCharges + coupon.VatAmount);
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(awbOtherCharges).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(11, '0'));

                      //WeightCharges/ Amount Subject to ISC
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(coupon.AmountSubjectToIsc).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(11, '0'));

                      //ISC
                      stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(coupon.IscPer).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(5, '0'));

                      //ISC Rate Sign
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.IscPer < 0 ? "M" : "P");


                      //Currency Adjustment Indicator
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.CurrencyAdjustmentIndicator == null ? " " : coupon.CurrencyAdjustmentIndicator).PadRight(3, ' '));

                      //Actual Flown Weight
                      stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.BilledWeight.ToString().PadLeft(6, '0'));

                      //Proviso/Req. Billing indicator
                      if (string.IsNullOrEmpty(coupon.ProvisoReqSpa))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(' ');
                      }
                      else if (coupon.ProvisoReqSpa.Equals("P"))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ProvisoReqSpa.ToString().PadLeft(1, ' '));
                      }
                      else if (coupon.ProvisoReqSpa.Equals("R"))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ProvisoReqSpa.ToString().PadLeft(1, ' '));
                      }
                      else if (coupon.ProvisoReqSpa.Equals("S"))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(' ');
                      }

                      //Prorate %
                      if (string.IsNullOrEmpty(coupon.ProvisoReqSpa))
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.ProratePer.ToString().PadLeft(2, '0'));
                      }
                      else
                      {
                        stringBuilderCargoIdecHeaderAndCoupons.Append("00");
                      }
                      //Part-shipment indicator
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.PartShipmentIndicator.ToString().PadLeft(1, ' '));
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.PartShipmentIndicator == null ? " " : coupon.PartShipmentIndicator).PadLeft(1, ' '));

                      ////filler
                      stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(4));

                      //Filling Reference
                      //stringBuilderCargoIdecHeaderAndCoupons.Append(coupon.FilingReference.ToString().PadLeft(10, '0'));
                      stringBuilderCargoIdecHeaderAndCoupons.Append((coupon.FilingReference == null ? " " : coupon.FilingReference).PadLeft(10, ' '));

                      stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

                      #endregion
                    }

                    #region Batch/Page Total Details

                    recordSequenceNumber++;

                    //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                    stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                    //Record Sequence Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                    //Standerd Field identifier '40' for Batch/Page Total details.
                    stringBuilderCargoIdecHeaderAndCoupons.Append("45");

                    //Billing Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

                    //Billed Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                    //Billing Code
                    //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                    stringBuilderCargoIdecHeaderAndCoupons.Append('C');

                    //Invoice Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));


                    //Page/batch Sequence Number 
                    stringBuilderCargoIdecHeaderAndCoupons.Append(batchSequenceNumber.ToString().PadLeft(5, '0'));

                    //Record Sequence Within Batch
                    stringBuilderCargoIdecHeaderAndCoupons.Append("99999");
                    // double TotalAmountSubjectToIsc = 0;
                    double TotalawbWeightCharges = 0;
                    double TotalawbOtherCharge = 0;
                    double TotalAmountSubjectToIsc = 0;

                    foreach (
                       var couponT in
                           invoice.AwbDataRecord.Where(c => c.BatchSequenceNumber == couponSequence.BatchSequenceNumber && c.BillingCodeId == 2).OrderBy(o => o.BatchSequenceNumber).ThenBy(
                               o => o.RecordSequenceWithinBatch))
                    {
                      ////WeightCharges
                      TotalawbWeightCharges = TotalawbWeightCharges + Convert.ToDouble(couponT.WeightCharges + couponT.ValuationCharges);
                      //OtherCharges
                      TotalawbOtherCharge = TotalawbOtherCharge + Convert.ToDouble(couponT.OtherCharges + couponT.VatAmount);
                      //Total ISC amount
                      TotalAmountSubjectToIsc = (TotalAmountSubjectToIsc + couponT.IscAmount);
                    }
                    ////WeightCharges
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbWeightCharges).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
                    //OtherCharges
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbOtherCharge).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //ISC Sign
                    stringBuilderCargoIdecHeaderAndCoupons.Append(TotalAmountSubjectToIsc < 0 ? "M" : "P");

                    //totalISCamount
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalAmountSubjectToIsc).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //Net Total : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Net Billing Amount : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Number of Coupons : The count of coupon records that exist in the batch 
                    stringBuilderCargoIdecHeaderAndCoupons.Append(batchTotalNoCoupons.ToString().PadLeft(6, '0'));

                    //Filler
                    stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(24));

                    stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

                    #endregion

                  }

                  #endregion

                  #region Billing code subtotal record / schedule Total Details
                  recordSequenceNumber++;
                  //var awbBillingCodeSubTotal = (from batch in invoice.CGOBillingCodeSubTotal
                  //                     group batch by batch.BillingCode 
                  //                     //    into batchGroup
                  //    select new { BatchSequenceNumber = batchGroup.Key, Count = batchGroup.Select(b => b.InvoiceId).Count() });
                  //foreach (var couponSequence in awbBatches.OrderBy(s => s.BatchSequenceNumber))

                  //foreach (var BillingSubTotal in invoice.CGOBillingCodeSubTotal)
                  foreach (
                 var BillingSubTotal in
                     invoice.CGOBillingCodeSubTotal.Where(c => c.InvoiceId == invoice.Id && c.BillingCode == 2))
                  {

                    //Standerd Messege Identifier Always 'CBD' For Cargo invoices
                    stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

                    //Record Sequence Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

                    //Standerd Field identifier '40' for Batch/Page Total details.
                    stringBuilderCargoIdecHeaderAndCoupons.Append("45");

                    //Billing Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));
                    //Billed Airline code 
                    stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

                    //Billing Code
                    //stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.BillingCode.ToString().PadLeft(1, '0'));
                    stringBuilderCargoIdecHeaderAndCoupons.Append('C');

                    //Invoice Number
                    stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

                    //Page/batch Sequence Number 
                    stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

                    //Record Sequence Within Batch
                    stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

                    ////WeightCharges
                    decimal TotalawbWeightCharg = (BillingSubTotal.TotalWeightCharge + BillingSubTotal.TotalValuationCharge);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbWeightCharg).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //OtherCharges
                    decimal TotalawbOtherCharg = (BillingSubTotal.TotalOtherCharge + BillingSubTotal.TotalVatAmount);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(TotalawbOtherCharg).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //ISC Sign
                    stringBuilderCargoIdecHeaderAndCoupons.Append(BillingSubTotal.TotalIscAmount < 0 ? "M" : "P");

                    //totalISCamount
                    //decimal TotalawbOtherCharg = ( + BillingSubTotal.TotalVatAmount);
                    stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(BillingSubTotal.TotalIscAmount).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

                    //Net Total : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Net Billing Amount : Always ‘999999999999999’
                    stringBuilderCargoIdecHeaderAndCoupons.Append("999999999999999");

                    //Number of Coupons : The count of coupon records that exist in the batch 
                    stringBuilderCargoIdecHeaderAndCoupons.Append(ScheduleTotalNoCoupons.ToString().PadLeft(6, '0'));

                    ////filler
                    stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(24));

                    stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");
                  }

                  #endregion
                }
              }

              #region Invoice Total Details

              recordSequenceNumber++;

              //Standerd Messege Identifier Always 'PBD' For Passenger invoices
              stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

              //Record Sequence Number
              stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

              //Standerd Field identifier '40' for Invoice Total details.
              stringBuilderCargoIdecHeaderAndCoupons.Append("45");

              //Billing Airline code 
              stringBuilderCargoIdecHeaderAndCoupons.Append((billingMember.MemberCodeNumeric).PadLeft(4, '0'));

              //Billed Airline code 
              stringBuilderCargoIdecHeaderAndCoupons.Append((billedMember.MemberCodeNumeric).PadLeft(4, '0'));

              //Billing Code
              stringBuilderCargoIdecHeaderAndCoupons.Append("9");

              //Invoice Number
              stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.InvoiceNumber.PadRight(14, ' '));

              //Page/batch Sequence Number 
              stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

              //Record Sequence Within Batch
              stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

              ////WeightCharges
              decimal InvoiceTotalawbWeightCharg = (invoice.CGOInvoiceTotal.TotalWeightCharge + invoice.CGOInvoiceTotal.TotalValuationCharge);
              stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(InvoiceTotalawbWeightCharg).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
              fileTotalWeightCharges += InvoiceTotalawbWeightCharg;

              //OtherCharges
              decimal InvoiceTotalawbOtherCharg = (invoice.CGOInvoiceTotal.TotalOtherCharge + invoice.CGOInvoiceTotal.TotalVatAmount);
              stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(InvoiceTotalawbOtherCharg).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
              fileTotalOtherCharges += InvoiceTotalawbOtherCharg;

              //ISC Sign
              stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.CGOInvoiceTotal.TotalIscAmount < 0 ? "M" : "P");

              //totalISCamount
              //decimal TotalawbOtherCharg = ( + BillingSubTotal.TotalVatAmount);
              stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(invoice.CGOInvoiceTotal.TotalIscAmount).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
              fileTotalISCamount += invoice.CGOInvoiceTotal.TotalIscAmount;

              //Net Total
              stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(invoice.CGOInvoiceTotal.NetTotal).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
              fileNetTotal += invoice.CGOInvoiceTotal.NetTotal;

              //Net Billing Amount
              stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(invoice.CGOInvoiceTotal.NetBillingAmount).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                      CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));
              fileNetBillingAmount += invoice.CGOInvoiceTotal.NetBillingAmount;

              //Total Number of AWB Records
              stringBuilderCargoIdecHeaderAndCoupons.Append(invoice.CGOInvoiceTotal.NoOfBillingRecords.ToString().PadLeft(6, '0'));
              fileTotalNoRecords += Math.Abs(invoice.CGOInvoiceTotal.NoOfBillingRecords);

              ////Filler
              stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(24));

              stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

              #endregion
            }

            #region File total Details

            recordSequenceNumber++;

            //Standerd Messege Identifier Always 'CBD' For Cargo invoices
            stringBuilderCargoIdecHeaderAndCoupons.Append("CBD");

            //Record Sequence Number
            stringBuilderCargoIdecHeaderAndCoupons.Append(recordSequenceNumber.ToString().PadLeft(8, '0'));

            //Standerd Field identifier '75' for File Total details.
            stringBuilderCargoIdecHeaderAndCoupons.Append("45");

            //Billing Airline code : Accounting code of the Billing Airline for which the file is created
            stringBuilderCargoIdecHeaderAndCoupons.Append((billingMemberCodeNumeric).PadLeft(4, '0'));

            //Billed Airline code : Always ‘9999’
            stringBuilderCargoIdecHeaderAndCoupons.Append("9999");

            //Billing Code : Always ‘9’.
            stringBuilderCargoIdecHeaderAndCoupons.Append("9");

            //Invoice Number : 6N portion - always ‘999999’ and 8 A/N portion - always ‘99999999’
            stringBuilderCargoIdecHeaderAndCoupons.Append("99999999999999");

            //Page/batch Sequence Number : Always ‘99999’
            stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

            //Record Sequence Within Batch : Always ‘99999’
            stringBuilderCargoIdecHeaderAndCoupons.Append("99999");

            //TotalWeightCharges
            stringBuilderCargoIdecHeaderAndCoupons.Append(
               Math.Abs(fileTotalWeightCharges).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                   CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

            //TotalOtherCharges
            stringBuilderCargoIdecHeaderAndCoupons.Append(
               Math.Abs(fileTotalOtherCharges).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                   CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

            //Filler
            stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(1));

            //TotalIscAmount
            stringBuilderCargoIdecHeaderAndCoupons.Append(
               Math.Abs(fileTotalISCamount).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                   CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

            //NetTotal
            stringBuilderCargoIdecHeaderAndCoupons.Append(
               Math.Abs(fileNetTotal).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                   CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

            //NetBillingAmount
            stringBuilderCargoIdecHeaderAndCoupons.Append(
              Math.Abs(fileNetBillingAmount).ToString("N3").Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty).Replace(
                  CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator, String.Empty).PadLeft(15, '0'));

            //Total No. Of AWB Records
            stringBuilderCargoIdecHeaderAndCoupons.Append(Math.Abs(fileTotalNoRecords));

            //Filler
            stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(24));

            ////Filler
            // stringBuilderCargoIdecHeaderAndCoupons.Append(String.Empty.PadLeft(17));

            stringBuilderCargoIdecHeaderAndCoupons.Append("\r\n");

            #endregion

            //This portion of code used to create file on tempory location.
            string fileUploadPath = FileIo.GetATPCOFTPDownloadFolderPath();
            // string fileUploadPath = @"D:\\oldidec\"; 
            // @"D:\\oldidec";//
            //fileUploadPath = @"D:\OLDIDEC_FILES\";
            // If sending non-zipped file:
            //V16.PROD.XMT@@RCN.IDECP
            //replace PROD to UTST in both file name
            string fileName = String.Empty;

            if (SystemParameters.Instance.Atpco.ApplicationMode.ToUpper() == "PROD".ToUpper())
            {
              fileName = "V16.PROD.XMT" + billingMemberCodeAlpha + "RCN.IDECC";
            }
            else
            {
              fileName = "V16.UTST.XMT" + billingMemberCodeAlpha + "RCN.IDECC";
            }


            // If sending zipped file:
            // V16.PROD.XMT@@RCZ.IDECP @@=Member Alpha Code
            //string zipFileName = "V16.PROD.XMT" + billingMemberCodeAlpha + "RCZ.IDECP";
            //Add the single quotes to zip file name
            string zipFileName = string.Empty;

            if (SystemParameters.Instance.Atpco.ApplicationMode.ToUpper() == "PROD".ToUpper())
            {
              zipFileName = "'V16.PROD.XMT" + billingMemberCodeAlpha + "RCZ.IDECC'";
            }
            else
            {
              zipFileName = "'V16.UTST.XMT" + billingMemberCodeAlpha + "RCZ.IDECC'";
            }


            var streamWriter = File.CreateText(fileUploadPath + fileName);
            streamWriter.Write(stringBuilderCargoIdecHeaderAndCoupons.ToString().TrimEnd(new char[] { '\r', '\n' }));
            streamWriter.Close();
            //Create Zip File.
            //Add guid in Zip File Name
            string guidKey = Guid.NewGuid().ToString();
            zipFileName = zipFileName + "_" + guidKey;
            FileIo.ZipOutputFile((fileUploadPath + fileName), fileUploadPath, zipFileName);
            Logger.Info("Zip Output File Generated For Member:" + billingMemberCodeAlpha);
            Logger.Info("Zip Output File" + zipFileName + " Created at:" + fileUploadPath);
            var isInputFile = new IsInputFile
            {
              BillingMonth = lastBillingMonthPeriod.Month,
              BillingPeriod = lastBillingMonthPeriod.Period,
              BillingYear = lastBillingMonthPeriod.Year,
              FileDate = DateTime.UtcNow,
              FileFormat = FileFormatType.OldIdec,
              FileLocation = fileUploadPath,
              //File location should not contain file name
              FileName = zipFileName,
              FileStatus = FileStatusType.AvailableForDownload,
              SenderRecieverType = (int)FileSenderRecieverType.ATPCO,
              FileVersion = "0.1",
              IsIncoming = true,
              ReceivedDate = DateTime.UtcNow,
              SenderReceiverIP = Dns.GetHostByName(Dns.GetHostName()).AddressList.First().ToString(),
              OutputFileDeliveryMethodId = 1
            };
            IsInputFileRepository.Add(isInputFile);
            UnitOfWork.CommitDefault();
            Logger.Info("Add Entry in Is File Log for file:" + zipFileName);
          }
        }
        //else
        //{
        //   Logger.Info("Send Email to IS Admin for Value confurmation.");
        //   ////Alert and Email to IS Admin
        //   //StringBuilder pendingInvoice = new StringBuilder();
        //   //pendingInvoice.Append("<table><tr><td>Billing Airline</td><td>Billed Airline</td><td>   Billing Year/Month/Period</td><td>Invoice Number</td></tr>");
        //   //foreach (var inv in checkPaxInvoicelist)
        //   //{
        //   //    pendingInvoice.Append("<tr>");
        //   //    pendingInvoice.Append("<td>" + string.Format("{0}/{1}", inv.BillingMember.MemberCodeAlpha, inv.BillingMember.MemberCodeNumeric) + "</td>");
        //   //    pendingInvoice.Append("<td>" + string.Format("{0}/{1}", inv.BilledMember.MemberCodeAlpha, inv.BilledMember.MemberCodeNumeric) + "</td>");
        //   //    pendingInvoice.Append("<td>" + string.Format("{0}/{1}/{2}", inv.BillingYear, inv.BillingMonth, inv.BillingPeriod) + "</td>");
        //   //    pendingInvoice.Append("<td>" + inv.InvoiceNumber + "</td>");
        //   //    pendingInvoice.Append("</tr>");
        //   //}
        //   //pendingInvoice.Append("</table>");
        //   //var context = new VelocityContext();
        //   //context.Put("Invoices", pendingInvoice);
        //   //const string message = "Passenger Old-IDEC downgrade process was aborted.";
        //   //const string title = "Passenger Old-IDEC downgraded files generation process was aborted.";
        //   //var issisOpsAlert = new ISSISOpsAlert
        //   //{
        //   //    Message = String.Format(message),
        //   //    AlertDateTime = DateTime.UtcNow,
        //   //    IsActive = true,
        //   //    EmailAddress = SystemParameters.Instance.SIS_OpsDetails.SisOpsEmail,
        //   //    Title = title
        //   //};
        //   //BroadcastMessagesManager.AddAlert(issisOpsAlert, EmailTemplateId.ISAdminPendingBVCProcessesAlert, context);
        //   //Logger.Info("Email send to IS Admin:" + SystemParameters.Instance.SIS_OpsDetails.SisOpsEmail);
        //}



      }
      catch (Exception ex)
      {
        Logger.Error("Error occurred while generating Old-IDEC Downgrade File.", ex);
        var context = new VelocityContext();
        context.Put("ErrorMessage", ex.Message);
        context.Put("BillingMonth", string.Format("{0}-{1}", lastBillingMonthPeriod.Year, CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(lastBillingMonthPeriod.Month).ToUpper()));
        const string message = "Old-IDEC Downgrade Files Generation Failed.";
        const string title = "Old-IDEC Downgrade Files Generation Failed.";
        var issisOpsAlert = new ISSISOpsAlert
        {
          Message = String.Format(message),
          AlertDateTime = DateTime.UtcNow,
          IsActive = true,
          EmailAddress = SystemParameters.Instance.SIS_OpsDetails.SisOpsEmail,
          Title = title
        };
        BroadcastMessagesManager.AddAlert(issisOpsAlert, EmailTemplateId.ISAdminOldIdecFailureNotification, context);
      }
    }



    //==End 28.11.2011==========================================================================


    /// <summary>
    /// Get Member Location Information.
    /// </summary>
    /// <param name="invoiceId">Invoice whose member locations need to be retrieved.</param>
    /// <param name="isBillingMember">Is it a billing Member.</param>
    /// <param name="locationCode">The location code.</param>
    /// <returns>MemberLocationInformation class object</returns>
    public MemberLocationInformation GetMemberReferenceData(string invoiceId, bool isBillingMember, string locationCode)
    {
      var invoiceGuid = invoiceId.ToGuid();
      MemberLocationInformation memberLocationInformation = null;

      var invoice = CGOInvoiceRepository.Single(id: new Guid(invoiceId));

      if (string.IsNullOrEmpty(locationCode))
      {
        locationCode = isBillingMember ? invoice.BillingMemberLocationCode : invoice.BilledMemberLocationCode;
      }

      if (string.IsNullOrEmpty(locationCode))
      {
        memberLocationInformation = MemberLocationInfoRepository.Single(memLocation => memLocation.IsBillingMember == isBillingMember && memLocation.InvoiceId == invoiceGuid);
      }
      else
      {
        var memberId = isBillingMember ? invoice.BillingMemberId : invoice.BilledMemberId;
        var memberLocation = LocationRepository.Single(location => location.LocationCode == locationCode && location.MemberId == memberId);
        if (memberLocation != null)
        {
          memberLocationInformation = new MemberLocationInformation
          {
            CompanyRegistrationId = memberLocation.RegistrationId,
            AddressLine1 = memberLocation.AddressLine1,
            AddressLine2 = memberLocation.AddressLine2,
            AddressLine3 = memberLocation.AddressLine3,
            CityName = memberLocation.CityName,
            CountryCode = memberLocation.CountryId,
            CountryName = memberLocation.Country.Name,
            DigitalSignatureRequiredId = 1,
            SubdivisionName = memberLocation.SubDivisionName,
            SubdivisionCode = memberLocation.SubDivisionCode,
            LegalText = memberLocation.LegalText,
            OrganizationName = memberLocation.MemberLegalName,
            PostalCode = memberLocation.PostalCode,
            TaxRegistrationId = memberLocation.TaxVatRegistrationNumber,
            MemberLocationCode = memberLocation.LocationCode,
            IsBillingMember = isBillingMember,
            InvoiceId = invoiceGuid,
            AdditionalTaxVatRegistrationNumber = memberLocation.AdditionalTaxVatRegistrationNumber
          };

          if (!string.IsNullOrEmpty(invoice.LegalText))
          {
            memberLocationInformation.LegalText = invoice.LegalText;
          }
          else if (string.IsNullOrEmpty(memberLocationInformation.LegalText))
          {
            var eBillingConfig = MemberManager.GetEbillingConfig(memberLocation.MemberId);
            memberLocationInformation.LegalText = eBillingConfig != null ? eBillingConfig.LegalText : memberLocation.LegalText;
          }
        }
      }

      return memberLocationInformation;
    }
    /// <summary>
    /// Function to perform delete on selected invoice
    /// </summary>
    /// <param name="invoiceId">invoice id To Be Deleted.</param>
    /// <returns>Returns true on success, false otherwise.</returns>
    public bool DeleteInvoice(string invoiceId)
    {
      var invoiceToBeDeleted = CGOInvoiceRepository.Single(id: new Guid(invoiceId));

      if (invoiceToBeDeleted == null) return false;
      CGOInvoiceRepository.Delete(invoiceToBeDeleted);
      UnitOfWork.CommitDefault();

      return true;
    }
    /// <summary>
    /// Determines whether transaction exists for the specified invoice id
    /// </summary>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns>
    /// 	<c>true</c> if transaction exists for the specified invoice id; otherwise, <c>false</c>.
    /// </returns>
    public bool IsTransactionExists(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var isTransactionExists = (CargoAwbRecordRepository.GetCount(couponRecord => couponRecord.InvoiceId == invoiceGuid) > 0 ||
                                 BillingMemoRepository.GetCount(bmRecord => bmRecord.InvoiceId == invoiceGuid) > 0 ||
                                 RejectionMemoRepository.GetCount(rmRecord => rmRecord.InvoiceId == invoiceGuid) > 0);

      // At least one transaction/line item should be present.
      return isTransactionExists;
      // return true;
    }

    /// <summary>
    /// Set BilledMember property of invoice when there is business exception
    /// </summary>
    /// <param name="billedMemberId">Billed Member Id</param>
    /// <returns></returns>
    public Member GetBilledMember(int billedMemberId)
    {
      return MemberManager.GetMember(billedMemberId);
    }

    /// <summary>
    /// Update parent id of rejection memo AWB attachment record for given Guids
    /// </summary>
    /// <param name="attachments">list of Guid of rejection memo AWB attachment record</param>
    /// <param name="parentId">rejection memo id</param>
    /// <returns></returns>
    public IList<RMAwbAttachment> UpdateRejectionMemoAwbAttachment(IList<Guid> attachments, Guid parentId)
    {
      var rmAwbAttachmentInDb = RMAwbAttachmentRepository.Get(couponAttachment => attachments.Contains(couponAttachment.Id));
      foreach (var recordAttachment in rmAwbAttachmentInDb)
      {
        recordAttachment.ParentId = parentId;
        RMAwbAttachmentRepository.Update(recordAttachment);
      }
      UnitOfWork.CommitDefault();
      return rmAwbAttachmentInDb.ToList();
    }


    /// <summary>
    /// Add RejectionMemo Record. Used to save RM to display error message while adding RM Coupon
    /// </summary>
    /// <param name="rejectionMemoRecord">RejectionMemoRecord to be added.</param>
    /// <param name="linkingErrorMessage">Error message in RM coupon linking</param>
    /// <param name="warningMessage">Warning message in RM coupon linking</param>
    /// <returns></returns>
    public CargoRejectionMemo AddRejectionMemoRecord(CargoRejectionMemo rejectionMemoRecord, out string linkingErrorMessage, out string warningMessage)
    {
      linkingErrorMessage = string.Empty;
      rejectionMemoRecord.ReasonCode = rejectionMemoRecord.ReasonCode.ToUpper();
      warningMessage = ValidateRejectionMemo(rejectionMemoRecord, null);
      rejectionMemoRecord.BillingCode = Convert.ToInt32(BillingCode.RejectionMemo);

      // Get details of rejection memo record corresponding to the id passed.
      RejectionMemoRepository.Add(rejectionMemoRecord);
      
      // SCP225675: //Urgent// About the incoming XML file for SEP P4
      try
      {
        UnitOfWork.CommitDefault();
      }
      catch (Exception exception)
      {
        Logger.ErrorFormat("Exception Details: {0}", exception.InnerException.ToString());
        // If table level constraint for Rejection Stage, throws the exception then will throw it as BusinessException.
        if (exception.InnerException.Message.Contains("CK_CGORM#REJ_STG"))
        {
          throw new ISBusinessException(ErrorCodes.InvalidRejectionStageAttemptedToSave);
        }
        throw;
      }

      if (rejectionMemoRecord.IsLinkingSuccessful.HasValue && rejectionMemoRecord.IsLinkingSuccessful.Value)
      {
        //if (rejectionMemoRecord.IsBreakdownAllowed.HasValue && rejectionMemoRecord.IsBreakdownAllowed.Value)
        linkingErrorMessage = RejectionMemoRepository.InheritRMAwbDetails(rejectionMemoRecord.Id);
      }

      CGOInvoiceRepository.UpdateCargoRMInvoiceTotal(rejectionMemoRecord.InvoiceId, Convert.ToInt32(BillingCode.RejectionMemo), rejectionMemoRecord.Id, rejectionMemoRecord.LastUpdatedBy);

      // Update expiry date for purging.
    //  UpdateRejectionMemoExpiryDate(rejectionMemoRecord);

      return rejectionMemoRecord;
    }

    /// <summary>
    /// Gets the RM awb breakdown record details.
    /// </summary>
    /// <param name="issuingAirline">The issuing airline.</param>
    /// <param name="serialNo">The serial no.</param>
    /// <param name="rmId">The rm id.</param>
    /// <param name="billingMemberId">The billing member id.</param>
    /// <param name="billedMemberId">The billed member id.</param>
    /// <param name="awbBillingCode">The awb billing code.</param>
    /// <returns></returns>
    public RMLinkedAwbDetails GetRMAwbBreakdownRecordDetails(string issuingAirline, int serialNo, Guid rmId, int billingMemberId, int billedMemberId, int awbBillingCode)
    {
      var rmLinkedAwbDetails = RMAwbRepository.GetRMAwbLinkingDetails(issuingAirline, serialNo, rmId, billingMemberId, billedMemberId, awbBillingCode);

      return rmLinkedAwbDetails;
    }

    /// <summary>
    /// Get the single record details from the list of RM coupon
    /// </summary>
    public RMLinkedAwbDetails GetRMAwbBreakdownSingleRecordDetails(Guid awbId, Guid rejectionMemoId)
    {
      var linkedAwbDetails = RMAwbRepository.GetLinkedAwbAmountDetails(awbId, rejectionMemoId);

      if (linkedAwbDetails != null && linkedAwbDetails.Details != null)
      {
        // Round the amounts to two decimal places - otherwise comparison does not work.
        linkedAwbDetails.Details.AllowedIscAmount = ConvertUtil.Round(linkedAwbDetails.Details.AllowedIscAmount, Constants.CgoDecimalPlaces);
        linkedAwbDetails.Details.AcceptedIscAmount = ConvertUtil.Round(linkedAwbDetails.Details.AcceptedIscAmount, Constants.CgoDecimalPlaces);

        if (linkedAwbDetails.Details.BilledWeightCharge.HasValue)
          linkedAwbDetails.Details.BilledWeightCharge = ConvertUtil.Round(linkedAwbDetails.Details.BilledWeightCharge.Value, Constants.CgoDecimalPlaces);

        if (linkedAwbDetails.Details.AcceptedWeightCharge.HasValue)
          linkedAwbDetails.Details.AcceptedWeightCharge = ConvertUtil.Round(linkedAwbDetails.Details.AcceptedWeightCharge.Value, Constants.CgoDecimalPlaces);

        if (linkedAwbDetails.Details.BilledValuationCharge.HasValue)
          linkedAwbDetails.Details.BilledValuationCharge = ConvertUtil.Round(linkedAwbDetails.Details.BilledValuationCharge.Value, Constants.CgoDecimalPlaces);

        if (linkedAwbDetails.Details.AcceptedValuationCharge.HasValue)
          linkedAwbDetails.Details.AcceptedValuationCharge = ConvertUtil.Round(linkedAwbDetails.Details.AcceptedValuationCharge.Value, Constants.CgoDecimalPlaces);

        if (linkedAwbDetails.Details.BilledVatAmount.HasValue)
          linkedAwbDetails.Details.BilledVatAmount = ConvertUtil.Round(linkedAwbDetails.Details.BilledVatAmount.Value, Constants.CgoDecimalPlaces);

        if (linkedAwbDetails.Details.AcceptedVatAmount.HasValue)
          linkedAwbDetails.Details.AcceptedVatAmount = ConvertUtil.Round(linkedAwbDetails.Details.AcceptedVatAmount.Value, Constants.CgoDecimalPlaces);

        linkedAwbDetails.Details.AcceptedAmtSubToIsc = ConvertUtil.Round(linkedAwbDetails.Details.AcceptedAmtSubToIsc, Constants.CgoDecimalPlaces);
        linkedAwbDetails.Details.AllowedAmtSubToIsc = ConvertUtil.Round(linkedAwbDetails.Details.AllowedAmtSubToIsc, Constants.CgoDecimalPlaces);
        linkedAwbDetails.Details.BilledOtherCharge = ConvertUtil.Round(linkedAwbDetails.Details.BilledOtherCharge, Constants.CgoDecimalPlaces);
        linkedAwbDetails.Details.AcceptedOtherCharge = ConvertUtil.Round(linkedAwbDetails.Details.AcceptedOtherCharge, Constants.CgoDecimalPlaces);
      }

      return linkedAwbDetails;
    }

    /// <summary>
    /// Add rejection memo attachment record
    /// </summary>
    /// <param name="attachment"></param>
    /// <returns></returns>
    public CgoRejectionMemoAttachment AddRejectionMemoAttachment(CgoRejectionMemoAttachment attachment)
    {
      RejectionMemoAttachmentRepository.Add(attachment);

      UnitOfWork.CommitDefault();
      //SCPID 85039 - IS Web Performance Feedback / Billing History & Correspondence / Other issues 
      //attachment = RejectionMemoAttachmentRepository.Single(a => a.Id == attachment.Id);

      return attachment;
    }


    /// <summary>
    /// Gets the rejection memo attachments.
    /// </summary>
    /// <param name="attachmentIds">The attachment ids.</param>
    public List<CgoRejectionMemoAttachment> GetRejectionMemoAttachments(List<Guid> attachmentIds)
    {
      return RejectionMemoAttachmentRepository.Get(attachment => attachmentIds.Contains(attachment.Id)).ToList();
    }

    /// <summary>
    /// Get rejection memo attachment details
    /// </summary>
    /// <param name="attachmentId">attachment Id</param>
    /// <returns></returns>
    public CgoRejectionMemoAttachment GetRejectionMemoAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();

      var attachmentRecord = RejectionMemoAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);

      return attachmentRecord;
    }

    /// <summary>
    /// Gets the rejection memo coupon breakdown count.
    /// </summary>
    /// <param name="memoRecordId">The memo record id.</param>
    /// <returns></returns>
    public long GetRejectionMemoAwbCount(string memoRecordId)
    {
      var memoRecordGuid = memoRecordId.ToGuid();
      return RMAwbRepository.GetCount(rmAwb => rmAwb.RejectionMemoId == memoRecordGuid);
    }

    /// <summary>
    /// Add CargoRejectionMemo CouponDetails.
    /// </summary>
    /// <param name="rmAwbRecord">RejectionMemoCouponBreakdownRecord to be added.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <param name="duplicateErrorMessage">The duplicate error message.</param>
    /// <param name="isFromBillingHistory">Flag indicating whether method is called from Billing History.</param>
    /// <returns>Add coupon breakdown record</returns>
    public RMAwb AddRejectionMemoAwbDetails(RMAwb rmAwbRecord, string invoiceId, out string duplicateErrorMessage, bool isFromBillingHistory = false, Guid? logRefId = null)
    {
      






       //SCPID 85039 - IS Web Performance Feedback / Billing History & Correspondence / Other issues
        //Used single instead of get 
      //var rejectionMemoRecord = RejectionMemoRepository.Single(rmAwbRecord.RejectionMemoId);
      var rejectionMemo = RejectionMemoRepository.Get(rejMemo => rejMemo.Id == rmAwbRecord.RejectionMemoId).ToList();
      var rejectionMemoRecord = rejectionMemo.FirstOrDefault();
      










      // Validate rejection memo coupon breakdown records.
      duplicateErrorMessage = ValidateRejectionMemoAwb(rmAwbRecord, null, rejectionMemoRecord, invoiceId);
      





      if (!string.IsNullOrEmpty(duplicateErrorMessage))
      {
        rmAwbRecord.ISValidationFlag = DuplicateValidationFlag;
      }

      if (!isFromBillingHistory)
      {
        





          //CMP#459 : Validate Amounts.
          var outcomeOfMismatchOnRmBilledOrAllowedAmounts = Convert.ToBoolean(SystemParameters.Instance.ValidationParams.CGORMBilledAllowedAmounts);
          IList<IsValidationExceptionDetail> exceptionDetailsList = new List<IsValidationExceptionDetail>();
          ValidateAmountsInRMonAwbLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord, rmAwbRecord, isFromBillingHistory);
          if (exceptionDetailsList.Where(err => err.ErrorStatus == "2").Count() > 0)
          {
              var errorDesc = string.Empty;
              foreach (var err in exceptionDetailsList.Where(err => err.ErrorStatus == "2"))
              {
                  errorDesc += err.ErrorDescription + " ¥ ";
              }
              throw new ISBusinessException(errorDesc);
          }






      }
      rmAwbRecord.BdSerialNumber = GetSerialNo(rejectionMemoRecord);

      





      RMAwbRepository.Add(rmAwbRecord);
      UnitOfWork.CommitDefault();
      











      // Update rejection memo invoice total. 
      CGOInvoiceRepository.UpdateCargoRMInvoiceTotal(rejectionMemoRecord.InvoiceId, Convert.ToInt32(BillingCode.RejectionMemo), rejectionMemoRecord.Id, rejectionMemoRecord.LastUpdatedBy);
      








      return rmAwbRecord;
    }

    /// <summary>
    /// Get linking details for rejection memo
    /// </summary>
    /// <param name="criteria"></param>
    /// <returns></returns>
    public CgoRMLinkingResultDetails GetRejectionMemoLinkingDetails(CgoRMLinkingCriteria criteria)
    {
        criteria.TransactionType = criteria.RejectionStage == 1 ? "BM" : "RM";
      var result = RejectionMemoRepository.GetRMLinkingDetails(criteria);
      if (result.MemoAmount != null)
      {
        SetRMLinkedMemoAmountDifference(result.MemoAmount, criteria.RejectionStage);
      }

      return result;
    }

    /// <summary>
    /// Gets the serial no.
    /// </summary>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <returns></returns>
    private int GetSerialNo(CargoRejectionMemo rejectionMemoRecord)
    {
      var serialNo = 1;
      var rejectionMemoCouponRecord = RMAwbRepository.Get(rmAwb => rmAwb.RejectionMemoId == rejectionMemoRecord.Id).OrderByDescending(rmAwbRecord => rmAwbRecord.BdSerialNumber).FirstOrDefault();
      if (rejectionMemoCouponRecord != null)
      {
        serialNo = rejectionMemoCouponRecord.BdSerialNumber + 1;
      }

      return serialNo;
    }

    /// <summary>
    /// Gets the BM awb serial no.
    /// </summary>
    /// <param name="billingMemoRecordId">The billing memo record id.</param>
    /// <returns></returns>
    private int GetBMAwbSerialNo(Guid billingMemoRecordId)
    {
      var serialNo = 1;
      var billingMemoCouponRecord = BMAwbRepository.Get(bmAwb => bmAwb.BillingMemoId == billingMemoRecordId).OrderByDescending(bmAwbRecord => bmAwbRecord.BdSerialNumber).FirstOrDefault();
      if (billingMemoCouponRecord != null)
      {
        serialNo = billingMemoCouponRecord.BdSerialNumber + 1;
      }

      return serialNo;
    }

    /// <summary>
    /// Validates the rejection memo AWB.
    /// </summary>
    /// <param name="rmawbRecord">The rejection memo AWB record.</param>
    /// <param name="rmAwbRecordInDb">The rejection memo coupon breakdown record in db.</param>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    private string ValidateRejectionMemoAwb(RMAwb rmawbRecord, RMAwb rmAwbRecordInDb, CargoRejectionMemo rejectionMemoRecord, string invoiceId)
    {
      var isUpdateOperation = false;
      var duplicateErrorMessage = string.Empty;
      if (rmAwbRecordInDb != null)
      {
        isUpdateOperation = true;
      }

      //SCP100582 - SIS case 3146965
      if (rmawbRecord.NetRejectAmount < 0)
      {
          throw new ISBusinessException(CargoErrorCodes.RMAwbNetRejectAmountShouldNotBeNegative);
      }

      if (rejectionMemoRecord.RecordSequenceWithinBatch <= 0 || rejectionMemoRecord.BatchSequenceNumber <= 0)
      {
          throw new ISBusinessException(CargoErrorCodes.BatchRecordSequenceNoReq);
      }
        // If any of the header field values are given for prorate ladder, then atleast 1 detail record should be present and all prorate fields should be specified.
      if (rmawbRecord.TotalProrateAmount != null || !string.IsNullOrEmpty(rmawbRecord.ProrateCalCurrencyId) || rmawbRecord.ProrateLadder.Count > 0)
      {
        if (rmawbRecord.ProrateLadder.Count == 0 || rmawbRecord.TotalProrateAmount == null || string.IsNullOrEmpty(rmawbRecord.ProrateCalCurrencyId))
          throw new ISBusinessException(CargoErrorCodes.ProrateLadderRequired);
      }

      // Validate ConsignmentOriginId 
      if (!isUpdateOperation || CompareUtil.IsDirty(rmAwbRecordInDb.ConsignmentOriginId, rmawbRecord.ConsignmentOriginId))
      {
        if (!string.IsNullOrEmpty(rmawbRecord.ConsignmentOriginId)
          && !ReferenceManager.IsValidAirportCode(rmawbRecord.ConsignmentOriginId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidConsignmentOriginCode);
        }
      }

      // Validate ConsignmentDestinationId 
      if (!isUpdateOperation || CompareUtil.IsDirty(rmAwbRecordInDb.ConsignmentDestinationId, rmawbRecord.ConsignmentDestinationId))
      {
        if (!string.IsNullOrEmpty(rmawbRecord.ConsignmentDestinationId)
          && !ReferenceManager.IsValidAirportCode(rmawbRecord.ConsignmentDestinationId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidConsignmentDestinationCode);
        }
      }

      // ConsignmentOriginId and ConsignmentDestinationId should not be same.
      if (!string.IsNullOrEmpty(rmawbRecord.ConsignmentOriginId) &&
        !string.IsNullOrEmpty(rmawbRecord.ConsignmentDestinationId) &&
        rmawbRecord.ConsignmentOriginId.Trim().Equals(rmawbRecord.ConsignmentDestinationId.Trim()))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidOriginDestinationCombination);
      }

      // Validate CarriageFromId 
      if (!isUpdateOperation || CompareUtil.IsDirty(rmAwbRecordInDb.CarriageFromId, rmawbRecord.CarriageFromId))
      {
        if (!string.IsNullOrEmpty(rmawbRecord.CarriageFromId)
          && !ReferenceManager.IsValidAirportCode(rmawbRecord.CarriageFromId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidFromCarriageCode);
        }
      }

      // Validate CarriageToId 
      if (!isUpdateOperation || CompareUtil.IsDirty(rmAwbRecordInDb.CarriageToId, rmawbRecord.CarriageToId))
      {
        if (!string.IsNullOrEmpty(rmawbRecord.CarriageToId)
          && !ReferenceManager.IsValidAirportCode(rmawbRecord.CarriageToId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidToCarriageCode);
        }
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for RM AWB Prepaid.
      if (rmawbRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        if (!string.IsNullOrEmpty(rmawbRecord.CarriageFromId) && !string.IsNullOrEmpty(rmawbRecord.CarriageToId) &&
            rmawbRecord.CarriageFromId.Trim().Equals(rmawbRecord.CarriageToId.Trim()))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidCarriageCombination);
        }
      }

      //// Check if passed 'Currency Adjustment Indicator' is a valid currency code
      //// For New coupon Record validation will be done 
      //// For Update coupon Record if value CurrencyAdjustmentIndicator is updated then only validation will be done
      if (!isUpdateOperation || CompareUtil.IsDirty(rmAwbRecordInDb.CurrencyAdjustmentIndicator, rmawbRecord.CurrencyAdjustmentIndicator))
      {
        if (!string.IsNullOrEmpty(rmawbRecord.CurrencyAdjustmentIndicator) && !ReferenceManager.IsValidCurrencyCode(rmawbRecord.CurrencyAdjustmentIndicator))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidCurrencyAdjustmentInd);
        }
      }

      // Either none or both Billed Weight and KG/LB Indicator should have values.
      if ((string.IsNullOrEmpty(rmawbRecord.KgLbIndicator) && rmawbRecord.BilledWeight.HasValue && rmawbRecord.BilledWeight.Value != 0) || (!string.IsNullOrEmpty(rmawbRecord.KgLbIndicator) && (!rmawbRecord.BilledWeight.HasValue || (rmawbRecord.BilledWeight.HasValue && rmawbRecord.BilledWeight.Value == 0))))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBilledWeightKGLBIndicator);
      }

      // If VAT amount difference is zero then breakdown record should get cleared.
      if ((!rmawbRecord.VatAmountDifference.HasValue || rmawbRecord.VatAmountDifference.Value == 0) && rmawbRecord.AwbVat.Count > 0)
      {
        rmawbRecord.AwbVat.Clear();
      }

      // If Other Charge difference is zero then breakdown record should get cleared.
      if (rmawbRecord.OtherChargeDiff == 0 && rmawbRecord.OtherCharge.Count > 0)
      {
        rmawbRecord.OtherCharge.Clear();
      }

      // Validate other charge difference only when breakdown is provided. Breakdown is optional for OtherCharge.
      if (rmawbRecord.OtherCharge.Count > 0)
      {
        double difference = rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageTwo
                              ? ConvertUtil.Round(rmawbRecord.AcceptedOtherCharge - rmawbRecord.BilledOtherCharge,
                                                  Constants.CgoDecimalPlaces)
                              : ConvertUtil.Round(rmawbRecord.BilledOtherCharge - rmawbRecord.AcceptedOtherCharge,
                                                  Constants.CgoDecimalPlaces);
        double? otherChargeBreakdownSum = rmawbRecord.OtherCharge.Sum(oc => oc.OtherChargeCodeValue);

        double otherChargeCodeValueSum = ConvertUtil.Round(otherChargeBreakdownSum.Value, Constants.CgoDecimalPlaces);
        if (otherChargeCodeValueSum != difference)
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidOtherChargeDifferenceAmount);
        }
      }
      // Vat breakdown difference validation 
      IsValidVatDifference(rmawbRecord, rejectionMemoRecord);

      var invoiceGuid = invoiceId.ToGuid();
      //SCP85039:Changed earlier call to procedure(single) to Get() method.
      //var invoice = CGOInvoiceRepository.Single(id: invoiceGuid);
      var invoices = CargoInvoiceRepository.Get(inv => inv.Id == invoiceGuid).ToList();
      var invoice = invoices.FirstOrDefault();

      // Duplicate rejection AWB record validation
      if (!isUpdateOperation || CompareUtil.IsDirty(rmAwbRecordInDb.AwbDate, rmawbRecord.AwbDate) || CompareUtil.IsDirty(rmAwbRecordInDb.AwbSerialNumber, rmawbRecord.AwbSerialNumber) || CompareUtil.IsDirty(rmAwbRecordInDb.AwbIssueingAirline, rmawbRecord.AwbIssueingAirline) || CompareUtil.IsDirty(rmAwbRecordInDb.CarriageFromId, rmawbRecord.CarriageFromId) || CompareUtil.IsDirty(rmAwbRecordInDb.CarriageToId, rmawbRecord.CarriageToId))
      {
        duplicateErrorMessage = GetDuplicateRMAwbCount(rmawbRecord, invoice, rejectionMemoRecord, duplicateErrorMessage);
      }

      TransactionType transType = TransactionType.CargoPrimePrepaid;
      if (rmawbRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        transType = TransactionType.CargoPrimePrepaid;
      }
      else if (rmawbRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
        transType = TransactionType.CargoPrimeChargeCollect;
      }


      if (!ReferenceManager.IsValidNetAmount(Convert.ToDouble(rmawbRecord.NetRejectAmount), transType, invoice.ListingCurrencyId, invoice, validateMinAmount: false, validateMaxAmount: true, applicableMinimumField: ApplicableMinimumField.TotalNetRejectAmount))
      {
        throw new ISBusinessException(CargoErrorCodes.NetRejectAmountIsNotInAllowedRange);
      }
      //Validate ISC amount
      Tolerance currentInvoiceTolerance = new Tolerance();
      if (invoice.Tolerance == null)
      {
        if (invoice.ListingCurrencyId.HasValue)
        {

          currentInvoiceTolerance = CompareUtil.GetTolerance(BillingCategoryType.Pax, invoice.ListingCurrencyId.Value, invoice, Constants.PaxDecimalPlaces);

        }
        else
        {
          currentInvoiceTolerance = new Tolerance
          {
            ClearingHouse = CompareUtil.GetClearingHouse(invoice.SettlementMethodId),
            BillingCategoryId = (int)BillingCategoryType.Pax,
            RoundingTolerance = 0,
            SummationTolerance = 0
          };
        }
      }
      else
      {
        currentInvoiceTolerance = invoice.Tolerance;
      }
      double expectedAllowedIscAmount = 0;
      double expectedAcceptedIscAmount = 0;
      if (transType == TransactionType.CargoPrimePrepaid)
      {
        expectedAllowedIscAmount = ConvertUtil.Round(Convert.ToDouble(rmawbRecord.AllowedIscPercentage * (rmawbRecord.BilledWeightCharge + rmawbRecord.BilledValuationCharge) / 100), Constants.CgoDecimalPlaces);
        expectedAcceptedIscAmount = ConvertUtil.Round(Convert.ToDouble(rmawbRecord.AcceptedIscPercentage * (rmawbRecord.AcceptedWeightCharge + rmawbRecord.AcceptedValuationCharge) / 100), Constants.CgoDecimalPlaces);
      }
      else
      {
        expectedAllowedIscAmount = ConvertUtil.Round(Convert.ToDouble(rmawbRecord.AllowedIscPercentage * (rmawbRecord.AllowedAmtSubToIsc ) / 100), Constants.CgoDecimalPlaces);
        expectedAcceptedIscAmount = ConvertUtil.Round(Convert.ToDouble(rmawbRecord.AcceptedIscPercentage * (rmawbRecord.AcceptedAmtSubToIsc) / 100), Constants.CgoDecimalPlaces);
      }
      if (currentInvoiceTolerance != null && !CompareUtil.Compare(rmawbRecord.AllowedIscAmount, expectedAllowedIscAmount, currentInvoiceTolerance.RoundingTolerance, Constants.CgoDecimalPlaces))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidAllowedIscAmount);
      }
      if (currentInvoiceTolerance != null && !CompareUtil.Compare(rmawbRecord.AcceptedIscAmount, expectedAcceptedIscAmount, currentInvoiceTolerance.RoundingTolerance, Constants.CgoDecimalPlaces))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidAcceptedIscAmount);
      }

      //CMP#459 : Validate Amount at coupon level.
      if (isUpdateOperation)
      {
          //CMP#459 : Validate amounts
          var outcomeOfMismatchOnRmBilledOrAllowedAmounts = Convert.ToBoolean(SystemParameters.Instance.ValidationParams.CGORMBilledAllowedAmounts);
          IList<IsValidationExceptionDetail> exceptionDetailsList = new List<IsValidationExceptionDetail>();
          ValidateAmountsInRMonAwbLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord, rmawbRecord);
          if (exceptionDetailsList.Where(err => err.ErrorStatus == "2").Count() > 0)
          {
              var errorDesc = string.Empty;
              foreach (var err in exceptionDetailsList.Where(err => err.ErrorStatus == "2"))
              {
                  errorDesc += err.ErrorDescription + " ¥ ";
              }
              throw new ISBusinessException(errorDesc);
          }
      }
      return duplicateErrorMessage;
    }

    /// <summary>
    /// Gets the duplicate RM coupon count.
    /// </summary>
    /// <param name="rmAwbRecord">The rejection memo coupon breakdown record.</param>
    /// <param name="invoice">The invoice.</param>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <param name="duplicateErrorMessage">The duplicate error message.</param>
    /// <returns></returns>
    private string GetDuplicateRMAwbCount(RMAwb rmAwbRecord, InvoiceBase invoice, CargoRejectionMemo rejectionMemoRecord, string duplicateErrorMessage)
    {
      DateTime billingDate;
      var billingYearToCompare = 0;
      var billingMonthToCompare = 0;

      if (DateTime.TryParse(string.Format("{0}/{1}/{2}", invoice.BillingYear.ToString().PadLeft(2, '0'), invoice.BillingMonth.ToString().PadLeft(2, '0'), "01"), out billingDate))
      {
        var billingDateToCompare = billingDate.AddMonths(-12);
        billingYearToCompare = billingDateToCompare.Year;
        billingMonthToCompare = billingDateToCompare.Month;
      }

      long duplicateAwbRecordCount = 0;
      if (!(rmAwbRecord.PartShipmentIndicator == PartShipMentIndicatorP || rmAwbRecord.CcaIndicator))
      {
        duplicateAwbRecordCount = RMAwbRepository.GetRMAwbDuplicateCount(rejectionMemoRecord.RejectionStage,
                                                                         rmAwbRecord.AwbIssueingAirline,
                                                                         rmAwbRecord.CarriageFromId,
                                                                         rmAwbRecord.CarriageToId,
                                                                         rmAwbRecord.AwbSerialNumber,
                                                                         rmAwbRecord.AwbDate, invoice.BillingMemberId,
                                                                         invoice.BilledMemberId, billingMonthToCompare,
                                                                         billingYearToCompare,
                                                                         rmAwbRecord.AwbBillingCode);
      }

      if (duplicateAwbRecordCount > 0)
      {
        duplicateErrorMessage = string.Format(Messages.RejectionMemoCouponDuplicateMessage, duplicateAwbRecordCount);
      }

      return duplicateErrorMessage;
    }

    /// <summary>
    /// Determines if RM AWB VAT amount is valid. (Equal to sum of calculated amount of Awb VAT and Other charge VAT records).
    /// </summary>
    /// <param name="rmAwbRecord"></param>
    /// <param name="rejectionMemoRecord"></param>
    private static void IsValidVatDifference(RMAwb rmAwbRecord, CargoRejectionMemo rejectionMemoRecord)
    {
      var vatCalculatedAmountSum = ConvertUtil.Round(rmAwbRecord.AwbVat.Sum(vat => vat.VatCalculatedAmount), Constants.CgoDecimalPlaces);
      double? otherChargeVatBreakDown = rmAwbRecord.OtherCharge.Sum(otherCharge => otherCharge.OtherChargeVatCalculatedAmount);

      double otherChargeVatCalculatedAmountSum = ConvertUtil.Round(otherChargeVatBreakDown.Value, Constants.CgoDecimalPlaces);
      vatCalculatedAmountSum += otherChargeVatCalculatedAmountSum;

      double billedVatAmount = rmAwbRecord.BilledVatAmount.HasValue ? rmAwbRecord.BilledVatAmount.Value : 0;
      double acceptedVatAmount = rmAwbRecord.AcceptedVatAmount.HasValue ? rmAwbRecord.AcceptedVatAmount.Value : 0;

      double difference = rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageTwo ? ConvertUtil.Round(acceptedVatAmount - billedVatAmount, Constants.CgoDecimalPlaces)
                            : ConvertUtil.Round(billedVatAmount - acceptedVatAmount, Constants.CgoDecimalPlaces);

      if (vatCalculatedAmountSum != difference)
      {
        throw new ISBusinessException(SamplingErrorCodes.InvalidVatDifferenceAmount);
      }
    }

    /// <summary>
    /// Validate Rejection memo record.
    /// </summary>
    /// <param name="rejectionMemoRecord">Rejection memo record to be validated.</param>
    /// <param name="rejectionMemoRecordInDb">The rejection memo record in db.</param>
    /// <returns></returns>
    private string ValidateRejectionMemo(CargoRejectionMemo rejectionMemoRecord, CargoRejectionMemo rejectionMemoRecordInDb)
    {
      // SCP225675: //Urgent// About the incoming XML file for SEP P4
      // Below validation of Rjection Stage was written in RMCreate,  RMCreateAndAddNew, RMEdit, RMEditAndAddNew methods of Cargo InoviceController.cs
      // for the SCP141404: IS-IDEC File error - Cargo
      // Now it is written here with adding condition (> 3).
      if (rejectionMemoRecord.RejectionStage < 1 || rejectionMemoRecord.RejectionStage > 3)
      {
        Logger.ErrorFormat("RejectionStage is: {0}", rejectionMemoRecord.RejectionStage);
        throw new ISBusinessException(CargoErrorCodes.InvalidRejectionStage);
      }

      var isUpdateOperation = false;
      if (rejectionMemoRecordInDb != null)
      {
        isUpdateOperation = true;
      }

    //SCP85837: PAX CGO Sequence No
      int invalidBatchSequenceNumber = CargoInvoiceRepository.IsValidBatchSequenceNo(rejectionMemoRecord.InvoiceId, rejectionMemoRecord.RecordSequenceWithinBatch, rejectionMemoRecord.BatchSequenceNumber,rejectionMemoRecord.BillingCode, rejectionMemoRecord.Id);
      if (invalidBatchSequenceNumber != 0)
      {
          // If value == 1, Batch number is repeated , else if value == 2, Batch and Sequence number combination is invalid  
          if (invalidBatchSequenceNumber == 1)
              throw new ISBusinessException(CargoErrorCodes.InvalidBatchNo);
          else
              throw new ISBusinessException(CargoErrorCodes.InvalidBatchSequenceNo);
      }
        
      //SCP ID :122022 - validate sequence and batch number
      if (rejectionMemoRecord.RecordSequenceWithinBatch <= 0 || rejectionMemoRecord.BatchSequenceNumber <= 0)
      {
          throw new ISBusinessException(CargoErrorCodes.BatchRecordSequenceNoReq);
      }

      double vatBreakdownTotal;
      // Check whether operation is EditRejectionMemo and CouponBreakdownRecord exists, if yes retrieve TotalVatAmountDifference from Coupon level else retrieve from VatAmount from Memo level. 
      if (isUpdateOperation && rejectionMemoRecordInDb.CouponBreakdownRecord.Count > 0)
      {
        vatBreakdownTotal = rejectionMemoRecordInDb.TotalVatAmountDifference.HasValue ? rejectionMemoRecordInDb.TotalVatAmountDifference.Value : 0;
      }
      else
      {
        vatBreakdownTotal = rejectionMemoRecord.RejectionMemoVat.Aggregate(0.0, (current, vat) => current + Convert.ToDouble(vat.VatCalculatedAmount));
      }

      vatBreakdownTotal = ConvertUtil.Round(vatBreakdownTotal, Constants.CgoDecimalPlaces);

      // Check Coupon Vat Breakdown Total Amount to match Coupon Vat Amount.
      // If Not, then throw exception. 
      if (!(!rejectionMemoRecord.TotalVatAmountDifference.HasValue && vatBreakdownTotal == 0))
      {
        if (!rejectionMemoRecord.TotalVatAmountDifference.Equals(Convert.ToDouble(vatBreakdownTotal)))
        {
          throw new ISBusinessException(CargoErrorCodes.VatTotalAmountMismatch);
        }
      }

      // Get invoice for rejection memo record.
      var rejectionMemoInvoice = CargoInvoiceRepository.Single(id: rejectionMemoRecord.InvoiceId);

      // Check if 'Your invoice biling period' is not greather than equal to rejecting invoice's billing period.
      if (!((rejectionMemoInvoice.BillingYear > rejectionMemoRecord.YourInvoiceBillingYear) ||
      ((rejectionMemoInvoice.BillingYear == rejectionMemoRecord.YourInvoiceBillingYear) && (rejectionMemoInvoice.BillingMonth > rejectionMemoRecord.YourInvoiceBillingMonth)) ||
      ((rejectionMemoInvoice.BillingYear == rejectionMemoRecord.YourInvoiceBillingYear) && (rejectionMemoInvoice.BillingMonth == rejectionMemoRecord.YourInvoiceBillingMonth) && (rejectionMemoInvoice.BillingPeriod > rejectionMemoRecord.YourInvoiceBillingPeriod))))
        throw new ISBusinessException(CargoErrorCodes.InvalidYourBillingPeriod);

      string errorMessage = string.Empty;
      //code when rejection stage is 1 and BimCM value is none i.e. prime AWB is being rejected.
      if (rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.None && rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageOne)
      {
        var criteria = new CgoRMLinkingCriteria
        {
          ReasonCode = rejectionMemoRecord.ReasonCode,
          InvoiceNumber = rejectionMemoRecord.YourInvoiceNumber,
          BillingYear = rejectionMemoRecord.YourInvoiceBillingYear,
          BillingMonth = rejectionMemoRecord.YourInvoiceBillingMonth,
          BillingPeriod = rejectionMemoRecord.YourInvoiceBillingPeriod,
          RejectionMemoNumber = rejectionMemoRecord.RejectionMemoNumber,
          BMCMIndicatorId = rejectionMemoRecord.BMCMIndicatorId,
          RejectionStage = rejectionMemoRecord.RejectionStage,
          BillingMemberId = rejectionMemoInvoice.BilledMemberId,
          BilledMemberId = rejectionMemoInvoice.BillingMemberId,
          RejectedInvoiceId = rejectionMemoRecord.InvoiceId,
          YourBillingMemoNumber = rejectionMemoRecord.YourBillingMemoNumber,
          IgnoreValidationOnMigrationPeriod = SystemParameters.Instance.General.IgnoreValidationOnMigrationPeriod
        };

        var rejectionMemoResult = GetRejectionMemoLinkingDetails(criteria);

        if (rejectionMemoResult.ErrorMessage == "")
        {
          rejectionMemoRecord.IsLinkingSuccessful = rejectionMemoResult.IsLinkingSuccessful;
          rejectionMemoRecord.IsBreakdownAllowed = rejectionMemoResult.HasBreakdown;
          rejectionMemoRecord.CurrencyConversionFactor = rejectionMemoResult.CurrencyConversionFactor;
        }
        else
        {
            /* CMP #624: ICH Rewrite-New SMI X 
             * Description: Code Fixed regarding bug #9214: CMP 624: Incorrect error on stage 1 Rejection if SMI X invoice is rejected by non X invoice from ISWEB. 
             * Instead of Exception SP is modified to return SMIException to show SMI related error message. */
            if (rejectionMemoResult.ErrorMessage.Contains("BPAXNS_10943"))
                throw new ISBusinessException(ErrorCodes.PaxNSRejctionInvoiceLinkingCheckForSmiX);

            if (rejectionMemoResult.ErrorMessage.Contains("BPAXNS_10945"))
                throw new ISBusinessException(ErrorCodes.PaxNSRejInvBHLinkingCheckForSmiX);

          if (!rejectionMemoResult.ErrorMessage.Contains("Warning"))
            throw new ISBusinessException(CargoErrorCodes.ErrorInvoiceNotFound);

          errorMessage = rejectionMemoResult.ErrorMessage;
        }
      }
      else if (rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.BMNumber && rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageOne)
      {
          // CMP#650
          // In case of stand alone rejection, the reason code is not set from controller
          // so in call of linking setting it explicitly
          var criteria = new CgoRMLinkingCriteria
                             {
                                 ReasonCode = rejectionMemoRecord.ReasonCode,
                                 InvoiceNumber = rejectionMemoRecord.YourInvoiceNumber,
                                 BillingYear = rejectionMemoRecord.YourInvoiceBillingYear,
                                 BillingMonth = rejectionMemoRecord.YourInvoiceBillingMonth,
                                 BillingPeriod = rejectionMemoRecord.YourInvoiceBillingPeriod,
                                 RejectionMemoNumber = rejectionMemoRecord.RejectionMemoNumber,
                                 BMCMIndicatorId = rejectionMemoRecord.BMCMIndicatorId,
                                 RejectionStage = rejectionMemoRecord.RejectionStage,
                                 BillingMemberId = rejectionMemoInvoice.BilledMemberId,
                                 BilledMemberId = rejectionMemoInvoice.BillingMemberId,
                                 RejectedInvoiceId = rejectionMemoRecord.InvoiceId,
                                 YourBillingMemoNumber = rejectionMemoRecord.YourBillingMemoNumber,
                                 IgnoreValidationOnMigrationPeriod =
                                     SystemParameters.Instance.General.IgnoreValidationOnMigrationPeriod
                             };
          var rejectionMemoResult = GetRejectionMemoLinkingDetails(criteria);

          /* Linking Successful and so calling CMP#650 Logic for reason code validations. */
          if (rejectionMemoResult.IsLinkingSuccessful)
          {
              ValidateCargoReasonCode(rejectionMemoRecord, rejectionMemoResult.ReasonCode, true, false);
          }
      }

        //SCP254241: Audit trail related to SF 4390143 Added Server-Side validation which will again check if there exists any gap between the rejection stages
      // of current Rejection invoice and the previous one mentioned in the RM details, system will throw out an exception.
      if (rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageTwo || rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageThree)
      {
        var criteria = new CgoRMLinkingCriteria
        {
          ReasonCode = rejectionMemoRecord.ReasonCode,
          InvoiceNumber = rejectionMemoRecord.YourInvoiceNumber,
          BillingMonth = rejectionMemoRecord.YourInvoiceBillingMonth,
          BillingYear = rejectionMemoRecord.YourInvoiceBillingYear,
          BillingPeriod = rejectionMemoRecord.YourInvoiceBillingPeriod,
          YourBillingMemoNumber = rejectionMemoRecord.YourBillingMemoNumber,
          RejectionMemoNumber = rejectionMemoRecord.YourRejectionNumber,
          BMCMIndicatorId = rejectionMemoRecord.BMCMIndicatorId,
          RejectionStage = rejectionMemoRecord.RejectionStage,
          BillingMemberId = rejectionMemoInvoice.BilledMemberId,
          BilledMemberId = rejectionMemoInvoice.BillingMemberId,
          RejectedInvoiceId = rejectionMemoRecord.InvoiceId
        };

        var rejectionMemoResult = GetRejectionMemoLinkingDetails(criteria);

        // CMP#650
        /* Linking Successful and so calling CMP#650 Logic for reason code validations. */
        if (rejectionMemoResult.IsLinkingSuccessful)
        {
            ValidateCargoReasonCode(rejectionMemoRecord, rejectionMemoResult.ReasonCode, true, false);
        }
        else
        {
            // In case of stand alone rejection, the reason code is not set from controller
            // so in call of linking setting it explicitly
            if(rejectionMemoResult != null && rejectionMemoResult.ReasonCode != null)
            {
                rejectionMemoRecord.YourReasonCode = rejectionMemoResult.ReasonCode;
            }
        }

        if (rejectionMemoResult.ErrorMessage == "")
        {
          rejectionMemoRecord.IsLinkingSuccessful = rejectionMemoResult.IsLinkingSuccessful;
        }
        else
        {
          if (rejectionMemoResult.ErrorMessage.ToUpper().Contains("EXCEPTION : CANNOT REJECT STAGE"))
          {
            throw new ISBusinessException(CargoErrorCodes.InvalidRejectionStage);
          }
          else
          {
            if (!rejectionMemoResult.ErrorMessage.ToUpper().Contains("WARNING"))
              throw new ISBusinessException(CargoErrorCodes.ErrorInvoiceNotFound);

            errorMessage = rejectionMemoResult.ErrorMessage;
          }
        }
      }

      // Check if 'Your Invoice Number' and current invoice number are different.
      if (rejectionMemoInvoice.InvoiceNumber.ToUpper().Equals(rejectionMemoRecord.YourInvoiceNumber.ToUpper()))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidYourInvoiceNumber);
      }

      // Validation for rejection number 
      // Your Rejection Number - 
      // 1. Should be populated if Rejection Stage = "2" or "3"
      if (rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageTwo || rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageThree)
      {
        if (string.IsNullOrEmpty(rejectionMemoRecord.YourRejectionNumber))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidYourRejectionNumber);
        }
      }

      var transactionType = GetTransactionType(rejectionMemoRecord.RejectionStage);


      // Validates whether reason code exist in master table.
      if (!isUpdateOperation || CompareUtil.IsDirty(rejectionMemoRecordInDb.ReasonCode, rejectionMemoRecord.ReasonCode))
      {
        if (!ReferenceManager.IsValidReasonCode(rejectionMemoRecord.ReasonCode, (int)transactionType))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidReasonCode);
        }
      }

      // Check if linked invoice is found if linking is successful.
      //  Below Code commented for the reason SCP ID :20323. doesn't required re-validate the invoice existance from database as it was validation from validate linking functionality
      //if (rejectionMemoRecord.IsLinkingSuccessful.HasValue && rejectionMemoRecord.IsLinkingSuccessful.Value)
      //{
      //  if (rejectionMemoRecord.YourInvoiceBillingPeriod > 0)
      //  {
      //    if (!isUpdateOperation ||
      //        (CompareUtil.IsDirty(rejectionMemoRecordInDb.YourInvoiceNumber, rejectionMemoRecord.YourInvoiceNumber) ||
      //         CompareUtil.IsDirty(rejectionMemoRecordInDb.YourInvoiceBillingMonth, rejectionMemoRecord.YourInvoiceBillingMonth) ||
      //         CompareUtil.IsDirty(rejectionMemoRecordInDb.YourInvoiceBillingPeriod, rejectionMemoRecord.YourInvoiceBillingPeriod) ||
      //         CompareUtil.IsDirty(rejectionMemoRecordInDb.YourInvoiceBillingYear, rejectionMemoRecord.YourInvoiceBillingYear)))
      //    {
      //      // Combination of fields ‘Your Invoice Number’, ‘Your Billing Year’, ‘Your Billing Month’ and ‘Your Billing Period’ 
      //      // passed in rejection memo object does not match with any other invoice in invoice table, throw an exception
      //      var invoiceCount = InvoiceRepository.IsExistingInvoice(rejectionMemoRecord.YourInvoiceNumber.ToUpper(),
      //                                                             rejectionMemoRecord.YourInvoiceBillingMonth,
      //                                                             rejectionMemoRecord.YourInvoiceBillingYear,
      //                                                             rejectionMemoRecord.YourInvoiceBillingPeriod,
      //                                                             rejectionMemoInvoice.BilledMemberId,
      //                                                             rejectionMemoInvoice.BillingMemberId,
      //                                                             (int)InvoiceStatusType.Presented);
      //      if (invoiceCount < 1)
      //      {
      //        throw new ISBusinessException(CargoErrorCodes.LinkedInvoiceNotFound);
      //      }
      //    }
      //  }
      //}

      // Should be a unique number within each Billed Airline in the Billing period.
      if (IsDuplicateRejectionMemoNumber(rejectionMemoRecord, rejectionMemoRecordInDb, isUpdateOperation, rejectionMemoInvoice))
      {
        throw new ISBusinessException(CargoErrorCodes.DuplicateRejectionMemoNumber);
      }

      // Validate Time Limit
      if (IsTransactionOutSideTimeLimit(rejectionMemoRecord, rejectionMemoInvoice, null))
      {
        rejectionMemoRecord.ISValidationFlag += string.IsNullOrEmpty(rejectionMemoRecord.ISValidationFlag) ? TimeLimitFlag : ValidationFlagDelimeter + TimeLimitFlag;
      }

      /* CMP #671: Validation of PAX CGO Stage 2 & 3 Rejection Memo Reason Text */
      /* Check if validation is applicable or not */
      if (rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageTwo || rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageThree)
      {
          /* CMP#671 - Validation Applicable */
          ValidateReasonTextMinLength(cargoRejectionMemoRecord: rejectionMemoRecord);
      }
      //else
      //{
      //    For Logical Completion - CMP#671 - Validtion is not Applicable
      //}  

      return errorMessage;
    }

    /// <summary>
    /// Gets rejection memo AWB attachment details
    /// </summary>
    /// <param name="attachmentId">attachment Id</param>
    /// <returns></returns>
    public RMAwbAttachment GetRejectionMemoAwbAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();

      var attachmentRecord = RMAwbAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);

      return attachmentRecord;
    }

    /// <summary>
    /// Get credit memo attachment details
    /// </summary>
    /// <param name="attachmentId">attachment Id</param>
    /// <returns></returns>
    public CargoCreditMemoAttachment GetCreditMemoAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();

      var attachmentRecord = CargoCreditMemoAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);

      return attachmentRecord;
    }

    /// <summary>
    /// Get credit memo Coupon attachment details
    /// </summary>
    /// <param name="attachmentId">attachment Id</param>
    /// <returns></returns>
    public CMAwbAttachment GetCreditMemoAwbAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();

      var attachmentRecord = CargoCreditMemoAwbAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);

      return attachmentRecord;
    }

    /// <summary>
    /// Add rejection memo AWB attachment record
    /// </summary>
    /// <param name="attach">rejection memo AWB attachment record</param>
    /// <returns></returns>
    public RMAwbAttachment AddRejectionMemoAwbAttachment(RMAwbAttachment attach)
    {
      RMAwbAttachmentRepository.Add(attach);

      UnitOfWork.CommitDefault();
      //SCPID 85039 - IS Web Performance Feedback / Billing History & Correspondence / Other issues
      //attach = RMAwbAttachmentRepository.Single(a => a.Id == attach.Id);
      return attach;
    }


    /// <summary>
    /// Get Rejection Memo AWB List.
    /// </summary>
    /// <param name="memoRecordId">RM AWB Record Id.</param>
    /// <returns></returns>
    public IList<RMAwb> GetRejectionMemoAwbList(string memoRecordId)
    {
      var memoRecordGuid = memoRecordId.ToGuid();
      var rejectionMemoAwbList = RMAwbRepository.Get(rmAwb => rmAwb.RejectionMemoId == memoRecordGuid).OrderBy(rmAwb => rmAwb.BdSerialNumber);

      return rejectionMemoAwbList.ToList();
    }

    /// <summary>
    /// Delete CargoRejectionMemo AWB Record.
    /// </summary>
    /// <param name="awbRecordId">RM AWB Record Id to be deleted.</param>
    /// <param name="rejectionMemoId"></param>
    /// <param name="invoiceId"></param>
    /// <returns></returns>
    public bool DeleteRejectionMemoAwbRecord(string awbRecordId, out Guid rejectionMemoId, out Guid invoiceId)
    {
      var rmAwbRecordId = awbRecordId.ToGuid();
      // LoadStrategy call
      var awbRecord = RMAwbRepository.Single(rmAwbRecordId);
      if (awbRecord == null)
      {
        rejectionMemoId = new Guid();
        invoiceId = new Guid();
        return false;
      }

      rejectionMemoId = awbRecord.RejectionMemoId;
      var rejectionMemo = RejectionMemoRepository.Single(rejectionMemoId: awbRecord.RejectionMemoId);
      invoiceId = awbRecord.RejectionMemoRecord.InvoiceId;
      int lastUpdatedBy = awbRecord.RejectionMemoRecord.LastUpdatedBy;

      // Delete the RM AWB, re-sequence subsequent serial numbers and update invoice total.
      CargoInvoiceRepository.DeleteRejectionMemoAwb(rmAwbRecordId);

      return true;
    }

    /// <summary>
    /// Update Rejection Memo AWB Details.
    /// </summary>
    /// <param name="rmAwb">Rejection memo AWB to be updated.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <param name="duplicateErrorMessage">The duplicate error message.</param>
    /// <returns>Updated rejection memo AWB record</returns>
    public RMAwb UpdateRejectionMemoAwbDetails(RMAwb rmAwb, string invoiceId, out string duplicateErrorMessage)
    {
        var logRefId = Guid.NewGuid();
        var log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                                    BillingCategorys.Cargo.ToString(), "Stage 1:UpdateRejectionMemoAwbDetails Start ", 0, logRefId.ToString());
        ReferenceManager.LogDebugData(log);
      //LoadStrategy call
      var rmAwbRecordWithDetail = RMAwbRepository.Single(rmAwb.Id);
      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                                  BillingCategorys.Cargo.ToString(), "Stage 2:RMAwbRepository.Single completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      //SCP85039:Changed earlier call to procedure(single) to Get() method.
      //var rejectionMemoRecord = RejectionMemoRepository.Single(rmAwb.RejectionMemoId);
      var rejectionMemos = RejectionMemoRepository.Get(rejMemo => rejMemo.Id == rmAwb.RejectionMemoId).ToList();
      var rejectionMemoRecord = rejectionMemos.FirstOrDefault();

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                              BillingCategorys.Cargo.ToString(), "Stage 3:RejectionMemoRepository.Get completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      rmAwb.ISValidationFlag = rmAwbRecordWithDetail.ISValidationFlag;
      // Validates rejection memo AWB
      duplicateErrorMessage = ValidateRejectionMemoAwb(rmAwb, rmAwbRecordWithDetail, rejectionMemoRecord, invoiceId);

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                          BillingCategorys.Cargo.ToString(), "Stage 4:ValidateRejectionMemoAwb completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      if (!string.IsNullOrEmpty(duplicateErrorMessage))
      {
        rmAwb.ISValidationFlag = DuplicateValidationFlag;
      }

      var updatedRmAwb = RMAwbRepository.Update(rmAwb);
      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                       BillingCategorys.Cargo.ToString(), "Stage 5:RMAwbRepository.Update completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      // Changes to update tax breakdown records along with RejectionMemoCouponBreakdownRecord.
      var listToDelete = rmAwbRecordWithDetail.OtherCharge.Where(awbOtherCharge => rmAwb.OtherCharge.Count(otherCharge => otherCharge.Id == awbOtherCharge.Id) == 0).ToList();

      foreach (var otherCharge in rmAwb.OtherCharge.Where(otherCharge => otherCharge.Id.CompareTo(new Guid()) == 0))
      {
        RMAwbOtherChargeRepository.Add(otherCharge);
      }

      foreach (var otherCharge in listToDelete)
      {
        RMAwbOtherChargeRepository.Delete(otherCharge);
      }

      // To store records to be deleted in another collection[Deletion of record in loop throw error].
      var listToDeleteVat = rmAwbRecordWithDetail.AwbVat.Where(vat => rmAwb.AwbVat.Count(vatRecord => vatRecord.Id == vat.Id) == 0).ToList();

      foreach (var vat in rmAwb.AwbVat.Where(vat => vat.Id.CompareTo(new Guid()) == 0))
      {
        RMAwbVatRepository.Add(vat);
      }

      foreach (var vat in listToDeleteVat)
      {
        RMAwbVatRepository.Delete(vat);
      }

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                     BillingCategorys.Cargo.ToString(), "Stage 6:Before ProrateLadder", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      // Update prorate ladder.
      var listToDeleteProrateLadder = rmAwbRecordWithDetail.ProrateLadder.Where(prorateLadderDetailRecord => rmAwb.ProrateLadder.Count(prorateLadderDetail => prorateLadderDetail.Id == prorateLadderDetailRecord.Id) == 0).ToList();

      foreach (var prorateLadderDetail in rmAwb.ProrateLadder.Where(prorateLadderDetail => prorateLadderDetail.Id.CompareTo(new Guid()) == 0))
      {
        RMAwbProrateLadderDetailRepository.Add(prorateLadderDetail);
      }

      foreach (var prorateLadderDetail in listToDeleteProrateLadder)
      {
        RMAwbProrateLadderDetailRepository.Delete(prorateLadderDetail);
      }
      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                  BillingCategorys.Cargo.ToString(), "Stage 7:ProrateLadder updated", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      // Changes to update attachment breakdown records.
      var listToDeleteAttachment = rmAwbRecordWithDetail.Attachments.Where(attachment => rmAwb.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0).ToList();

      var attachmentIdList = (from attachment in rmAwb.Attachments
                              where rmAwbRecordWithDetail.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0
                              select attachment.Id).ToList();

      var rmAwbAttachmentInDb = RMAwbAttachmentRepository.Get(couponAttachment => attachmentIdList.Contains(couponAttachment.Id));
      foreach (var recordAttachment in rmAwbAttachmentInDb)
      {
        if (IsDuplicateRejectionMemoAwbAttachmentFileName(recordAttachment.OriginalFileName, rmAwb.Id))
        {
          throw new ISBusinessException(CargoErrorCodes.DuplicateFileName);
        }

        recordAttachment.ParentId = rmAwb.Id;
        RMAwbAttachmentRepository.Update(recordAttachment);
      }
      foreach (var rmCouponRecordAttachment in listToDeleteAttachment)
      {
        RMAwbAttachmentRepository.Delete(rmCouponRecordAttachment);
      }
      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
                BillingCategorys.Cargo.ToString(), "Stage 8:Attachments  updated", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      UnitOfWork.CommitDefault();

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
              BillingCategorys.Cargo.ToString(), "Stage 9:Commit completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      // Update rejection memo invoice total 
      CGOInvoiceRepository.UpdateCargoRMInvoiceTotal(rejectionMemoRecord.InvoiceId, Convert.ToInt32(BillingCode.RejectionMemo), rejectionMemoRecord.Id, rejectionMemoRecord.LastUpdatedBy);
      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateRejectionMemoAwbDetails", this.ToString(),
            BillingCategorys.Cargo.ToString(), "Stage 1:UpdateRejectionMemoAwbDetails completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      // Update expiry date of RM for purging.
      //UpdateRejectionMemoExpiryDate(rejectionMemoRecord);

      return updatedRmAwb;
    }

    /// <summary>
    /// Gets the RM AWB attachments.
    /// </summary>
    /// <param name="attachmentIds">The attachment ids.</param>
    public List<RMAwbAttachment> GetRejectionMemoAwbAttachments(List<Guid> attachmentIds)
    {
      return RMAwbAttachmentRepository.Get(attachment => attachmentIds.Contains(attachment.Id)).ToList();
    }

    /// <summary>
    /// Check for duplicate file name of rejection memo AWB attachment
    /// </summary>
    /// <param name="fileName">file name</param>
    /// <param name="rejectionMemoAwbId">rejection Memo AWB Id</param>
    /// <returns></returns>
    private bool IsDuplicateRejectionMemoAwbAttachmentFileName(string fileName, Guid rejectionMemoAwbId)
    {
      return RMAwbAttachmentRepository.GetCount(attachment => attachment.ParentId == rejectionMemoAwbId && attachment.OriginalFileName.ToUpper() == fileName.ToUpper()) > 0;
    }

    /// <summary>
    /// Get Rejection Memo AWB Details.
    /// </summary>
    /// <param name="rmAwbId">RM AWB Id to be fetched.</param>
    /// <returns></returns>
    public RMAwb GetRejectionMemoAwbDetails(string rmAwbId)
    {
      var rmAwbGuid = rmAwbId.ToGuid();
      //LoadStrategy call
      var rmAwbRecord = RMAwbRepository.Single(rmAwbGuid);

      return rmAwbRecord;
    }

    /// <summary>
    /// Determines whether transaction is out side time limit for specified invoice].
    /// </summary>
    /// <param name="rejectionMemo">The rejection memo.</param>
    /// <param name="invoice">The invoice.</param>
    /// <param name="billingPeriod"></param>
    /// <returns>
    /// true if transaction in not out side time limit for the specified invoice; otherwise, false.
    /// </returns>
    private bool IsTransactionOutSideTimeLimit(CargoRejectionMemo rejectionMemo, CargoInvoice invoice, BillingPeriod? billingPeriod)
    {
      TransactionType transactionType = 0;

      switch (rejectionMemo.RejectionStage)
      {
        case (int)RejectionStage.StageOne:
          transactionType = TransactionType.CargoRejectionMemoStage1;
          break;
        case (int)RejectionStage.StageTwo:
          transactionType = TransactionType.CargoRejectionMemoStage2;
          break;
        case (int)RejectionStage.StageThree:
          transactionType = TransactionType.CargoRejectionMemoStage3;
          break;
      }

      
      DateTime billingDate;
      DateTime.TryParse(
        string.Format("{0}/{1}/{2}", rejectionMemo.YourInvoiceBillingYear, rejectionMemo.YourInvoiceBillingMonth,
                      rejectionMemo.YourInvoiceBillingPeriod), out billingDate);

      // Validate Time Limit
      //CMP#624 : ICH Rewrite-New SMI X.
      //Refer FRS Section 2.14 Change #3: Update of TL flag in ‘IS Validation Flag’ for PAX/CGO RMs
      /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like ICH */
      return (!ReferenceManager.IsSmiLikeBilateral(invoice.SettlementMethodId, false))
               ? !ReferenceManager.IsTransactionInTimeLimitMethodA(transactionType, invoice.SettlementMethodId, rejectionMemo, invoice, billingPeriod)
               : !ReferenceManager.IsTransactionInTimeLimitMethodA2(transactionType, Convert.ToInt32(SMI.Bilateral), new CargoInvoice
               {
                 BillingYear = invoice.BillingYear,
                 BillingMonth = invoice.BillingMonth,
                 SettlementMethodId = invoice.SettlementMethodId,
                 ValidationDate = billingDate
               });
    }

    /// <summary>
    /// Check Submit Invoice Permission of user.
    /// ID : 296572 - Submission and Assign permission to user doesn't match !
    /// </summary>
    /// <param name="invIdList">Invoice id list </param>
    /// <param name="userId">user id</param>
    /// <returns></returns>
    public List<string> ChkInvSubmitPermission(List<string> invIdList, int userId)
    {
      var authorizationManager = Ioc.Resolve<IAuthorizationManager>();
      var hasInvSubmitPermit = authorizationManager.IsAuthorized(userId,
                                                                 Security.Permissions.Cargo.Receivables.CreateInvoice.
                                                                   Submit);
      var hasCreditNoteSubmitPermit = authorizationManager.IsAuthorized(userId,
                                                                        Security.Permissions.Cargo.Receivables.CreateCreditNote.
                                                                    Submit);

      var invTobeSubmit = new List<string>();
      foreach (var invId in invIdList)
      {
        var invoice = GetInvoiceDetails(invId);

        if (invoice.InvoiceType == InvoiceType.Invoice && hasInvSubmitPermit)
        {
          invTobeSubmit.Add(invoice.Id.ToString());
        }
        if (invoice.InvoiceType == InvoiceType.CreditNote && hasCreditNoteSubmitPermit)
        {
          invTobeSubmit.Add(invoice.Id.ToString());
        }
      }

      return invTobeSubmit;
    }


    /// <summary>
    /// Submits invoices
    /// </summary>
    /// <param name="invoiceIdList">List of invoice ids to be submitted</param>
    /// <returns></returns>
    public IList<CargoInvoice> SubmitInvoices(List<string> invoiceIdList)
    {
      var invoiceList = invoiceIdList.Select(SubmitInvoice).ToList();

      return invoiceList.Where(invoice => invoice != null && invoice.InvoiceStatus == InvoiceStatusType.ReadyForBilling).ToList();
    }
    
    /// <summary>
    /// Submits the invoice.
    /// </summary>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    public CargoInvoice SubmitInvoice(string invoiceId)
    {
      var webValidationErrors = new List<WebValidationError>();
      var invoice = CGOInvoiceRepository.Single(id: new Guid(invoiceId));
     
      // User Id of logged in member
      var userId = invoice.LastUpdatedBy;

      if (invoice.InvoiceStatus != InvoiceStatusType.ReadyForSubmission)
      {
        return invoice;
      }

      // Re-fetch the billing and billed member - since we are getting a stale state (workaround)!
      var billingMember = MemberManager.GetMember(invoice.BillingMemberId);
      var billedMember = MemberManager.GetMember(invoice.BilledMemberId);

      // Get Final Parent Details for SMI, Currency, Clearing House abd Suspended Flag validations
      var billingFinalParent = MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BillingMemberId));
      var billedFinalParent = MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BilledMemberId));

      // Get ValidationErrors for invoice from DB.
      var validationErrorsInDb = ValidationErrorManager.GetValidationErrors(invoiceId);

      // IS Membership validations.
      if (!ValidateBilledMemberStatus(invoice.BilledMember))
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoice.Id, CargoErrorCodes.InvalidBilledIsMembershipStatus));
      }

      if (!ValidateBillingMembershipStatus(billingMember))
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoice.Id, CargoErrorCodes.InvalidBillingIsMembershipStatus));
      }

      // Late submissions (where the period is the current open period less 1) will be marked as validation error (Error Non-Correctable); 
      // even if the late submission window for the past period is open in the IS Calendar.
      if (webValidationErrors.Count <= 0 && IsLateSubmission(invoice))
      {
        invoice.ValidationStatus = InvoiceValidationStatus.ErrorPeriod;
        invoice.ValidationStatusId = (int)InvoiceValidationStatus.ErrorPeriod;
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoice.Id, CargoErrorCodes.InvoiceLateSubmitted));
      }
      else
      {
        // Validate correctness of billing period.
        if (!ValidateBillingPeriod(invoice))
        {
          webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoice.Id, CargoErrorCodes.InvalidBillingPeriod));
        }
      }

      try
      {
        // Validation for Blocked Airline
        ValidationForBlockedAirline(invoice);
      }
      catch (ISBusinessException exception)
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoice.Id, exception.ErrorCode));
      }

      //SCP219674 : InvalidAmountToBeSettled Validation**************************************
      var invoiceManager = Ioc.Resolve<ICargoInvoiceManager>(typeof(ICargoInvoiceManager));
      var bmList = invoiceManager.GetBillingMemoList(invoice.Id.ToString()).Where(bm => bm.ReasonCode == "6A" || bm.ReasonCode == "6B").ToList();
      foreach (var billingMemo in bmList)
      {
        try
        {
          ValidateCorrespondenceReference(billingMemo, false, invoice);
        }
        catch (ISBusinessException exception)
        {
          var error = string.Format(" Billing Memo Number: {0} , Batch Sequence Number: {1}", billingMemo.BillingMemoNumber, billingMemo.BatchSequenceNumber);
          webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(), exception.ErrorCode, error));
        }
      }      
      //***********************************************************

      // Update invoice status in case of error.
      if (webValidationErrors.Count > 0)
      {
        invoice.InvoiceStatus = InvoiceStatusType.ValidationError;
        invoice.ValidationErrors.AddRange(webValidationErrors);

        if (invoice.ValidationStatus != InvoiceValidationStatus.ErrorPeriod)
          invoice.ValidationStatus = InvoiceValidationStatus.Failed;
      }
      else
      {
        // If Billed or Billing member is suspended update Invoice suspended flag to true. 
        if (ValidateSuspendedFlag(invoice, billingFinalParent, billedFinalParent))
        {
          invoice.SuspendedInvoiceFlag = true;
        }
        // Every validation is successful. Update invoice status as Ready for billing and invoice date as current date.
        invoice.InvoiceDate = DateTime.UtcNow;
        invoice.InvoiceStatus = InvoiceStatusType.ReadyForBilling;
      }

      // Update validation errors in db.
      ValidationErrorManager.UpdateValidationErrors(invoice.Id, invoice.ValidationErrors, validationErrorsInDb);

      // Update clearing house of invoice
      var clearingHouse = ReferenceManager.GetClearingHouseForInvoice(invoice, billingFinalParent, billedFinalParent);
      invoice.ClearingHouse = clearingHouse;

      // Set Sponsored By 
      var ichConfiguration = MemberManager.GetIchConfig(billingMember.Id);
      if (ichConfiguration != null && ichConfiguration.SponsoredById.HasValue)
      {
        invoice.SponsoredById = ichConfiguration.SponsoredById;
      }

      // Adds member location information.
      UpdateMemberLocationInformation(invoice);

      // Update invoice to database.
      var updatedInvoice = CGOInvoiceRepository.Update(invoice);

      
      // Update DS Required By as per billing member location country and DS Required flag in member profile.
       SetDigitalSignatureInfo(invoice, billingMember, billedMember);

      // Call UpdateSourceCodeTotalVat() method which will update Invoice SourceCode VAT total
      CGOInvoiceRepository.UpdateBillingCodeTotalVat(invoice.Id);

      if (bmList.Count > 0 && invoice.InvoiceStatus == InvoiceStatusType.ReadyForBilling)
      {
          foreach (var billingMemo in bmList)
          {
              if (billingMemo.CorrespondenceReferenceNumber != 0 && (billingMemo.ReasonCode == "6A" || billingMemo.ReasonCode == "6B"))
              {
                  // Get all correspondence having given correspondence no.
                  var correspondence = CargoCorrespondenceRepository.GetCorr(corr => corr.CorrespondenceNumber == billingMemo.CorrespondenceReferenceNumber);

                  // SCP61363: Correspondence 0980000091 Closed due to Expiry
                  // Update status of entire correspondence trail to "Closed - Billed" if corresp status and sub status is other than "Open - Saved/ReadyForSubmit".
                  // Also delete correspondence if corresp status and sub status is equal to "Open - Saved/ReadyForSubmit".
                  foreach (var corr in correspondence)
                  {
                      if (corr.CorrespondenceStatus == CorrespondenceStatus.Open && (corr.CorrespondenceSubStatus == CorrespondenceSubStatus.Saved || corr.CorrespondenceSubStatus == CorrespondenceSubStatus.ReadyForSubmit))
                      {
                          Logger.InfoFormat("Deleting Correspondence in 'Open - Saved/ReadyForSubmit' state. Correspondence No: {0}, Stage: {1}, Status: {2}, Sub-Status: {3}", corr.CorrespondenceNumber, corr.CorrespondenceStage, corr.CorrespondenceStatusId, corr.CorrespondenceSubStatusId);
                          CargoCorrespondenceRepository.Delete(corr);
                      }
                      else
                      {
                          corr.CorrespondenceSubStatus = CorrespondenceSubStatus.Billed;
                          corr.CorrespondenceStatus = CorrespondenceStatus.Closed;
                      }
                  }// End foreach
                  ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
                  //// For BM created over correspondence.
                  //// Update expiry period using only lead period for billing memo and all transactions prior to it for purging.
                  //DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodForClosedCorrespondence(invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);
                  //CGOInvoiceRepository.UpdateExpiryDatePeriod(billingMemo.Id, (int)TransactionType.CargoBillingMemoDueToAuthorityToBill, expiryPeriod);
              }// End if
              //else
              //{
              //  // For plain Billing memo.
              //  // Get expiry period for purging.
              //  DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

              //  // Update it in database.
              //  CGOInvoiceRepository.UpdateExpiryDatePeriod(billingMemo.Id, (int)TransactionType.CargoBillingMemo, expiryPeriod);
              //}// End else
          }//End foreach
      }

      UnitOfWork.CommitDefault();

      if (updatedInvoice.InvoiceStatus == InvoiceStatusType.ReadyForBilling)
      {
        Logger.InfoFormat("Update invoice '{0}' info after Invoice status changed as Ready for billing.", ConvertUtil.ConvertGuidToString(updatedInvoice.Id));

          try
          {
              CGOInvoiceRepository.UpdateInvoiceOnReadyForBilling(updatedInvoice.Id, updatedInvoice.BillingCategoryId, updatedInvoice.BillingMemberId, updatedInvoice.BilledMemberId, updatedInvoice.BillingCode);
              Logger.InfoFormat("Updated invoice '{0}' details successfully after Invoice status changed to Ready for billing by User '{1}'.", ConvertUtil.ConvertGuidToString(updatedInvoice.Id), userId);
          }
          catch(Exception ex)
          {
              Logger.ErrorFormat("Exception occurred while updating Invoice '{0}' in PROC_UPDINV_ON_READYFORBILLING by User '{1}' Exception: '{2}'",ConvertUtil.ConvertGuidToString(updatedInvoice.Id),userId, ex);
          }

          //try
          //{
          //    CGOInvoiceRepository.UpdateInvoiceAndSetLaParameters(new Guid(invoiceId));
          //    Logger.InfoFormat("Updated invoice '{0}' details for LA and successfully set LA Parameters by User '{1}'.", ConvertUtil.ConvertGuidToString(updatedInvoice.Id), userId);
          //}
          //catch (Exception ex)
          //{
          //    Logger.ErrorFormat("Exception occurred while updating Invoice '{0}' in PROC_SET_INV_ARCPARAMETERS by User '{1}' Exception: '{2}'", ConvertUtil.ConvertGuidToString(updatedInvoice.Id), userId, ex);
          //}

        
        ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
        //// Update expiry period for purging.
        //UpdateExpiryDatePeriod(updatedInvoice);
      }


      return updatedInvoice;
    }


    ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
    ///// <summary>
    ///// Updates the expiry date period.
    ///// </summary>
    ///// <param name="invoice">The invoice.</param>
    //private void UpdateExpiryDatePeriod(CargoInvoice invoice)
    //{
    //  // Update expiry date period.
    //  if (invoice.InvoiceType == InvoiceType.Invoice)
    //  {
    //      foreach (var awbRecord in CargoAwbRecordRepository.Get(awb => awb.InvoiceId == invoice.Id))
    //      {
    //        // Get expiry period of prime AWB.
    //        DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

    //        // Update it in database.
    //        // Transaction type is just required to update in the respective table. Since same table is used for both prepaid and charge collect, sending transaction type as Prepaid.
    //        CargoInvoiceRepository.UpdateExpiryDatePeriod(awbRecord.Id, (int)TransactionType.CargoPrimePrepaid, expiryPeriod);
    //      }
        
    //      foreach (var rejectionMemo in RejectionMemoRepository.Get(rejectionMemo => rejectionMemo.InvoiceId == invoice.Id))
    //      {
    //        var expiryPeriod = GetRejectionMemoExpiryDate(rejectionMemo.RejectionStage, invoice, null);

    //        // Update expiry period in database. Sending RM1 as transaction type as same table is used for all rejection stages.
    //        CargoInvoiceRepository.UpdateExpiryDatePeriod(rejectionMemo.Id, (int)TransactionType.CargoRejectionMemoStage1, expiryPeriod);
    //      }
    //  }
    //  else if (invoice.InvoiceType == InvoiceType.CreditNote)
    //  {
    //    foreach (var creditMemo in CreditMemoRepository.Get(cm => cm.InvoiceId == invoice.Id))
    //    {
    //      // Get expiry period.
    //      DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

    //      // Update it in database.
    //      CargoInvoiceRepository.UpdateExpiryDatePeriod(creditMemo.Id, (int)TransactionType.CargoCreditMemo, expiryPeriod);
    //    }
    //  }
    //}

    /// <summary>
    /// Validates the acceptable differences.
    /// </summary>
    /// <param name="reasonCode">The reason code.</param>
    /// <param name="transactionType">Type of the transaction.</param>
    /// <param name="weightChargeDifference">Gross amount difference.</param>
    /// <param name="valuationChargeDifference">Tax amount difference.</param>
    /// <param name="vatAmountDifference">VAT amount difference.</param>
    /// <param name="iscAmountDifference">ISC amount difference.</param>
    /// <param name="otherChargeDifference">Other charge amount difference.</param>
    /// <param name="validReasonCodes">Reason codes.</param>
    /// <param name="validRmReasonAcceptableDiff"></param>
    /// <returns></returns>
    public string ValidateAcceptableDifferences(string reasonCode, TransactionType transactionType, double? weightChargeDifference, double? valuationChargeDifference,
                                              double? vatAmountDifference, double iscAmountDifference, double otherChargeDifference,
                                              IList<ReasonCode> validReasonCodes = null, IList<CgoRMReasonAcceptableDiff> validRmReasonAcceptableDiff = null)
    {
      ReasonCode reasonCodeObj;
      if (validReasonCodes != null)
      {
        reasonCodeObj =
          validReasonCodes.FirstOrDefault(
            rCode =>
            rCode.Code.Equals(reasonCode, StringComparison.OrdinalIgnoreCase) && rCode.TransactionTypeId == (int)transactionType &&
            rCode.IsActive);
      }
      else
      {
        reasonCodeObj =
          ReasonCodeRepository.Single(
            rCode =>
            rCode.Code.Equals(reasonCode, StringComparison.OrdinalIgnoreCase) && rCode.TransactionTypeId == (int)transactionType &&
            rCode.IsActive);
      }

      CgoRMReasonAcceptableDiff reasonCodeAmountDifference = null;
      if (reasonCodeObj != null)
      {
        int reasonCodeId = reasonCodeObj.Id;

        reasonCodeAmountDifference = validRmReasonAcceptableDiff != null
                     ? validRmReasonAcceptableDiff.FirstOrDefault(acceptableDiff => acceptableDiff.ReasonCodeId == reasonCodeId && acceptableDiff.IsActive)
                  : RmReasonAcceptableDifferenceRepository.First(acceptableDiff => acceptableDiff.ReasonCodeId == reasonCodeId && acceptableDiff.IsActive);
      }

      if (reasonCodeAmountDifference == null) return string.Empty;
      var differenceFields = new StringBuilder(string.Empty);

      const string comma = ",";
      if (!reasonCodeAmountDifference.WeightChargesAmount && weightChargeDifference.HasValue && weightChargeDifference != 0)
      {
        differenceFields.Append(" Weight Charge").Append(comma);
      }
      if (!reasonCodeAmountDifference.ValuationChargesAmount && valuationChargeDifference.HasValue && valuationChargeDifference != 0)
      {
        differenceFields.Append(" Valuation Charge ").Append(comma);
      }
      if (!reasonCodeAmountDifference.OcAmount && otherChargeDifference != 0)
      {
        differenceFields.Append(" Other Charge ").Append(comma);
      }

      if (!reasonCodeAmountDifference.VatAmount && vatAmountDifference.HasValue && vatAmountDifference != 0)
      {
        differenceFields.Append(" VAT ").Append(comma);
      }
      if (!reasonCodeAmountDifference.IscAmount && iscAmountDifference != 0)
      {
        differenceFields.Append(" ISC ").Append(comma);
      }

      return differenceFields.Length > 0 ? differenceFields.Remove(differenceFields.Length - 1, 1).ToString() : differenceFields.ToString();
    }

    /// <summary>
    /// Gets the type of the transaction.
    /// </summary>
    /// <param name="rejectionStage">The rejection stage.</param>
    /// <returns></returns>
    /// <remarks>Returns transaction type as Rejection Memo 1 if invalid rejection stage passed.</remarks> 
    private static TransactionType GetTransactionType(int rejectionStage)
    {
      TransactionType transactionType;
      switch (rejectionStage)
      {
        case 1:
          transactionType = TransactionType.CargoRejectionMemoStage1;
          break;
        case 2:
          transactionType = TransactionType.CargoRejectionMemoStage2;
          break;
        case 3:
          transactionType = TransactionType.CargoRejectionMemoStage3;
          break;
        default:
          transactionType = TransactionType.CargoRejectionMemoStage1;
          break;
      }

      return transactionType;
    }


    /// <summary>
    /// Determines whether duplicate rejection memo for the specified rejection memo record].
    /// </summary>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <param name="rejectionMemoRecordIndb">The rejection memo record indb.</param>
    /// <param name="isUpdateOperation">if set to <c>true</c> [is update operation].</param>
    /// <param name="invoice">The invoice.</param>
    /// <returns>
    /// 	<c>true</c> if [is duplicate rejection memo] [the specified rejection memo record]; otherwise, <c>false</c>.
    /// </returns>
    private bool IsDuplicateRejectionMemoNumber(CargoRejectionMemo rejectionMemoRecord, CargoRejectionMemo rejectionMemoRecordIndb, bool isUpdateOperation, CargoInvoice invoice)
    {
      var isExistingRejectionNumber = false;

      if (!isUpdateOperation || (CompareUtil.IsDirty(rejectionMemoRecord.RejectionMemoNumber, rejectionMemoRecordIndb.RejectionMemoNumber)))
      {
        isExistingRejectionNumber = RejectionMemoRepository.GetRejectionMemoDuplicateCount(invoice.BilledMemberId,
                                                                 invoice.BillingMemberId,
                                                                 rejectionMemoRecord.RejectionMemoNumber,
                                                                 invoice.BillingYear,
                                                                 invoice.BillingMonth,
                                                                 invoice.BillingPeriod) > 0;
      }

      return isExistingRejectionNumber;
    }

    /// <summary>
    /// Get linking details for rejection memo when multiple records are found for rejected entity then as per user selection fetch data for selected memo
    /// </summary>
    /// <param name="criteria"></param>
    /// <returns></returns>
    public CgoRMLinkingResultDetails GetLinkedMemoAmountDetails(CgoRMLinkingCriteria criteria)
    {
      var result = RejectionMemoRepository.GetLinkedMemoAmountDetails(criteria);
      if (result.MemoAmount != null)
      {
        SetRMLinkedMemoAmountDifference(result.MemoAmount, criteria.RejectionStage);
      }

      return result;
    }

    /// <summary>
    /// Sets the RM linked memo amount difference.
    /// </summary>
    /// <param name="memoAmount">The memo amount.</param>
    /// <param name="rejectionStage">The rejection stage.</param>
    private static void SetRMLinkedMemoAmountDifference(CgoRMLinkingAmount memoAmount, int rejectionStage)
    {
      if (memoAmount != null)
      {
        memoAmount.AcceptedTotalWeightCharge = memoAmount.BilledTotalWeightCharge;
        memoAmount.AcceptedTotalValuationCharge = memoAmount.BilledTotalValuationCharge;
        memoAmount.AcceptedTotalIscAmount = memoAmount.AllowedTotalIscAmount;
        memoAmount.AcceptedTotalOtherChargeAmount = memoAmount.BilledTotalOtherChargeAmount;
        memoAmount.AcceptedTotalVatAmount = memoAmount.BilledTotalVatAmount;

        if (rejectionStage == (int)RejectionStage.StageOne || rejectionStage == (int)RejectionStage.StageThree)
        {
          memoAmount.TotalWeightChargeDifference = memoAmount.BilledTotalWeightCharge - memoAmount.AcceptedTotalWeightCharge;
          memoAmount.TotalValuationChargeDifference = memoAmount.BilledTotalValuationCharge - memoAmount.AcceptedTotalValuationCharge;
          memoAmount.TotalIscAmountDifference = memoAmount.AllowedTotalIscAmount - memoAmount.AcceptedTotalIscAmount;
          memoAmount.TotalOtherChargeDifference = memoAmount.BilledTotalOtherChargeAmount - memoAmount.AcceptedTotalOtherChargeAmount;
          memoAmount.TotalVatAmountDifference = memoAmount.BilledTotalVatAmount - memoAmount.AcceptedTotalVatAmount;
        }
        else if (rejectionStage == (int)RejectionStage.StageTwo)
        {
          memoAmount.TotalWeightChargeDifference = memoAmount.AcceptedTotalWeightCharge - memoAmount.BilledTotalWeightCharge;
          memoAmount.TotalValuationChargeDifference = memoAmount.AcceptedTotalValuationCharge - memoAmount.BilledTotalValuationCharge;
          memoAmount.TotalIscAmountDifference = memoAmount.AcceptedTotalIscAmount - memoAmount.AllowedTotalIscAmount;
          memoAmount.TotalOtherChargeDifference = memoAmount.AcceptedTotalOtherChargeAmount - memoAmount.BilledTotalOtherChargeAmount;
          memoAmount.TotalVatAmountDifference = memoAmount.AcceptedTotalVatAmount - memoAmount.BilledTotalVatAmount;
        }

        memoAmount.TotalNetRejectAmount = memoAmount.TotalWeightChargeDifference + memoAmount.TotalValuationChargeDifference + memoAmount.TotalIscAmountDifference + memoAmount.TotalOtherChargeDifference + memoAmount.TotalVatAmountDifference;
      }
    }

    /// <summary>
    /// Function to add Header information to the invoice
    /// </summary>
    /// <param name="invoiceHeader">Invoice To be Added.</param>
    /// <returns></returns>
    public virtual CargoInvoice CreateInvoice(CargoInvoice invoiceHeader)
    {
      // Mark the invoice status as Open.
      invoiceHeader.InvoiceStatus = InvoiceStatusType.Open;

      // updating validation status to Pending
      invoiceHeader.ValidationStatus = InvoiceValidationStatus.Pending;
      invoiceHeader.ValidationDate = DateTime.MinValue;

      invoiceHeader.BillingCategory = BillingCategoryType.Cgo;

      //fixed for issue id.5713 
      invoiceHeader.SettlementFileStatus = InvoiceProcessStatus.NotSet;

      //CMP602
      if(ValidateInvoiceHeader(invoiceHeader, null))
      {
        SetViewableByClearingHouse(invoiceHeader);
      }

      // Add an invoice total record with zero values.))
      if (invoiceHeader.CGOInvoiceTotal == null)
      {
        invoiceHeader.CGOInvoiceTotal = new CargoInvoiceTotal();
      }

      CargoInvoiceRepository.Add(invoiceHeader);
      UnitOfWork.CommitDefault();

      // Remove invoice Details from from DUP_INVOICE_LOG and DUP_INVOICE_TEMP tables (used to enforce duplicate check on invoice).
      try
      {
        RemoveInvoiceDuplicateCheck.RemoveDupCheckForInvoice(invoiceHeader.Id);
      }// End try
      catch (Exception ex)
      {
        Logger.ErrorFormat("Handled Error. Error Message: {0}, Stack Trace: {1}", ex.Message, ex.StackTrace);
      }// End catch

      var billingMember = invoiceHeader.MemberLocationInformation.Where(location => location.IsBillingMember).FirstOrDefault();
      if (billingMember != null)
      {
        billingMember.InvoiceId = invoiceHeader.Id;
        UpdateMemberLocationInformation(billingMember, invoiceHeader, true);
      }

      var billedMember = invoiceHeader.MemberLocationInformation.Where(location => !location.IsBillingMember).FirstOrDefault();
      if (billedMember != null)
      {
        billedMember.InvoiceId = invoiceHeader.Id;
        UpdateMemberLocationInformation(billedMember, invoiceHeader, false);
      }

      return invoiceHeader;
    }

    /// <summary>
    /// Updates Invoice
    /// </summary>
    /// <param name="invoiceHeader">Invoice Id.</param>
    /// <returns></returns>
    public virtual CargoInvoice UpdateInvoice(CargoInvoice invoiceHeader)
    {
      var invoiceHeaderInDb = CargoInvoiceRepository.Single(id: invoiceHeader.Id);

      invoiceHeader.CGOInvoiceTotal = invoiceHeaderInDb.CGOInvoiceTotal;

      // Update net total if user changes Exchange rate. (Earlier check of Listing Currency was failing in case of Bilateral SMI)
      if (CompareUtil.IsDirty(invoiceHeader.ExchangeRate, invoiceHeaderInDb.ExchangeRate))
      {
        //CMP#648: Convert Exchange rate into nullable field.
        if (invoiceHeader.ExchangeRate.HasValue && invoiceHeader.ExchangeRate.Value > 0)

          invoiceHeader.CGOInvoiceTotal.NetBillingAmount = invoiceHeader.CGOInvoiceTotal.NetTotal/
                                                           invoiceHeader.ExchangeRate.Value;
        else
          invoiceHeader.CGOInvoiceTotal.NetBillingAmount = invoiceHeader.CGOInvoiceTotal.NetTotal;
      }


      invoiceHeader.BillingCategory = BillingCategoryType.Cgo;
      // reassigning the LegalPdfLocation property fetch from Database to avoid
      // loss of information.
      invoiceHeader.LegalPdfLocation = invoiceHeaderInDb.LegalPdfLocation;

      //CMP602
      if(ValidateInvoiceHeader(invoiceHeader, invoiceHeaderInDb))
      {
        SetViewableByClearingHouse(invoiceHeader);
      }

      invoiceHeader.InvoiceStatus = InvoiceStatusType.Open;


      //Update billing and billed member reference data
      var billingMember = invoiceHeader.MemberLocationInformation.Where(location => location.IsBillingMember).FirstOrDefault();
      if (billingMember != null)
      {
        billingMember.InvoiceId = invoiceHeader.Id;
        UpdateMemberLocationInformation(billingMember, invoiceHeader, true, false);
      }

      var billedMember = invoiceHeader.MemberLocationInformation.Where(location => !location.IsBillingMember).FirstOrDefault();
      if (billedMember != null)
      {
        billedMember.InvoiceId = invoiceHeader.Id;
        UpdateMemberLocationInformation(billedMember, invoiceHeader, false, false);
      }

      var updatedInvoiceData = CargoInvoiceRepository.Update(invoiceHeader);
      UnitOfWork.CommitDefault();

        return updatedInvoiceData;
    }


    /// <summary>
    /// Validates the invoice header while creating/updating the Invoice (header).
    /// </summary>
    /// <param name="invoiceHeader">Invoice to be validated.</param>
    /// <param name="invoiceHeaderInDb">Invoice in Db.</param>
    /// <returns>Returns true on success, false otherwise.</returns>
    protected virtual bool ValidateInvoiceHeader(CargoInvoice invoiceHeader, CargoInvoice invoiceHeaderInDb)
    {
      var isUpdateOperation = false;

      //Check whether it's a update operation.
      if (invoiceHeaderInDb != null)
      {
        isUpdateOperation = true;
      }

      // Check whether the invoice can be updated.
      if (isUpdateOperation)
      {
        if (invoiceHeader.InvoiceStatus == InvoiceStatusType.Claimed
            || invoiceHeader.InvoiceStatus == InvoiceStatusType.Presented
            || invoiceHeader.InvoiceStatus == InvoiceStatusType.ProcessingComplete
            || invoiceHeader.InvoiceStatus == InvoiceStatusType.ReadyForBilling)
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidInvoiceStatusForUpdate);
        }
      }

      // Make sure billing and billed member are not the same.
      if (invoiceHeader.BilledMemberId == invoiceHeader.BillingMemberId)
      {
        throw new ISBusinessException(CargoErrorCodes.SameBillingAndBilledMember);
      }

      // Get the details of the billing and billed member.
      var billingMember = MemberManager.GetMember(invoiceHeader.BillingMemberId);
      var billedMember = MemberManager.GetMember(invoiceHeader.BilledMemberId);

      // Get Final Parent Details for SMI, Currency, Clearing House abd Suspended Flag validations
      var billingFinalParent = MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoiceHeader.BillingMemberId));
      var billedFinalParent = MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoiceHeader.BilledMemberId));
      // Assign final parent to invoice
      if (billingFinalParent != null && billingFinalParent.Id != billingMember.Id)
      {
          invoiceHeader.BillingParentMemberId = billingFinalParent.Id;
      }
      if (billedFinalParent != null && billedFinalParent.Id != billedMember.Id)
      {
          invoiceHeader.BilledParentMemberId = billedFinalParent.Id;
      }
      // Make sure that the billing member is valid.
      if (billingMember == null)
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBillingMember);
      }

      // Make sure that the billed member is valid.
      if (billedMember == null)
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBilledMember);
      }

      /* CMP #596: Length of Member Accounting Code to be Increased to 12 
        Desc: New validation #MW2 and #MW3. The Member should not be a Type B Member.
        Disallow Type B members to bill or be billed in Pax and Cgo billing categories.
        Ref: FRS Section 3.4 Table 16 Row 7 and 8, and Section 3.4 point 27.
       
        As per CMP# 596 FRS document, the term ‘Type B Members’ means  - 
        new SIS Members having an Accounting Code with one of the following attributes:
        a.The length of the code is 3, but alpha characters appear in the second and/or third position (the first position may be alpha or numeric)
        b.The length of the code is 4, but alpha character(s) appear in any position (i.e. it is not purely 4 numeric)
        c.The length of the code ranges from 5 to 12
      */
      if (IsTypeBMember(billingMember.MemberCodeNumeric))
      {
          throw new ISBusinessException(CargoErrorCodes.InvalidBillingMemberType);
      }

      if (billedMember != null && IsTypeBMember(billedMember.MemberCodeNumeric))
      {
          throw new ISBusinessException(CargoErrorCodes.InvalidMemberType);
      }

      if (billingMember != null)
          billingMember.IchConfiguration = MemberManager.GetIchConfig(billingMember.Id);

      if (billedMember != null)
          billedMember.IchConfiguration = GetIchConfiguration(billedMember.Id);

      // MemberProfile- A member cannot create an invoice/creditNote or Form C when his IS Membership is ‘Basic’, ‘Restricted’ or ‘Terminated’.
      if (!ValidateBillingMembershipStatus(billingMember))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBillingIsMembershipStatus);
      }

      // Validate correctness of billing period.
      if (!ValidateBillingPeriodOnSaveHeader(invoiceHeader))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBillingPeriod);
      }

      //if (!isUpdateOperation || CompareUtil.IsDirty(invoiceHeaderInDb.BillingCurrencyId, invoiceHeader.BillingCurrencyId) || CompareUtil.IsDirty(invoiceHeaderInDb.SettlementMethodId, invoiceHeader.SettlementMethodId))
      //{
      //  if (!ValidateBillingCurrency(invoiceHeader, billingFinalParent, billedFinalParent, isWeb: true))
      //  {
      //    throw new ISBusinessException(CargoErrorCodes.InvalidBillingCurrency);
      //  }
      //  // SCP177435 - EXCHANGE RATE 
      //  if (!ValidateListingCurrency(invoiceHeader, billingFinalParent, billedFinalParent))
      //  {
      //    throw new ISBusinessException(CargoErrorCodes.InvalidListingCurrency);
      //  }
      //}
      // SCP177435 - EXCHANGE RATE 
      //if (!isUpdateOperation || CompareUtil.IsDirty(invoiceHeaderInDb.ListingCurrencyId, invoiceHeader.ListingCurrencyId) || CompareUtil.IsDirty(invoiceHeaderInDb.SettlementMethodId, invoiceHeader.SettlementMethodId))
      //{
        //CMP #553: ACH Requirement for Multiple Currency Handling-FRS-v1.1.doc
        if (!ValidateBillingCurrency(invoiceHeader, billingFinalParent, billedFinalParent))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidBillingCurrency);
        }
        if (!ValidateListingCurrency(invoiceHeader, billingFinalParent, billedFinalParent))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidListingCurrency);
        }
     // }

      // Update suspended flag according to ach/Ach configuration.
      if (ValidateSuspendedFlag(invoiceHeader, billingFinalParent, billedFinalParent))
      {
        invoiceHeader.SuspendedInvoiceFlag = true;
      }

      // Settlement method validation.
      /*CMP#624: ICH Rewrite-New SMI X , Here validate settlement Method for non X*/
      if (invoiceHeader.SettlementMethodId != (int)SMI.IchSpecialAgreement)
      {
        if (!isUpdateOperation ||
            (CompareUtil.IsDirty(invoiceHeaderInDb.SettlementMethodId, invoiceHeader.SettlementMethodId) || CompareUtil.IsDirty(invoiceHeaderInDb.BilledMemberId, invoiceHeader.BilledMemberId)))
        {
          if (!ValidateSettlementMethod(invoiceHeader, billingFinalParent, billedFinalParent))
          {
            throw new ISBusinessException(CargoErrorCodes.InvalidSettlementMethod);
          }
        }
      }
      //  if (!isUpdateOperation || (CompareUtil.IsDirty(invoiceHeaderInDb.ListingCurrencyId, invoiceHeader.ListingCurrencyId)))
      //{
      // Currency of listing/evaluation 
      // Billing Code (Element 6) = 3 or 5 or 6 or 7
      //   ValidateInvoiceListingCurrency(invoiceHeader);
      //}

      if (!isUpdateOperation || (CompareUtil.IsDirty(invoiceHeaderInDb.InvoiceNumber, invoiceHeader.InvoiceNumber)))
      {
        // TODO:IS-Calendar validation: Billing month and Period: 
        // 1.It can be equal to a future period if the IS calendar’s “Submissions Open (Future dated submissions)” date of
        // that future period is equal to or less than the system date.
        // 2.Late submissions(i.e. when the period is the current open period less 1) will be marked as validation error; 
        // even if the late submission window for the past period is open in the IS Calendar.

        // Used ValidationManager method to validate invoice number.
        if (
          !ValidateInvoiceNumber(invoiceHeader.InvoiceNumber, invoiceHeader.BillingYear, invoiceHeader.BillingMemberId))
        {
          throw new ISBusinessException(CargoErrorCodes.DuplicateInvoiceFound);
        }
      }

      //SCP471024 : Failed Legal XML / PDF
      if (billingMember != null && !billingMember.DigitalSignApplication
       && invoiceHeader.DigitalSignatureRequired == DigitalSignatureRequired.Yes)
      {
          throw new ISBusinessException(CargoErrorCodes.InvalidDigitalSignatureValue);
      }

      //Validate invoice Date 
      if (!ValidateInvoiceDate(invoiceHeader.InvoiceDate))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidInvoiceDate);
      }

      // Validation for Blocked Airline
      ValidationForBlockedAirline(invoiceHeader);

      if ((!isUpdateOperation || (CompareUtil.IsDirty(invoiceHeaderInDb.SettlementMethodId, invoiceHeader.SettlementMethodId) || CompareUtil.IsDirty(invoiceHeaderInDb.ListingCurrencyId, invoiceHeader.ListingCurrencyId) || CompareUtil.IsDirty(invoiceHeaderInDb.BillingCurrencyId, invoiceHeader.BillingCurrencyId))) && invoiceHeader.ListingCurrencyId.HasValue && invoiceHeader.BillingCurrency.HasValue)
      {
          /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like Bilateral */
        if (!ReferenceManager.IsSmiLikeBilateral(invoiceHeader.SettlementMethodId, true))
        {//CMP#648: Convert Exchange rate into nullable field.
          if (
            !ValidateExchangeRate(invoiceHeader.ExchangeRate.HasValue?invoiceHeader.ExchangeRate.Value : (decimal?)null, invoiceHeader.ListingCurrencyId.Value,
                                  invoiceHeader.BillingCurrency.Value, invoiceHeader.BillingYear,
                                  invoiceHeader.BillingMonth))
          {
            if(invoiceHeader.SettlementMethodId != (int)SettlementMethodValues.Bilateral)
            {
              var correctExchangeRate = ReferenceManager.GetExchangeRate(invoiceHeader.ListingCurrencyId.Value,
                                                                   (BillingCurrency)invoiceHeader.BillingCurrencyId.Value,
                                                                   invoiceHeader.BillingYear,
                                                                   invoiceHeader.BillingMonth);
              // Update Exchange rate
              invoiceHeader.ExchangeRate = Convert.ToDecimal(correctExchangeRate);
            }
            else
            {
              throw new ISBusinessException(CargoErrorCodes.InvalidExchangeRate); 
            }
          }
        }
      }

      /*SCP 270845 - Some validations missing is IS-WEB
      * Description: Bilateral SMI so exchange rate is allowed to be anything but 0. 
      * Also enforce that exchange rate has to be 1.00000 in cases when same billing and listing currencies.
      */
      if (ReferenceManager.IsSmiLikeBilateral(invoiceHeader.SettlementMethodId, true))
      {
        //CMP#648: Exchange rate should contains null.
          if (invoiceHeader.BillingCurrencyId.Value == invoiceHeader.ListingCurrencyId.Value && Convert.ToDecimal(invoiceHeader.ExchangeRate) != 1)
          {
              throw new ISBusinessException(ErrorCodes.InvalidListingToBillingRateForSameCurrencies);
          }
          if (Convert.ToDecimal(invoiceHeader.ExchangeRate) <= 0)
          {
              throw new ISBusinessException(CargoErrorCodes.InvalidExchangeRate);
          }
      }

      #region CMP #624: ICH Rewrite-New SMI X

      /* CMP #624: ICH Rewrite-New SMI X 
         * Description: ICH Web Service is called when header is saved
         * Refer FRS Section: 2.12 PAX/CGO IS-WEB Screens (Part 1). */
      ValidationBeforeSmiXWebServiceCall(invoiceHeader, null,
                                           invoiceHeader.InvoiceTypeId,
                                           null, null,
                                           billingFinalParent,
                                           billedFinalParent, true, null,
                                           invoiceHeader.BatchSequenceNumber,
                                           invoiceHeader.RecordSequenceWithinBatch);

        
        /* CMP #624: ICH Rewrite-New SMI X 
        * Description: ICH Web Service is called when header is saved
        * Refer FRS Section: 2.13 PAX/CGO IS-WEB Screens (Part 2). */
      /*CMP#624: ICH Rewrite-New SMI X , Here validate settlement Method for non X*/
      if (invoiceHeader.SettlementMethodId == (int)SMI.IchSpecialAgreement && invoiceHeader.GetSmiXPhase1ValidationStatus())
      {
        return CallSmiXIchWebServiceAndHandleResponse(invoiceHeader, null, invoiceHeader.InvoiceTypeId, null, null, true);

      }

      #endregion

      return true;
    }

      private void PerformExchangeRateValidation(CargoInvoice invoice,List<WebValidationError> webValidationErrors = null,bool isValidateInvoice = false)
        {
            /* SCP#342522 - SIS: ICH Settlement Error - SIS Production
             * Perform Validation to update exchange rate, if incorrect*/

            /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like Bilateral */
            if (!ReferenceManager.IsSmiLikeBilateral(invoice.SettlementMethodId, true))
            {
                if (
                  !ValidateExchangeRate(invoice.ExchangeRate, invoice.ListingCurrencyId.Value,
                                        invoice.BillingCurrency.Value, invoice.BillingYear,
                                        invoice.BillingMonth))
                {
                    if (invoice.SettlementMethodId != (int)SettlementMethodValues.Bilateral)
                    {
                        var correctExchangeRate = ReferenceManager.GetExchangeRate(invoice.ListingCurrencyId.Value,
                                                                             (BillingCurrency)invoice.BillingCurrencyId.Value,
                                                                             invoice.BillingYear,
                                                                             invoice.BillingMonth);
                        // Update Exchange rate
                        invoice.ExchangeRate = Convert.ToDecimal(correctExchangeRate);
                    }
                    else
                    {
                        if (isValidateInvoice)
                        {
                            if (webValidationErrors != null)
                            {
                                webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoice.Id, CargoErrorCodes.InvalidExchangeRate));
                            }
                        }
                        else
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidExchangeRate);
                        }
                    }
                }
            }
        }


    /// <summary>
    /// Get Invoice Legal PDF path 
    /// </summary>
    /// <param name="invoiceId">Invoice Number </param>
    /// <returns> PDF location path </returns>
    public string GetInvoiceLegalPfdPath(Guid invoiceId)
    {

      var invoicepdfpath = CGOInvoiceRepository.GetInvoiceLegalPdfPath(invoiceId);

      return invoicepdfpath;
    }
    //==============================below code added by 13.9.2011==============
    /// <summary>
    /// Validates an invoice
    /// </summary>
    /// <param name="invoiceId">Invoice to be validated</param>
    /// <returns>
    /// True if successfully validated, false otherwise
    /// </returns>
    public CargoInvoice Validate(string invoiceId)
    {
      var webValidationErrors = new List<WebValidationError>();

      var invoiceGuid = invoiceId.ToGuid();
      var invoice = CGOInvoiceRepository.Single(id: new Guid(invoiceId));

      invoice.ValidationErrors.Clear();

      // Member Location information for both billing and billed member should present.
      var isbillingMemberRefData = invoice.MemberLocationInformation.Any(loc => loc.IsBillingMember && !string.IsNullOrEmpty(loc.CountryCode));
      var isbilledMemberRefData = invoice.MemberLocationInformation.Any(loc => !loc.IsBillingMember && !string.IsNullOrEmpty(loc.CountryCode));

      if ((string.IsNullOrEmpty(invoice.BillingMemberLocationCode) && !isbillingMemberRefData) ||
         (string.IsNullOrEmpty(invoice.BilledMemberLocationCode) && !isbilledMemberRefData))
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, CargoErrorCodes.InvalidMemberLocationInformation));
      }
      //==============VoidPeriod==========
      if (!validateVoidPeriod(invoice))
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, CargoErrorCodes.VoidPeriodValidationMsg));
      }
      //=========================================
      // TODO: Validation for invoice level VAT
      // Late submissions (where the period is the current open period less 1) will be marked as validation error (Error Non-Correctable); 
      // even if the late submission window for the past period is open in the IS Calendar.
      if (webValidationErrors.Count <= 0 && ReferenceManager.IsValidSmiForLateSubmission(invoice.SettlementMethodId) && IsLateSubmission(invoice))
      {
        invoice.ValidationStatus = InvoiceValidationStatus.ErrorPeriod;
        invoice.ValidationStatusId = (int)InvoiceValidationStatus.ErrorPeriod;
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, CargoErrorCodes.InvoiceLateSubmitted));
      }
      else
      {
        // Validate correctness of billing period.
        if (webValidationErrors.Count <= 0 && !ValidateBillingPeriod(invoice))
        {
          invoice.ValidationStatus = InvoiceValidationStatus.Failed;
          invoice.ValidationStatusId = (int)InvoiceValidationStatus.Failed;
          webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, CargoErrorCodes.InvalidBillingPeriod));
        }
      }

      // Validation for membership status on validate button click
      //var billingMember = MemberManager.GetMember(invoice.BillingMemberId);
      var billingMember = invoice.BillingMember;

      if (!ValidateBillingMembershipStatus(billingMember))
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, CargoErrorCodes.InvalidBillingIsMembershipStatus));
      }

      if (!ValidateBilledMemberStatus(invoice.BilledMember))
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, CargoErrorCodes.InvalidBilledIsMembershipStatus));
      }

      try
      {
        // Validation for Blocked Airline
        ValidationForBlockedAirline(invoice);
      }
      catch (ISBusinessException exception)
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceGuid, exception.ErrorCode));
      }

      if (invoice.CGOInvoiceTotal != null)
      {
        var invoiceTotalVatList = GetInvoiceLevelVatList(invoiceId);
        double? invoiceTotalVat = invoiceTotalVatList.Sum(vat => vat.VatCalculatedAmount);

        if (Convert.ToDecimal(invoiceTotalVat) != invoice.CGOInvoiceTotal.TotalVatAmount)
        {
          webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(),
                                                                               CargoErrorCodes.InvalidInvoiceTotalVat));
        }
        /* SCP#342522 - SIS: ICH Settlement Error - SIS Production
         * Perform Validation to update exchange rate, if incorrect*/
        PerformExchangeRateValidation(invoice, webValidationErrors, true);

        /* SCP# 302117: SRM: ICH Settlement Error - SIS Production - Error Code 21015 
           * Desc: Update Total Amount in Currency of Billing. */
        //CMP#648: Convert Exchange rate into nullable field.
        if (invoice.ExchangeRate.HasValue && invoice.ExchangeRate.Value != 0)
        {
            invoice.CGOInvoiceTotal.NetBillingAmount =
                ConvertUtil.Round((invoice.CGOInvoiceTotal.NetTotal / invoice.ExchangeRate.Value), 3);
        }
      }

      if (webValidationErrors.Count > 0)
      {
        invoice.ValidationErrors.AddRange(webValidationErrors);
      }
     

        return invoice;
    }
    public bool validateVoidPeriod(InvoiceBase invoice)
    {
      var clearingHouse = ReferenceManager.GetClearingHouseToFetchCurrentBillingPeriod(invoice.SettlementMethodId);
      // var tt = CalendarManager.GetCurrentBillingPeriod(clearingHouse);
      BillingPeriod currentPeriod;

      try
      {

        // Try to get the current billing period.
        currentPeriod = CalendarManager.GetCurrentBillingPeriod(clearingHouse); //GetCurrentBillingPeriod(clearingHouse);
      }
      catch (ISCalendarDataNotFoundException)
      {
        // Current billing period not found, try to get the next billing period.
        var previousBillingPeriod = CalendarManager.GetLastClosedBillingPeriod(clearingHouse);
        if (!CalendarManager.IsLateSubmissionWindowOpen(clearingHouse, previousBillingPeriod))
        {
          return false;
        }
        else
        {
          return true;
        }

        return false;
      }
      return true;

    }
    /// <summary>
    /// Validates an invoice, when Validate Invoice button pressed
    /// </summary>
    /// <param name="invoiceId">Invoice to be validated</param>
    /// <returns>
    /// True if successfully validated, false otherwise
    /// </returns>
    public virtual CargoInvoice ValidateInvoice(string invoiceId)
    {
      var webValidationErrors = new List<WebValidationError>();
      var invoice = Validate(invoiceId);

      // Get ValidationErrors for invoice from DB.
      var validationErrorsInDb = ValidationErrorManager.GetValidationErrors(invoiceId);

      webValidationErrors.AddRange(invoice.ValidationErrors);
      // At least one transaction/line item should be present.
      var couponRecordCount = CargoAwbRecordRepository.GetCount(couponRecord => couponRecord.InvoiceId == invoice.Id);
      var rejectionMemoRecordCount = RejectionMemoRepository.GetCount(rmRecord => rmRecord.InvoiceId == invoice.Id);
      var billingMemoRecordCount = BillingMemoRepository.GetCount(bmRecord => bmRecord.InvoiceId == invoice.Id);
      var creditMemoRecordCount = CreditMemoRepository.GetCount(cmRecord => cmRecord.InvoiceId == invoice.Id);

      if (couponRecordCount <= 0 && rejectionMemoRecordCount <= 0 && billingMemoRecordCount <= 0 && creditMemoRecordCount <= 0)
      {
        webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(), CargoErrorCodes.TransactionLineItemNotAvailable));
        //throw new ISBusinessException(CargoErrorCodes.TransactionLineItemNotAvailable);
      }

      //// Validate acceptable amount difference for given reason code.
      if (rejectionMemoRecordCount > 0)
      {
        var rejectionMemoNegativeAmtCount = RejectionMemoRepository.GetCount(rmRecord => rmRecord.InvoiceId == invoice.Id && rmRecord.TotalNetRejectAmount < 0);
        if (rejectionMemoNegativeAmtCount > 0)
        {
          webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(), CargoErrorCodes.ErrorNegativeRMNetAmount));
        }
        //CMP#459: Validate Rejection memo.
        var outcomeOfMismatchOnRmBilledOrAllowedAmounts = Convert.ToBoolean(SystemParameters.Instance.ValidationParams.CGORMBilledAllowedAmounts);
        var rejectionMemoRecords = RejectionMemoRepository.Get(rmRecord => rmRecord.InvoiceId == invoice.Id ).ToList();
        foreach (var rejectionMemoRecord in rejectionMemoRecords)
        {
            //CMP#459 : Validate Amounts at memo level.
            IList<IsValidationExceptionDetail> exceptionDetailsList = new List<IsValidationExceptionDetail>();
            ValidateAmountsInRMonMemoLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord);
            foreach (var isValidationExceptionDetail in exceptionDetailsList)
            {
                var webValErr = new WebValidationError { ErrorCode = isValidationExceptionDetail.ExceptionCode, ErrorDescription = isValidationExceptionDetail.ErrorDescription, InvoiceId = invoiceId.ToGuid() };
                webValidationErrors.Add(webValErr);
            }
        }

        #region CMP-674-Validation of Coupon and AWB Breakdowns in Rejections

        /* CMP#674 validations will be applicable only to the following transactions - CGO Stage 2 RMs and CGO Stage 3 RMs */
        var stage2OrSatge3RMCount =
            RejectionMemoRepository.GetCount(
                rmRecord =>
                rmRecord.InvoiceId == invoice.Id && (rmRecord.RejectionStage == 2 || rmRecord.RejectionStage == 3));

        if (stage2OrSatge3RMCount > 0)
        {
            List<InvalidRejectionMemoDetails> invalidRejectionMemos =
                RejectionMemoRepository.IsYourRejectionCouponDropped(invoice.Id);

            foreach (InvalidRejectionMemoDetails invalidRM in invalidRejectionMemos)
            {
                /* Report Error -
                 * Error Code - RejectionMemoCouponMissing = "BCGO_10401"
                 * Error Description - Error in RM No. <RM No.>, Batch No. <Batch No.>, Seq. No. <Seq. No.> due to mismatch in AWB <yyy-yyyyyyy>. 
                 *                     It was billed <a> time(s) in the rejected RM; and <b> time(s) in this RM.
                 */
                var errorDescription = Messages.ResourceManager.GetString(CargoErrorCodes.CargoRMCouponMismatchIsWeb);

                errorDescription = string.Format(errorDescription, invalidRM.RejectionMemoNumber,
                                                 invalidRM.BatchNumber, invalidRM.SequenceNumber,
                                                 invalidRM.TicketIssuingAirline, invalidRM.TicketDocOrAwbNumber,
                                                 invalidRM.RejectedRMOccurrence, invalidRM.RejectingRMOccurrence);

                var webValError = new WebValidationError
                                             {
                                                 ErrorCode = CargoErrorCodes.CargoRMCouponMismatchIsWeb,
                                                 ErrorDescription = errorDescription,
                                                 InvoiceId = invoiceId.ToGuid()
                                             };

                webValidationErrors.Add(webValError);
            }
        }
        /* CMP#674 - Not applicable - Validation bypassed - Only for Logical Completion
        else
        {
              
        }*/

        #endregion

      }

      //SCP219674 : InvalidAmountToBeSettled Validation
      if (billingMemoRecordCount > 0)
      {
        // Linking related - correspondence reference number validations. Required only for reason codes 6A and 6B.
        var corrBmRecords = BillingMemoRepository.Get(bmRecord => bmRecord.InvoiceId == invoice.Id && (bmRecord.ReasonCode == ReasonCode6A || bmRecord.ReasonCode == ReasonCode6B));
        foreach (var cargoBillingMemo in corrBmRecords)
        {
          try
          {
            ValidateCorrespondenceReference(cargoBillingMemo, false, invoice);
          }
          catch (ISBusinessException exception)
          {
            var error = string.Format(" Billing Memo Number: {0} , Batch Sequence Number: {1}", cargoBillingMemo.BillingMemoNumber, cargoBillingMemo.BatchSequenceNumber);
            webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(), exception.ErrorCode, error));
          }
        }
      }

      var errorMessages = CGOInvoiceRepository.ValidateMemo(invoiceId.ToGuid());
      if (!string.IsNullOrEmpty(errorMessages))
      {
        errorMessages = errorMessages.Remove(errorMessages.Length - 1, 1);
        var errorMessage = errorMessages.Split(',');
        foreach (var error in errorMessage)
        {
          if (error.ToLower().StartsWith(ReasonCodeErrorMessage.ToLower()))
          {
            webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(),
                                                                                 CargoErrorCodes.AWBbreakdownMandatory,
                                                                                 error));
          }
          else
          {
            webValidationErrors.Add(ValidationErrorManager.GetWebValidationError(invoiceId.ToGuid(), CargoErrorCodes.AmountOutsideLimit, error));
          }
        }
      }

      if (webValidationErrors.Count > 0)
      {
        invoice.ValidationErrors.Clear();
        invoice.ValidationErrors.AddRange(webValidationErrors);
        invoice.InvoiceStatus = InvoiceStatusType.ValidationError;
        // updating validation status to Error if there are more than 1 error, if its one then its already set to ErrorPeriod.
        if (webValidationErrors.Count > 1)
          invoice.ValidationStatus = InvoiceValidationStatus.Failed;
      }
      else
      {
        // Invoice through the validation, change invoice status to Ready for submission. 
        invoice.InvoiceStatus = InvoiceStatusType.ReadyForSubmission;
        // updating validation status to completed
        invoice.ValidationStatus = InvoiceValidationStatus.Completed;
      
         //SCP85837 :- PAX CGO Sequence Number
        invoice.IsRecordSequenceArranged = CGOInvoiceRepository.UpdateTransSeqNoWithInBatch(new Guid(invoiceId)) ? RecordSequence.IsArranged : RecordSequence.NotArranged;
     
      }

      invoice.ValidationDate = DateTime.UtcNow;

      // Update the invoice.
      //InvoiceRepository.Update(invoice);
      //SCP325375: File Loading & Web Response Stats ManageInvoice
      InvoiceRepository.SetInvoiceAndValidationStatus(invoice.Id, invoice.InvoiceStatusId, invoice.ValidationStatusId, false, invoice.ClearingHouse, invoice.CGOInvoiceTotal.NetBillingAmount, (int)BillingCategoryType.Cgo, invoice.ExchangeRate);

      // Update latest invoice status.
      ValidationErrorManager.UpdateValidationErrors(invoice.Id, invoice.ValidationErrors, validationErrorsInDb);

      //SCP325375: File Loading & Web Response Stats ManageInvoice
      //UnitOfWork.CommitDefault();

      return invoice;
    }

    /// <summary>
    /// Function to retrieve invoice details of the given invoice number
    /// </summary>
    /// <param name="invoiceId">invoice id To Be fetched..</param>
    /// <returns></returns>
    public CargoInvoice GetInvoiceHeaderDetails(string invoiceId)
    {
      try
      {
        //work-in progress 12.9.11         
        // var invoiceHeader = new CargoInvoice();        
        var invoiceHeader = CGOInvoiceRepository.Single(id: new Guid(invoiceId));        

        invoiceHeader.InvoiceStatusDisplayText = ReferenceManager.GetInvoiceStatusDisplayValue(invoiceHeader.InvoiceStatusId);
        //invoiceHeader.InvoiceStatusDisplayText = invoiceHeader.DisplayInvoiceStatus = ReferenceManager.GetInvoiceStatusDisplayValue(invoiceHeader.InvoiceStatusId);
        invoiceHeader.SettlementMethodDisplayText = ReferenceManager.GetSettlementMethodDisplayValue(invoiceHeader.SettlementMethodId);
        invoiceHeader.SubmissionMethodDisplayText = ReferenceManager.GetDisplayValue(MiscGroups.FileSubmissionMethod, invoiceHeader.SubmissionMethodId);

        return invoiceHeader;
      }
      catch (Exception ex)
      {
        Logger.Error("Get Invoice Header Details", ex);
        throw;
      }
    }
    /// <summary>
    /// SCPID 85039 - IS Web Performance Feedback / Billing History & Correspondence / Other issues(AwbBillingAttachmentUpload)
    /// Function to retrieve invoice details of the given invoice number
    /// </summary>
    /// <param name="invoiceId">invoice id To Be fetched..</param>
    /// <returns></returns>
    public CargoInvoice GetInvoiceDetails(string invoiceId)
    {
        try
        {
            Guid id = invoiceId.ToGuid();
            var invoiceHeader = CGOInvoiceRepository.Get(i=>i.Id==id ).SingleOrDefault();
            return invoiceHeader;
        }
        catch (Exception ex)
        {
            Logger.Error("Get Invoice Header Details", ex);
            throw;
        }
    }


    /// <summary>
    /// Check for duplicate file name of rejection memo attachment
    /// </summary>
    /// <param name="fileName">file name</param>
    /// <param name="rejectionMemoId">rejection Memo Id</param>
    /// <returns></returns>
    public bool IsDuplicateRejectionMemoAttachmentFileName(string fileName, Guid rejectionMemoId)
    {
      return RejectionMemoAttachmentRepository.GetCount(attachment => attachment.ParentId == rejectionMemoId && attachment.OriginalFileName.ToUpper() == fileName.ToUpper()) > 0;
    }

    /// <summary>
    /// Validate Invoice Listing Currency.
    /// </summary>
    /// <param name="invoiceHeader">Invoice whose currency fields to be validated.</param>
    public static void ValidateInvoiceListingCurrency(CargoInvoice invoiceHeader)
    {

      if ((invoiceHeader.InvoiceSmi == SMI.Ach || invoiceHeader.InvoiceSmi == SMI.AchUsingIataRules) && invoiceHeader.ListingCurrencyId != (int)BillingCurrency.USD)
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidListingCurrency);
      }

    }

    /// <summary>
    /// Validates the invoice date by comparing it with current billing period closure date.
    /// </summary>
    /// <param name="invoiceDate">The invoice date.</param>
    /// <returns>True if successful; otherwise false.</returns>
    public bool ValidateInvoiceDate(DateTime invoiceDate)
    {
      var result = true;
      var billingPeriod = CalendarManager.GetCurrentPeriodIfOpenOrNextAsCurrent(ClearingHouse.Ich);  //GetCurrentBillingPeriod();

      // Invoice date should not be greater than current billing period closure date.
      if (invoiceDate.Date > billingPeriod.EndDate.Date)
      {
        result = false;
      }

      return result;
    }

    /// <summary>
    /// Updates the member location information.
    /// </summary>
    /// <param name="memberLocationInformation">The member location information.</param>
    /// <param name="invoiceHeader">The invoice header.</param>
    /// <param name="isBillingMember">if set to <c>true</c> [is billing member].</param>
    /// <param name="commitChanges">The commit changes.</param>
    /// <returns></returns>
    public MemberLocationInformation UpdateMemberLocationInformation(MemberLocationInformation memberLocationInformation, InvoiceBase invoiceHeader, bool isBillingMember, bool? commitChanges = null)
    {
      // var invoiceHeader = invoiceHeaderRepository.Single(id: memberLocationInformation.invoiceHeaderId);

      if (!string.IsNullOrEmpty(memberLocationInformation.MemberLocationCode))
      {
        if (isBillingMember)
        {
          invoiceHeader.BillingMemberLocationCode = memberLocationInformation.MemberLocationCode;
        }
        else
        {
          invoiceHeader.BilledMemberLocationCode = memberLocationInformation.MemberLocationCode;
        }

        //InvoiceRepository.Update(invoiceHeader);

        //var memberLocInformation = MemberLocationInfoRepository.Single(memLoc => memLoc.InvoiceId == invoiceHeader.Id && memLoc.IsBillingMember == isBillingMember);

        //if (memberLocInformation != null)
        //{
        //  invoiceHeader.MemberLocationInformation.Remove(memberLocInformation);
        //  MemberLocationInfoRepository.Delete(memberLocInformation);
        //}
      }
      else
      {

        if (isBillingMember)
        {
          invoiceHeader.BillingMemberLocationCode = null;
        }
        else
        {
          invoiceHeader.BilledMemberLocationCode = null;
        }
      }

      //InvoiceRepository.Update(invoiceHeader);

      var memberLocationInformationInDb = MemberLocationInfoRepository.Single(memLoc => memLoc.InvoiceId == invoiceHeader.Id && memLoc.IsBillingMember == isBillingMember);

      // Update current member location information if already exits
      if (memberLocationInformationInDb != null)
      {
        memberLocationInformation.Id = memberLocationInformationInDb.Id;

        MemberLocationInfoRepository.Update(memberLocationInformation);
      }
      else
      {
        // Add new member location information 
        MemberLocationInfoRepository.Add(memberLocationInformation);
      }

      if ((!commitChanges.HasValue) || commitChanges.Value)
        UnitOfWork.CommitDefault();

      return memberLocationInformation;

    }

    /// <summary>
    /// To update rejection memo record
    /// </summary>
    /// <param name="rejectionMemoRecord">Details of the rejection memo record</param>
    /// <param name="warningMessage"></param>
    /// <returns>Updated rejection memo record</returns>
    public CargoRejectionMemo UpdateRejectionMemoRecord(CargoRejectionMemo rejectionMemoRecord, out string warningMessage)
    {
      //Replaced with LoadStrategy call
      var rejectionMemoRecordInDb = RejectionMemoRepository.Single(rejectionMemoRecord.Id);

      rejectionMemoRecord.ReasonCode = rejectionMemoRecord.ReasonCode.ToUpper();
      warningMessage = ValidateRejectionMemo(rejectionMemoRecord, rejectionMemoRecordInDb);
      rejectionMemoRecord.BillingCode = Convert.ToInt32(BillingCode.RejectionMemo);

      var updatedRejectionMemo = RejectionMemoRepository.Update(rejectionMemoRecord);

      //Changes to update tax breakdown records
      var listToDeleteVat = rejectionMemoRecordInDb.RejectionMemoVat.Where(vat => rejectionMemoRecord.RejectionMemoVat.Count(vatRecord => vatRecord.Id == vat.Id) == 0).ToList();

      foreach (var vat in rejectionMemoRecord.RejectionMemoVat.Where(vat => vat.Id.CompareTo(new Guid()) == 0))
      {
        vat.ParentId = rejectionMemoRecord.Id;
        RejectionMemoVatRepository.Add(vat);
      }

      foreach (var rejectionMemoVat in listToDeleteVat)
      {
        RejectionMemoVatRepository.Delete(rejectionMemoVat);
      }

      // Changes to update attachment breakdown records
      var listToDeleteAttachment =
        rejectionMemoRecordInDb.Attachments.Where(attachment => rejectionMemoRecord.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0).ToList();

      var attachmentIdList = (from attachment in rejectionMemoRecord.Attachments
                              where rejectionMemoRecordInDb.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0
                              select attachment.Id).ToList();

      var rmAttachmentInDb = RejectionMemoAttachmentRepository.Get(couponAttachment => attachmentIdList.Contains(couponAttachment.Id));

      foreach (var recordAttachment in rmAttachmentInDb)
      {
        if (IsDuplicateRejectionMemoAttachmentFileName(recordAttachment.OriginalFileName, rejectionMemoRecord.Id))
        {
          throw new ISBusinessException(CargoErrorCodes.DuplicateFileName);
        }

        recordAttachment.ParentId = rejectionMemoRecord.Id;
        RejectionMemoAttachmentRepository.Update(recordAttachment);
      }

      foreach (var rmAttachment in listToDeleteAttachment)
      {
        RejectionMemoAttachmentRepository.Delete(rmAttachment);
      }

      // SCP225675: //Urgent// About the incoming XML file for SEP P4
      try
      {
        UnitOfWork.CommitDefault();
      }
      catch (Exception exception)
      {
        Logger.ErrorFormat("Exception Details: {0}", exception.InnerException.ToString());
        // If table level constraint for Rejection Stage, throws the exception then will throw it as BusinessException.
        if (exception.InnerException.Message.Contains("CK_CGORM#REJ_STG"))
        {
          throw new ISBusinessException(ErrorCodes.InvalidRejectionStageAttemptedToSave);
        }
        throw;
      }

      CGOInvoiceRepository.UpdateCargoRMInvoiceTotal(rejectionMemoRecord.InvoiceId, Convert.ToInt32(BillingCode.RejectionMemo), rejectionMemoRecord.Id, rejectionMemoRecord.LastUpdatedBy);

      // Update expiry date for purging.
    //  UpdateRejectionMemoExpiryDate(rejectionMemoRecord);

      return updatedRejectionMemo;
    }

    /// <summary>
    /// GetRejectionMemoList
    /// </summary>
    /// <param name="invoiceId">Rejection Memo list for this invoice id.</param>
    /// <returns></returns>
    public IList<CargoRejectionMemo> GetRejectionMemoList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var rejectionMemoList = RejectionMemoRepository.Get(rm => rm.InvoiceId == invoiceGuid);

      var reasonCodes = rejectionMemoList.Select(rmRecord => rmRecord.ReasonCode.ToUpper());
      var reasonCodesfromDb = ReasonCodeRepository.Get(reasonCode => reasonCodes.Contains(reasonCode.Code.ToUpper())).ToList();

      if (reasonCodesfromDb.Count() > 0)
      {
        foreach (var rejectionMemoRecord in rejectionMemoList)
        {
          var record = rejectionMemoRecord;
          var transactionType = GetTransactionType(record.RejectionStage);
          var reasonCodeObj = reasonCodesfromDb.Single(rCode => rCode.Code == record.ReasonCode && rCode.TransactionTypeId == (int)transactionType);

          rejectionMemoRecord.ReasonCodeDescription = reasonCodeObj != null ? reasonCodeObj.Description : string.Empty;
        }
      }
      rejectionMemoList.OrderBy(rm => rm.BatchSequenceNumber);
      return rejectionMemoList.ToList();
    }

    /// <summary>
    /// Delete CargoRejectionMemo Record.
    /// </summary>
    /// <param name="rejectionMemoRecordId">rejectionMemoRecordId to be deleted.</param>
    /// <returns></returns>
    public bool DeleteRejectionMemoRecord(string rejectionMemoRecordId)
    {
      var rejectionMemoRecordGuid = rejectionMemoRecordId.ToGuid();

      //Replaced with LoadStrategy call
      var rejectionMemo = RejectionMemoRepository.Single(rejectionMemoRecordGuid);

      if (rejectionMemo == null) return false;
      RejectionMemoRepository.Delete(rejectionMemo);
      UnitOfWork.CommitDefault();

      // Update rejection memo invoice total.
      CGOInvoiceRepository.UpdateCargoRMInvoiceTotal(rejectionMemo.InvoiceId, Convert.ToInt32(BillingCode.RejectionMemo), rejectionMemo.Id, rejectionMemo.LastUpdatedBy);

      return true;
    }

    /// <summary>
    /// Update parent id of rejection memo attachment record for given Guids
    /// </summary>
    /// <param name="attachments">list of Guid of rejection memo attachment record</param>
    /// <param name="parentId">rejection memo id</param>
    /// <returns></returns>
    public IList<CgoRejectionMemoAttachment> UpdateRejectionMemoAttachment(IList<Guid> attachments, Guid parentId)
    {
      var rmAttachmentInDb = RejectionMemoAttachmentRepository.Get(couponAttachment => attachments.Contains(couponAttachment.Id));
      foreach (var recordAttachment in rmAttachmentInDb)
      {
        recordAttachment.ParentId = parentId;
        RejectionMemoAttachmentRepository.Update(recordAttachment);
      }
      UnitOfWork.CommitDefault();
      return rmAttachmentInDb.ToList();
    }

    /// <summary>
    /// GetRejectionMemoRecordDetails
    /// </summary>
    /// <param name="rejectionMemoRecordId">rejectionMemoRecordId.</param>
    /// <returns></returns>
    public CargoRejectionMemo GetRejectionMemoRecordDetails(string rejectionMemoRecordId)
    {
        var rejectionMemoRecordGuid = rejectionMemoRecordId.ToGuid();
        // LoadStrategy call
        //SCP85039: Changed call to get data from repository using Get() instead of earlier used Single()
        //var rejectionMemo= RejectionMemoRepository.Single(rejectionMemoRecordGuid);
        //var rejectionMemo = RejectionMemoRepository.Get(rmc => rmc.Id == rejectionMemoRecordGuid).ToList().FirstOrDefault();
        //SCP141434 - not able to see attachments
        //We need to give call to single, to fetch the data from attachment table as well, so as to display them in the Grid.
        var rejectionMemo = RejectionMemoRepository.Single(rejectionMemoRecordGuid);

        return rejectionMemo;
    }

    /// <summary>
    /// New Awb record to be added
    /// </summary>
    /// <param name="awbRecord">The Awb record.</param>
    /// <param name="duplicateCouponErrorMessage">The duplicate coupon error message.</param>
    /// <returns>Added Awb record</returns>
    public AwbRecord AddAwbRecord(AwbRecord awbRecord, out string duplicateCouponErrorMessage)
    {
        






        //SCP85837: PAX CGO Sequence No
        // If value != 0, either Batch and Sequence number combination is invalid or Batch number is repeated 
        int invalidBatchSequenceNumber = CargoInvoiceRepository.IsValidBatchSequenceNo(awbRecord.InvoiceId, awbRecord.RecordSequenceWithinBatch, awbRecord.BatchSequenceNumber,awbRecord.BillingCodeId, awbRecord.Id);

        


if (invalidBatchSequenceNumber != 0)
        {
            // If value == 1, Batch number is repeated between different source codes, else if value == 2, Batch and Sequence number combination is invalid  
            if (invalidBatchSequenceNumber == 1)
                throw new ISBusinessException(CargoErrorCodes.InvalidBatchNo);
            else
                throw new ISBusinessException(CargoErrorCodes.InvalidBatchSequenceNo);
        }
     








      duplicateCouponErrorMessage = ValidateAirwayBill(awbRecord, awbRecord.InvoiceId.ToString(), null);





      if (!string.IsNullOrEmpty(duplicateCouponErrorMessage))
      {
        awbRecord.ISValidationFlag = DuplicateValidationFlag;
      }



      CargoAwbRecordRepository.Add(awbRecord);





      UnitOfWork.CommitDefault();
 



    
      CargoInvoiceRepository.UpdateAwbInvoiceTotal(awbRecord.InvoiceId, awbRecord.LastUpdatedBy, awbRecord.BillingCodeId, awbRecord.BatchSequenceNumber, awbRecord.RecordSequenceWithinBatch);













      return awbRecord;
    }

    /// <summary>
    /// Function to validate Awb record.
    /// </summary>
    /// <param name="awbRecord">AWB record to be updated.</param>
    /// <param name="invoiceId"></param>
    /// <param name="awbRecordDb">Existing AWB record in db.</param>
    /// <returns></returns>
    private string ValidateAirwayBill(AwbRecord awbRecord, string invoiceId, AwbRecord awbRecordDb)
    {
        



      var isUpdateOperation = false;
      var duplicateCouponErrorMessage = string.Empty;

      TransactionType transType = 0;
      if (awbRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
      {
        transType = TransactionType.CargoPrimePrepaid;
      }
      else if (awbRecord.BillingCodeId == (int)BillingCode.AWBChargeCollect)
      {
        transType = TransactionType.CargoPrimeChargeCollect;
      }

      ////If there is record in db then its a update operation
      if (awbRecordDb != null)
      {
        isUpdateOperation = true;
      }

      // Origin and Destination cannot be same.
      if (!string.IsNullOrEmpty(awbRecord.ConsignmentOriginId) && !string.IsNullOrEmpty(awbRecord.ConsignmentDestinationId))
      {
        if (awbRecord.ConsignmentOriginId.Equals(awbRecord.ConsignmentDestinationId))
          throw new ISBusinessException(CargoErrorCodes.InvalidConsignemtOriginDestination);
      }

      //SCPID:122022 - Validate  Batch and Sequence No
      if (awbRecord.RecordSequenceWithinBatch <= 0 || awbRecord.BatchSequenceNumber <= 0)
      {
          throw new ISBusinessException(CargoErrorCodes.BatchRecordSequenceNoReq);
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for AWB Prepaid.
      if (awbRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
      {
        if (!string.IsNullOrEmpty(awbRecord.CarriageFromId) && !string.IsNullOrEmpty(awbRecord.CarriageToId))
        {
          if (awbRecord.CarriageFromId.Equals(awbRecord.CarriageToId))
            throw new ISBusinessException(CargoErrorCodes.InvalidCarriageCombination);
        }
      }

      // Either none or both Billed Weight and KG/LB Indicator should have values.
      if ((string.IsNullOrEmpty(awbRecord.KgLbIndicator) && awbRecord.BilledWeight.HasValue && awbRecord.BilledWeight.Value != 0) || (!string.IsNullOrEmpty(awbRecord.KgLbIndicator) && (!awbRecord.BilledWeight.HasValue || (awbRecord.BilledWeight.HasValue && awbRecord.BilledWeight.Value == 0))))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBilledWeightKGLBIndicator);
      }

      



      //  // Check if passed 'From Airport Code' is a valid airport code 
      //  // For New coupon Record validation will be done 
      //  // For Update coupon Record if value FromAirportOfCoupon is updated then only validation will be done
      if (!isUpdateOperation || CompareUtil.IsDirty(awbRecord.ConsignmentOriginId, awbRecordDb.ConsignmentOriginId))
      {
        if (!string.IsNullOrEmpty(awbRecord.ConsignmentOriginId) && !ReferenceManager.IsValidAirportCode(awbRecord.ConsignmentOriginId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidOriginCode);
        }
      }

      //  // Check if passed 'To Airport Code' is a valid airport code
      //  // For New coupon Record validation will be done 
      //  // For Update coupon Record if value ToAirportOfCoupon is updated then only validation will be done
      if (!isUpdateOperation || CompareUtil.IsDirty(awbRecord.ConsignmentDestinationId, awbRecordDb.ConsignmentDestinationId))
      {
        if (!string.IsNullOrEmpty(awbRecord.ConsignmentDestinationId) && !ReferenceManager.IsValidAirportCode(awbRecord.ConsignmentDestinationId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidDestinationCode);
        }
      }
      if (!isUpdateOperation || CompareUtil.IsDirty(awbRecord.CarriageFromId, awbRecordDb.CarriageFromId))
      {
        if (!string.IsNullOrEmpty(awbRecord.CarriageFromId) && !ReferenceManager.IsValidAirportCode(awbRecord.CarriageFromId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidFromCarriageCode);
        }
      }
      if (!isUpdateOperation || CompareUtil.IsDirty(awbRecord.CarriageToId, awbRecordDb.CarriageToId))
      {
        if (!string.IsNullOrEmpty(awbRecord.CarriageToId) && !ReferenceManager.IsValidAirportCode(awbRecord.CarriageToId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidToCarriageCode);
        }
      }
      //}


      
      //// Check if passed 'Currency Adjustment Indicator' is a valid currency code
      //// For New coupon Record validation will be done 
      //// For Update coupon Record if value CurrencyAdjustmentIndicator is updated then only validation will be done
      if (!isUpdateOperation || CompareUtil.IsDirty(awbRecordDb.CurrencyAdjustmentIndicator, awbRecord.CurrencyAdjustmentIndicator))
      {
        if (!string.IsNullOrEmpty(awbRecord.CurrencyAdjustmentIndicator) && !ReferenceManager.IsValidCurrencyCode(awbRecord.CurrencyAdjustmentIndicator))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidCurrencyAdjustmentInd);
        }
      }
      
      //SCP164395 :CGO-IS Web response stats
      var invoiceIds = invoiceId.ToGuid();
      //SCP164395:CGO-IS Web response stats
      //Commented below code and used CGOInvoiceRepository.Get instead of Single.
      //Only header details of retrieved invoice are used.
      //var invoices = CGOInvoiceRepository.Single(id: invoiceIds);
      var invoices = CGOInvoiceRepository.Get(a=>a.Id==invoiceIds).SingleOrDefault();

      
      if (invoices.ListingCurrencyId != null)
      {
          if (awbRecord.AwbTotalAmount != null)
              if (!ReferenceManager.IsValidNetAmount(awbRecord.AwbTotalAmount.Value, transType, invoices.ListingCurrencyId, invoices, applicableMinimumField: ApplicableMinimumField.TotalAmount))
              {
                  throw new ISBusinessException(CargoErrorCodes.InvalidAwbTotalAmount);
              }
      }
      
    
      // Duplicate  AWB record validation
      if (!isUpdateOperation || CompareUtil.IsDirty(awbRecordDb.AwbDate, awbRecord.AwbDate) || CompareUtil.IsDirty(awbRecordDb.AwbSerialNumber, awbRecord.AwbSerialNumber) || CompareUtil.IsDirty(awbRecordDb.AwbIssueingAirline, awbRecord.AwbIssueingAirline) || CompareUtil.IsDirty(awbRecordDb.CarriageFromId, awbRecord.CarriageFromId) || CompareUtil.IsDirty(awbRecordDb.CarriageToId, awbRecord.CarriageToId))
      {
          //Use the above retrieved invoices object 
          duplicateCouponErrorMessage = GetDuplicateAwbCount(awbRecord, invoices, duplicateCouponErrorMessage);
      }

      // From Airport and To Airport should not be same.
      /* if (!string.IsNullOrEmpty(awbRecord.CarriageFromId) && !string.IsNullOrEmpty(awbRecord.CarriageToId) &&
          awbRecord.CarriageFromId.Trim().Equals(awbRecord.CarriageToId.Trim()))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidAirportCombination);
      } */

      
      // TODO: Set Transaction status to Validated.
      return duplicateCouponErrorMessage;
    }


    /// <summary>
    /// Gets the Awb attachments.
    /// </summary>
    /// <param name="attachmentIds">The attachment ids.</param>
    /// <returns></returns>
    public List<AwbAttachment> GetAwbRecordAttachments(List<Guid> attachmentIds)
    {
      return CargoAwbAttachmentRepository.Get(attachment => attachmentIds.Contains(attachment.Id)).ToList();
      // return new List<AwbAttachment>();
    }




    /// <summary>
    /// Adds the Awb attachment.
    /// </summary>
    /// <param name="attach">The attach.</param>
    /// <returns></returns>
    public AwbAttachment AddAwbAttachment(AwbAttachment attach)
    {
      CargoAwbAttachmentRepository.Add(attach);
      UnitOfWork.CommitDefault();
      //SCPID 85039 - IS Web Performance Feedback / Billing History & Correspondence / Other issues 
        //No need to select ,just return the object
      //attach = CargoAwbAttachmentRepository.Single(a => a.Id == attach.Id);
      return attach;
    }

    /// <summary>
    /// Gets the awb attachment details.
    /// </summary>
    /// <param name="attachmentId">The attachment id.</param>
    /// <returns></returns>
    public AwbAttachment GetAwbAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();
      var attachmentRecord = CargoAwbAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);
      return attachmentRecord;
    }

    /// <summary>
    /// Updates the billing memo attachment.
    /// </summary>
    /// <param name="attachments">The attachments.</param>
    /// <param name="parentId">The parent id.</param>
    /// <returns></returns>
    public IList<AwbAttachment> UpdateAwbAttachment(IList<Guid> attachments, Guid parentId)
    {
      
      var billingMemoAttachmentInDb = CargoAwbAttachmentRepository.Get(billingMemoAttachment => attachments.Contains(billingMemoAttachment.Id));

      foreach (var recordAttachment in billingMemoAttachmentInDb)
      {
        recordAttachment.ParentId = parentId;
        CargoAwbAttachmentRepository.Update(recordAttachment);
      }
      
      UnitOfWork.CommitDefault();

      return billingMemoAttachmentInDb.ToList();
    }

    /// <summary>
    /// Determines whether [is duplicate billing memo attachment file name] [the specified file name].
    /// </summary>
    /// <param name="fileName">Name of the file.</param>
    /// <param name="awbRecordId">The billing memo id.</param>
    /// <returns>
    ///   <c>true</c> if [is duplicate billing memo attachment file name] [the specified file name]; otherwise, <c>false</c>.
    /// </returns>
    public bool IsDuplicateAwbAttachmentFileName(string fileName, Guid awbRecordId)
    {
      return CargoAwbAttachmentRepository.GetCount(attachment => attachment.ParentId == awbRecordId && attachment.OriginalFileName.ToUpper() == fileName.ToUpper()) > 0;
    }

    #region Billing Memo

    /// <summary>
    /// Determines whether [is duplicate billing memo attachment file name] [the specified file name].
    /// </summary>
    /// <param name="fileName">Name of the file.</param>
    /// <param name="billingMemoId">The billing memo id.</param>
    /// <returns>
    ///   <c>true</c> if [is duplicate billing memo attachment file name] [the specified file name]; otherwise, <c>false</c>.
    /// </returns>
    public bool IsDuplicateBillingMemoAttachmentFileName(string fileName, Guid billingMemoId)
    {
      return BillingMemoAttachmentRepository.GetCount(attachment => attachment.ParentId == billingMemoId && attachment.OriginalFileName.ToUpper() == fileName.ToUpper()) > 0;
    }

    /// <summary>
    /// Adds the billing memo attachment.
    /// </summary>
    /// <param name="attach">The attach.</param>
    /// <returns></returns>
    public CargoBillingMemoAttachment AddBillingMemoAttachment(CargoBillingMemoAttachment attach)
    {
      BillingMemoAttachmentRepository.Add(attach);
      UnitOfWork.CommitDefault();
       //SCPID 85039 - IS Web Performance Feedback / Billing History & Correspondence / Other issues(AwbBillingAttachmentUpload)
      //attach = BillingMemoAttachmentRepository.Single(a => a.Id == attach.Id);
      return attach;
    }

    /// <summary>
    /// Gets the billing memo attachment details.
    /// </summary>
    /// <param name="attachmentId">The attachment id.</param>
    /// <returns></returns>
    public CargoBillingMemoAttachment GetBillingMemoAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();
      var attachmentRecord = BillingMemoAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);
      return attachmentRecord;
    }

    /// <summary>
    /// Get billing memo coupon record attachment details
    /// </summary>
    /// <param name="attachmentId">attachment id</param>
    /// <returns></returns>
    public BMAwbAttachment GetBillingMemoAwbAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();

      var attachmentRecord = BMAwbAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);

      return attachmentRecord;
    }

    /// <summary>
    /// Gets the billing memo awb count.
    /// </summary>
    /// <param name="billingMemoId">The billing memo id.</param>
    /// <returns></returns>
    public long GetBillingMemoAwbCount(string billingMemoId)
    {
      var billingMemoGuid = billingMemoId.ToGuid();
      return BMAwbRepository.GetCount(breakdownRecord => breakdownRecord.BillingMemoId == billingMemoGuid);
    }
    
    // SCP#391029: FW: CORRESPONDENCE_REF_NO equals "0" in PAX and Cargo
    /// <summary>
    /// Add new record in the billing memo list
    /// </summary>
    /// <param name="billingMemo"></param>
    /// <param name="isNullCorrRefNo"> To check user input is Null for Corr. Ref. No.</param>
    /// <returns></returns>
    public CargoBillingMemo AddBillingMemoRecord(CargoBillingMemo billingMemo, bool isNullCorrRefNo = false)
    {
      billingMemo.ReasonCode = billingMemo.ReasonCode.ToUpper();
      ValidateBillingMemo(billingMemo, null);
      if (isNullCorrRefNo)
      {
        billingMemo.CorrespondenceReferenceNumber = -1;
      }

      // CMP#673: Validation on Correspondence Reference Number in PAX/CGO Billing Memos
      if (!billingMemo.ReasonCode.Equals(ReasonCode6A) && !billingMemo.ReasonCode.Equals(ReasonCode6B) && billingMemo.CorrespondenceReferenceNumber >= 0)
      {
          throw new ISBusinessException(CargoErrorCodes.CorrRefNumberCannotBeProvidedForNon6Aor6Bbm);
      }
        
        BillingMemoRepository.Add(billingMemo);

      //billingMemo.ExpiryDatePeriod = expiryPeriod;

      UnitOfWork.CommitDefault();

      // Updates billing memo invoice total.
      CargoInvoiceRepository.UpdateCargoBMInvoiceTotal(billingMemo.InvoiceId, billingMemo.BillingCode, billingMemo.Id, billingMemo.LastUpdatedBy);

      //if (billingMemo.ReasonCode == ReasonCode6A || billingMemo.ReasonCode == ReasonCode6B)
      //{
      // Get expiry period.
    //  DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, billingMemo.Invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);
      // Update it in database.
      //CargoInvoiceRepository.UpdateExpiryDatePeriod(billingMemo.Id, (int)TransactionType.CargoBillingMemo, expiryPeriod);
      //}

      return billingMemo;
    }

    /// <summary>
    /// Updates the billing memo attachment.
    /// </summary>
    /// <param name="attachments">The attachments.</param>
    /// <param name="parentId">The parent id.</param>
    /// <returns></returns>
    public IList<CargoBillingMemoAttachment> UpdateBillingMemoAttachment(IList<Guid> attachments, Guid parentId)
    {
      //var attachmentIds = attachments.Select(att => att.Id);
      var billingMemoAttachmentInDb = BillingMemoAttachmentRepository.Get(billingMemoAttachment => attachments.Contains(billingMemoAttachment.Id));
      foreach (var recordAttachment in billingMemoAttachmentInDb)
      {
        recordAttachment.ParentId = parentId;
        BillingMemoAttachmentRepository.Update(recordAttachment);
      }
      UnitOfWork.CommitDefault();
      return billingMemoAttachmentInDb.ToList();
    }

    /// <summary>
    /// Validate Billing memo record.
    /// </summary>
    /// <param name="billingMemo">Billing memo record to be validated.</param>
    /// <param name="billingMemoInDb">The billing memo record in db.</param>
    /// <returns></returns>
    private void ValidateBillingMemo(CargoBillingMemo billingMemo, CargoBillingMemo billingMemoInDb)
    {
      var isUpdateOperation = false;

      if (billingMemoInDb != null)
      {
        isUpdateOperation = true;
      }

      //SCP85837: PAX CGO Sequence No
      // If value != 0, either Batch and Sequence number combination is invalid or Batch number is repeated 
      int invalidBatchSequenceNumber = CargoInvoiceRepository.IsValidBatchSequenceNo(billingMemo.InvoiceId, billingMemo.RecordSequenceWithinBatch, billingMemo.BatchSequenceNumber, billingMemo.BillingCode, billingMemo.Id);
      if (invalidBatchSequenceNumber != 0)
      {
          // If value == 1, Batch number is repeated between different source codes, else if value == 2, Batch and Sequence number combination is invalid  
          if (invalidBatchSequenceNumber == 1)
              throw new ISBusinessException(CargoErrorCodes.InvalidBatchNo);
          else
              throw new ISBusinessException(CargoErrorCodes.CgoBMInvalidBatchSequenceNo);
      }
      ////Validate  Batch Sequence No
      //if (!CargoInvoiceRepository.IsValidBatchSequenceNo(billingMemo.InvoiceId, billingMemo.RecordSequenceWithinBatch, billingMemo.BatchSequenceNumber, billingMemo.Id))
      //{
      //  throw new ISBusinessException(CargoErrorCodes.CgoBMInvalidBatchSequenceNo);
      //}

      //SCPID:122022 - Validate  Batch and Sequence No
      if (billingMemo.RecordSequenceWithinBatch <= 0 || billingMemo.BatchSequenceNumber <= 0)
      {
          throw new ISBusinessException(CargoErrorCodes.BatchRecordSequenceNoReq);
      }

      // Review: Check whether this validation is required.
      // Check whether net amount is positive for billing memo, else throw an exception. 
      if (billingMemo.NetBilledAmount < 0)
      {
        throw new ISBusinessException(CargoErrorCodes.CgoBMInvalidAmount);
      }

      //Review: Check whether this validation makes sense.
      //If no coupon breakdown exists and if Total VAT Amount Billed populated with a non-zero value, then BM-CM VAT Breakdown record needs to be present.
      var couponBreakdownCount = BMAwbRepository.GetCount(bmRecord => bmRecord.BillingMemoId == billingMemo.Id);
      if (couponBreakdownCount == 0 && billingMemo.BilledTotalVatAmount > 0)
      {
        if (billingMemo.BillingMemoVat.Count <= 0)
        {
          throw new ISBusinessException(CargoErrorCodes.CgoBillingMemoVatBreakdownRecordNotFound);
        }
      }

      var billingMemoInvoice = CargoInvoiceRepository.Single(id: billingMemo.InvoiceId);
      // Your billing period can not be greater than or equal to the Billing Memo Invoice billing period.
      if (!((billingMemoInvoice.BillingYear > billingMemo.YourInvoiceBillingYear) ||
        ((billingMemoInvoice.BillingYear == billingMemo.YourInvoiceBillingYear) && (billingMemoInvoice.BillingMonth > billingMemo.YourInvoiceBillingMonth)) ||
          ((billingMemoInvoice.BillingYear == billingMemo.YourInvoiceBillingYear) && (billingMemoInvoice.BillingMonth == billingMemo.YourInvoiceBillingMonth) && (billingMemoInvoice.BillingPeriod > billingMemo.YourInvoiceBillingPeriod))))
        throw new ISBusinessException(CargoErrorCodes.InvalidYourBillingPeriod);

      //// The ‘Correspondence Ref. No.’ has NOT been referred to in a previously successfully validated BM. 
      CheckDuplicateBillingMemoForCorr(billingMemo, billingMemoInvoice, isUpdateOperation);

      // Linking related - correspondence reference number validations. Required only for reason codes 6A and 6B.
      if (billingMemo.ReasonCode == ReasonCode6A || billingMemo.ReasonCode == ReasonCode6B)
      {
        ValidateCorrespondenceReference(billingMemo, isUpdateOperation, billingMemoInvoice);
      }

      //// Validates whether reason code exist in master table
      //// TODO: Reason Code validation need to be check for 6A, 6B. 
      if (!isUpdateOperation || CompareUtil.IsDirty(billingMemoInDb.ReasonCode, billingMemo.ReasonCode))
      {
        var transactionTypeId = billingMemo.ReasonCode == "6A"
                                  ? (int)TransactionType.CargoBillingMemoDueToAuthorityToBill
                                  : billingMemo.ReasonCode == "6B" ? (int)TransactionType.CargoBillingMemoDueToExpiry : (int)TransactionType.CargoBillingMemo;

        if (!ReferenceManager.IsValidReasonCode(billingMemo.ReasonCode, transactionTypeId))
        {
          throw new ISBusinessException(CargoErrorCodes.CgoInvalidReasonCode);
        }
      }

      // Validates Duplicate Billing Memo.
      if (IsDuplicateBillingMemo(billingMemoInDb, billingMemo, isUpdateOperation, billingMemoInvoice))
      {
        throw new ISBusinessException(CargoErrorCodes.CgoDuplicateBillingMemoFound);
      }

      TransactionType transactionType = TransactionType.CargoBillingMemo;
      if (billingMemo.ReasonCode == ReasonCode6A)
      {
        transactionType = TransactionType.CargoBillingMemoDueToAuthorityToBill;
      }
      else if (billingMemo.ReasonCode == ReasonCode6B)
      {
        transactionType = TransactionType.CargoBillingMemoDueToExpiry;
      }
    }

    /// <summary>
    /// Check if BM already exists for the given correspondence ref no.
    /// </summary>
    /// <param name="billingMemo"></param>
    /// <param name="billingMemoInvoice"></param>
    /// <param name="isUpdateOperation"></param>
    /// SCP186155 - Same BM ,RAm5.2.2.5
    private void CheckDuplicateBillingMemoForCorr(CargoBillingMemo billingMemo, CargoInvoice billingMemoInvoice, bool isUpdateOperation)
    {
      if (billingMemo.CorrespondenceReferenceNumber != 0)
      {
        //SCP186155 - Same BM ,RAm5.2.2.5
        //Desc: Check if BM against the corr already exists. Existing conditions on invoice status is relaxed now.
        //      Prior to code change invoice status was required to be 3,4,5 or 6. This is now changed to anything but 9.
        long billingMemoCount;
        if (!isUpdateOperation)
          billingMemoCount =
            BillingMemoRepository.GetCount(
              memo =>
              memo.CorrespondenceReferenceNumber == billingMemo.CorrespondenceReferenceNumber && memo.Invoice.BillingMemberId == billingMemoInvoice.BillingMemberId &&
              memo.Invoice.BilledMemberId == billingMemoInvoice.BilledMemberId &&
              !(memo.Invoice.InvoiceStatusId == (int)InvoiceStatusType.ErrorNonCorrectable &&
               memo.Invoice.ValidationStatusId == (int)InvoiceValidationStatus.Failed));
        else
          billingMemoCount =
            BillingMemoRepository.GetCount(
              memo =>
              memo.CorrespondenceReferenceNumber == billingMemo.CorrespondenceReferenceNumber && memo.Invoice.BillingMemberId == billingMemoInvoice.BillingMemberId &&
              memo.Invoice.BilledMemberId == billingMemoInvoice.BilledMemberId && memo.Id != billingMemo.Id &&
               !(memo.Invoice.InvoiceStatusId == (int)InvoiceStatusType.ErrorNonCorrectable &&
                memo.Invoice.ValidationStatusId == (int)InvoiceValidationStatus.Failed));

        if (billingMemoCount > 0) throw new ISBusinessException(CargoErrorCodes.CgoBMExistsForCorrespondence);
      }
    }

    /// <summary>
    /// Any Billing memo having the same Billing memo number has been twice billed in the same invoice,
    /// or in a previous invoice to the same airline will be considered as a duplicate.
    /// </summary>
    /// <param name="billingMemoInDb">The billing memo record in db.</param>
    /// <param name="billingMemo">The billing memo record.</param>
    /// <param name="isUpdateOperation">if set to <c>true</c> [is update operation].</param>
    /// <param name="invoice">The invoice.</param>
    /// <returns>
    /// 	<c>true</c> if [is duplicate billing memo] [the specified billing memo record in db]; otherwise, <c>false</c>.
    /// </returns>
    private bool IsDuplicateBillingMemo(CargoBillingMemo billingMemoInDb, CargoBillingMemo billingMemo, bool isUpdateOperation, CargoInvoice invoice)
    {
      if (!isUpdateOperation || (CompareUtil.IsDirty(billingMemoInDb.BillingMemoNumber, billingMemo.BillingMemoNumber)))
      {
        var duplicateBillingMemo = BillingMemoRepository.GetCargoBillingMemoDuplicateCount(billingMemo.BillingMemoNumber, invoice.BilledMemberId, invoice.BillingMemberId, invoice.BillingMonth, invoice.BillingYear, invoice.BillingPeriod);
        if (duplicateBillingMemo > 0)
        {
          return true;
        }
      }

      return false;
    }

    /// <summary>
    /// Any Billing memo having the same Credit memo number has been twice billed in the same invoice,
    /// or in a previous invoice to the same airline will be considered as a duplicate.
    /// </summary>
    /// <param name="creditMemoInDb">The credit memo record in db.</param>
    /// <param name="creditMemo">The credit memo record.</param>
    /// <param name="isUpdateOperation">if set to <c>true</c> [is update operation].</param>
    /// <param name="invoice">The invoice.</param>
    /// <returns>
    /// 	<c>true</c> if [is duplicate credit memo] [the specified credit memo record in db]; otherwise, <c>false</c>.
    /// </returns>
    private bool IsDuplicateCreditMemo(CargoCreditMemo creditMemoInDb, CargoCreditMemo creditMemo, bool isUpdateOperation, CargoInvoice invoice)
    {
      if (!isUpdateOperation || (CompareUtil.IsDirty(creditMemoInDb.CreditMemoNumber, creditMemo.CreditMemoNumber)))
      {
        var duplicateCreditMemo = CargoCreditMemoRepository.GetCreditMemoDuplicateCount(creditMemo.CreditMemoNumber, invoice.BilledMemberId, invoice.BillingMemberId, invoice.BillingMonth, invoice.BillingYear, invoice.BillingPeriod);
        if (duplicateCreditMemo > 0)
        {
          return true;
        }
      }

      return false;
    }

    /// <summary>
    /// Checks if the specified correspondence number exists in the database and is of a valid correspondence.
    /// </summary>
    /// <param name="billingMemo">Billing Memo whose correspondence reference number is to be validated.</param>
    /// <param name="isUpdateOperation">Flag indicating whether the operation is update kind of operation.</param>
    /// <param name="billingMemoInvoice">The billing memo invoice.</param>
    public void ValidateCorrespondenceReference(CargoBillingMemo billingMemo, bool isUpdateOperation, CargoInvoice billingMemoInvoice)
    {
        //SCP199693 - create BM and close correspondence at same time - related to Spira [IN:008756] [TC:082202]
        //Desc: No further action (Reply/close/init Duplicate BM) is possible as a Billing Memo refers to correspondence.
        //    In order to consider the latest stage corr. check on the substatus was removed. Prior to this change code used to 
        //    get corresp having status "Open" or "Expired" having sub status "Responded".
      var cargoCorrespondence = CargoCorrespondenceRepository.Get(correspondence =>
                                                                  correspondence.CorrespondenceNumber ==
                                                                  billingMemo.CorrespondenceReferenceNumber &&
                                                                  (correspondence.CorrespondenceStatusId ==
                                                                   (int) CorrespondenceStatus.Open ||
                                                                   correspondence.CorrespondenceStatusId ==
                                                                   (int) CorrespondenceStatus.Expired ||
                                                                   correspondence.CorrespondenceStatusId ==
                                                                   (int) CorrespondenceStatus.Closed)).OrderByDescending
        (correspondence => correspondence.CorrespondenceStage).FirstOrDefault();
      if (cargoCorrespondence == null)
      {
        throw new ISBusinessException(CargoErrorCodes.CgoBMReferenceCorrespondenceDoesNotExist);
      }

      if (cargoCorrespondence.CorrespondenceStatus == CorrespondenceStatus.Closed)
      {
        throw new ISBusinessException(CargoErrorCodes.CgoCorrespondenceStatusIsClosed);
      }

      var transactionType = TransactionType.CargoBillingMemo;

      if (billingMemo.ReasonCode == ReasonCode6A)
      {
        // The Billed Airline should have provided an Authority to Bill to the Billing Airline.
        if (!cargoCorrespondence.AuthorityToBill)
        {
          throw new ISBusinessException(CargoErrorCodes.AuthorityToBillNotSetForCorrespondence);
        }

        // The Billing Airline should be the recipient of the last correspondence and
        // the Billed Airline should be the respondent of the last correspondence.
        if (cargoCorrespondence.FromMemberId != billingMemoInvoice.BilledMemberId || cargoCorrespondence.ToMemberId != billingMemoInvoice.BillingMemberId
          || cargoCorrespondence.CorrespondenceStatusId != (int)CorrespondenceStatus.Open)
        {
          throw new ISBusinessException(CargoErrorCodes.CgoInvalidCorrespondenceMembers);
        }
        
        transactionType = TransactionType.CargoBillingMemoDueToAuthorityToBill;
      }
      else if (billingMemo.ReasonCode == ReasonCode6B)
      {
        // The Billing Airline should be the respondent of the last correspondence and
        // the Billed Airline should be the recipient of the last correspondence.
        if (cargoCorrespondence.FromMemberId != billingMemoInvoice.BillingMemberId || cargoCorrespondence.ToMemberId != billingMemoInvoice.BilledMemberId)
        {
          throw new ISBusinessException(CargoErrorCodes.CgoInvalidCorrespondenceMembers);
        }

        // The correspondence should be expired for the Billed Airline
        if (cargoCorrespondence.CorrespondenceStatus != CorrespondenceStatus.Expired)
        {
          throw new ISBusinessException(CargoErrorCodes.CgoCorrespondenceStatusNotExpired);
        }

        transactionType = TransactionType.CargoBillingMemoDueToExpiry;
      }

      if (cargoCorrespondence.BMExpiryPeriod.HasValue)
      {
          if (new DateTime(billingMemoInvoice.BillingYear, billingMemoInvoice.BillingMonth, billingMemoInvoice.BillingPeriod) > cargoCorrespondence.BMExpiryPeriod)
          {
              throw new ISBusinessException(ErrorCodes.TimeLimitExpiryForCorrespondence);
          }
      }
      else
      {
          /* CMP #624: ICH Rewrite-New SMI X 
          * Description: SMI X to be treated as SMI I (non bilateral) for time limit checks */
          /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like ICH */
          if (!ReferenceManager.IsSmiLikeBilateral(billingMemoInvoice.SettlementMethodId, false))
          {
              if (
                  !ReferenceManager.IsTransactionInTimeLimitMethodD(transactionType,
                                                                    billingMemoInvoice.SettlementMethodId,
                                                                    cargoCorrespondence.CorrespondenceDate))
              {
                  throw new ISBusinessException(CargoErrorCodes.CgoTimeLimitExpiryForCorrespondence);
              }
          }
          else
          {
              if (
                  !ReferenceManager.IsTransactionInTimeLimitMethodD1(transactionType, Convert.ToInt32(SMI.Bilateral),
                                                                     cargoCorrespondence.CorrespondenceDate))
              {
                  throw new ISBusinessException(CargoErrorCodes.CgoTimeLimitExpiryForCorrespondence);
              }
          }
      }

        /* CMP #624: ICH Rewrite-New SMI X 
     *  Description: SMI X checks 
     * billingMemoInvoice is the new invoice having BM in it. 
     * paxCorrespondence is correspondence. It has last stage rejection invoice id
     * Use it to get last stage rejection invoice SMI.
     * Then perform SMI checks
     */
      var lastStageRejectionInvoice = CargoInvoiceRepository.Single(id: cargoCorrespondence.InvoiceId);

      if (!ValidateSmiAfterLinking(billingMemoInvoice.SettlementMethodId, lastStageRejectionInvoice.SettlementMethodId))
      {
          if (billingMemoInvoice.SettlementMethodId == (int)SMI.IchSpecialAgreement)
          {
              /* New invoice is X but old is not. FRS Reference: 2.14,  New Validation #6 */
              throw new ISBusinessException(CargoErrorCodes.StandaloneBmInvoiceLinkingCheckForSmiX);
          }
          else
          {
              /* Old invoice is X and new is not. FRS Reference: 2.14,  New Validation #7 */
              throw new ISBusinessException(CargoErrorCodes.StandaloneBmInvLinkCheckForSmiX);
          }
      }

      //SCP219674 : InvalidAmountToBeSettled Validation
      #region Old Code For Validatation of CorrespondenceAmounttobeSettled : To be remove
     /* if (cargoCorrespondence.CurrencyId != null && billingMemoInvoice.ListingCurrencyId != null)
      {
        var exchangeRate = ReferenceManager.GetExchangeRate(billingMemoInvoice.ListingCurrencyId.Value,
                                                            (BillingCurrency)cargoCorrespondence.CurrencyId.Value,
                                                            billingMemoInvoice.BillingYear,
                                                            billingMemoInvoice.BillingMonth);

        var netAmountBilled = exchangeRate > 0 ? billingMemo.NetBilledAmount / Convert.ToDecimal(exchangeRate) : billingMemo.NetBilledAmount;

        if (ConvertUtil.Round(cargoCorrespondence.AmountToBeSettled, Constants.CgoDecimalPlaces) != ConvertUtil.Round(Convert.ToDecimal(netAmountBilled), Constants.CgoDecimalPlaces))
        {
          // Get Tolerance value for given ivoice for specified period
          var tolerance = CompareUtil.GetTolerance(BillingCategoryType.Cgo, billingMemoInvoice.ListingCurrencyId.Value, billingMemoInvoice, Constants.CgoDecimalPlaces);

          // If tolerance != null get difference value and compare, else throw an exception
          if(tolerance != null)
          {
            // Get difference value from amount to be settled and Billing memo billed value
            var differenceValue = ConvertUtil.Round(cargoCorrespondence.AmountToBeSettled, Constants.CgoDecimalPlaces) - ConvertUtil.Round(Convert.ToDecimal(netAmountBilled), Constants.CgoDecimalPlaces);
            // If above difference value is greater than tolerance summation value raise an exception
            if (Convert.ToDouble(Math.Abs(differenceValue)) > tolerance.SummationTolerance)
              throw new ISBusinessException(CargoErrorCodes.CgoInvalidAmountToBeSettled);
          }
          else
          {
            throw new ISBusinessException(CargoErrorCodes.CgoInvalidAmountToBeSettled);
          }
        }
      } */
      #endregion
      #region New Code for Validation of CorrespondenceAmounttobeSettled
      if (cargoCorrespondence.CurrencyId != null)
      {
        // CMP#624 : 2.10-Change#4 - Conditional validation of PAX/CGO 6A/6B BM amounts  
        CargoInvoice corrRmInvoice = null;
        if (billingMemoInvoice.SettlementMethodId == (int)SMI.IchSpecialAgreement)
        {
          corrRmInvoice = lastStageRejectionInvoice;
        }
        
        decimal netBilledAmount = billingMemo.NetBilledAmount.HasValue ? billingMemo.NetBilledAmount.Value : 0;
        var isValid = ReferenceManager.ValidateCorrespondenceAmounttobeSettled(billingMemoInvoice,
                                                                               ref netBilledAmount,
                                                                               cargoCorrespondence.CurrencyId.Value,
                                                                               cargoCorrespondence.AmountToBeSettled, corrRmInvoice);
        if (!isValid)
        {
          throw new ISBusinessException(CargoErrorCodes.CgoInvalidAmountToBeSettled);
        }
      }
      #endregion
      //Check if BM already exists for the given correspondence ref no.
      CheckDuplicateBillingMemoForCorr(billingMemo, billingMemoInvoice, true);  
    }

    /// <summary>
    /// Gets the billing memo record details.
    /// </summary>
    /// <param name="billingMemoRecordId">The billing memo record id.</param>
    /// <returns></returns>
    public CargoBillingMemo GetBillingMemoRecordDetails(string billingMemoRecordId)
    {
      var billingMemoRecordGuid = billingMemoRecordId.ToGuid();
      var billingMemoRecords = BillingMemoRepository.Single(billingMemoRecordGuid);
      return billingMemoRecords;
    }

    // SCP#391029: FW: CORRESPONDENCE_REF_NO equals "0" in PAX and Cargo
    /// <summary>
    /// Updates the billing memo record.
    /// </summary>
    /// <param name="billingMemo">The billing memo.</param>
    /// <param name="isNullCorrRefNo"> To check user input is Null for Corr. Ref. No.</param>
    /// <returns></returns>
    public CargoBillingMemo UpdateBillingMemoRecord(CargoBillingMemo billingMemo, bool isNullCorrRefNo = false)
    {
      //var billingMemoRecordInDb = BillingMemoRepository.Single(bm => bm.Id == billingMemo.Id);
      // Call replaced by load strategy
      var billingMemoRecordInDb = BillingMemoRepository.Single(billingMemo.Id);

      billingMemo.ReasonCode = billingMemo.ReasonCode.ToUpper();
      ValidateBillingMemo(billingMemo, billingMemoRecordInDb);
      
      if(isNullCorrRefNo)
      {
        billingMemo.CorrespondenceReferenceNumber = -1;
      }

      // CMP#673: Validation on Correspondence Reference Number in PAX/CGO Billing Memos
      if (!billingMemo.ReasonCode.Equals(ReasonCode6A) && !billingMemo.ReasonCode.Equals(ReasonCode6B) && billingMemo.CorrespondenceReferenceNumber >= 0)
      {
          throw new ISBusinessException(CargoErrorCodes.CorrRefNumberCannotBeProvidedForNon6Aor6Bbm);
      }

      var updatedbillingMemo = BillingMemoRepository.Update(billingMemo);

      //Update vat list along with Billing Memo Record
      var listToDeleteVat = billingMemoRecordInDb.BillingMemoVat.Where(vat => billingMemo.BillingMemoVat.Count(vatRecord => vatRecord.Id == vat.Id) == 0).ToList();

      foreach (var vat in billingMemo.BillingMemoVat.Where(vat => vat.Id.CompareTo(new Guid()) == 0))
      {
        BillingMemoVatRepository.Add(vat);
      }

      foreach (var billingMemoVat in listToDeleteVat)
      {
        BillingMemoVatRepository.Delete(billingMemoVat);
      }

      // Changes to update attachment breakdown records
      var listToDeleteAttachment = billingMemoRecordInDb.Attachments.Where(attachment => billingMemo.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0).ToList();

      var attachmentIdList = (from attachment in billingMemo.Attachments
                              where billingMemoRecordInDb.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0
                              select attachment.Id).ToList();

      var billingMemoAttachmentInDb = BillingMemoAttachmentRepository.Get(billingMemoAttachment => attachmentIdList.Contains(billingMemoAttachment.Id));
      foreach (var recordAttachment in billingMemoAttachmentInDb)
      {
        if (IsDuplicateBillingMemoAttachmentFileName(recordAttachment.OriginalFileName, billingMemo.Id))
        {
          throw new ISBusinessException(CargoErrorCodes.DuplicateFileName);
        }
        recordAttachment.ParentId = billingMemo.Id;
        BillingMemoAttachmentRepository.Update(recordAttachment);
      }

      foreach (var billingMemoAttachment in listToDeleteAttachment)
      {
        BillingMemoAttachmentRepository.Delete(billingMemoAttachment);
      }

      UnitOfWork.CommitDefault();

      // Updates billing memo invoice total.
      CargoInvoiceRepository.UpdateCargoBMInvoiceTotal(billingMemo.InvoiceId, billingMemo.BillingCode, billingMemo.Id, billingMemo.LastUpdatedBy);

      var billingMemoInvoice = CargoInvoiceRepository.Single(id: billingMemo.InvoiceId);

      // Get expiry period.
      //DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, billingMemoInvoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

      // Update it in database.
      //CargoInvoiceRepository.UpdateExpiryDatePeriod(billingMemo.Id, (int)TransactionType.CargoBillingMemo, expiryPeriod);

      return updatedbillingMemo;
    }

    ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
    //private void UpdateRejectionMemoExpiryDate(CargoRejectionMemo rejectionMemo)
    //{
    //  TransactionType transactionType;
    //  TransactionType currentTransactionType;
    //  switch (rejectionMemo.RejectionStage)
    //  {
    //    case 1:
    //      transactionType = TransactionType.CargoRejectionMemoStage2;
    //      currentTransactionType = TransactionType.CargoRejectionMemoStage1;
    //      break;
    //    case 2:
    //      transactionType = TransactionType.RejectionMemo3;
    //      currentTransactionType = TransactionType.CargoRejectionMemoStage2;
    //      break;
    //    case 3:
    //      transactionType = TransactionType.CargoCorrespondence;
    //      currentTransactionType = TransactionType.CargoRejectionMemoStage3;
    //      break;
    //    default:
    //      transactionType = TransactionType.CargoRejectionMemoStage2;
    //      currentTransactionType = TransactionType.CargoRejectionMemoStage1;
    //      break;
    //  }

    //  CargoInvoice rejectionMemoInvoice = rejectionMemo.Invoice;
    //  if (rejectionMemoInvoice == null)
    //    rejectionMemoInvoice = CargoInvoiceRepository.Single(id: rejectionMemo.InvoiceId);
    //  // Get expiry period of prime coupon.
    //  DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(transactionType, rejectionMemoInvoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

    //  // Update it in database.
    //  CargoInvoiceRepository.UpdateExpiryDatePeriod(rejectionMemo.Id, (int)currentTransactionType, expiryPeriod);
    //}

    /// <summary>
    /// Gets the credit memo attachments.
    /// </summary>
    /// <param name="attachmentIds">The attachment ids.</param>
    /// <returns></returns>
    public List<CargoBillingMemoAttachment> GetBillingMemoAttachments(List<Guid> attachmentIds)
    {
      return BillingMemoAttachmentRepository.Get(attachment => attachmentIds.Contains(attachment.Id)).ToList();
    }

    /// <summary>
    /// Gets a list of all billing memo records.
    /// </summary>
    /// <param name="invoiceId"></param>
    /// <returns></returns>
    public IList<CargoBillingMemo> GetBillingMemoList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var billingMemoList = BillingMemoRepository.Get(bm => bm.InvoiceId == invoiceGuid);

      var reasonCodes = billingMemoList.Select(rmRecord => rmRecord.ReasonCode.ToUpper());
      var reasonCodesfromDb = ReasonCodeRepository.Get(reasonCode => reasonCodes.Contains(reasonCode.Code.ToUpper())).ToList();

      if (reasonCodesfromDb.Count() > 0)
      {
        foreach (var billingMemoRecord in billingMemoList)
        {
          var record = billingMemoRecord;
          var transactionTypeId = record.ReasonCode == "6A"
                                    ? (int)TransactionType.CargoBillingMemoDueToAuthorityToBill
                                    : record.ReasonCode == "6B" ? (int)TransactionType.CargoBillingMemoDueToExpiry : (int)TransactionType.CargoBillingMemo;

          var reasonCodeObj = reasonCodesfromDb.Single(rCode => rCode.Code == record.ReasonCode && rCode.TransactionTypeId == transactionTypeId);

          billingMemoRecord.ReasonCodeDescription = reasonCodeObj != null ? reasonCodeObj.Description : string.Empty;
        }
      }
      billingMemoList.OrderBy(bm => bm.BatchSequenceNumber);
      return billingMemoList.ToList();
    }

    /// <summary>
    /// Delete billing Memo
    /// </summary>
    /// <param name="billingMemoRecordId"></param>
    /// <returns></returns>
    public bool DeleteBillingMemoRecord(string billingMemoRecordId)
    {
      var billingMemoRecordGuid = billingMemoRecordId.ToGuid();
      //var billingMemo = BillingMemoRepository.Single(bm => bm.Id == billingMemoRecordGuid);
      // Call replaced by load strategy
      var billingMemo = BillingMemoRepository.Single(billingMemoRecordGuid);

      if (billingMemo == null) return false;
      BillingMemoRepository.Delete(billingMemo);
      UnitOfWork.CommitDefault();

      // Update Billing Memo invoice total. 
      CargoInvoiceRepository.UpdateCargoBMInvoiceTotal(billingMemo.InvoiceId, billingMemo.BillingCode, billingMemo.Id, billingMemo.LastUpdatedBy, true);

      return true;
    }

    /// <summary>
    /// Deletes the billing memo awb record.
    /// </summary>
    /// <param name="awbRecordId">The awb record id.</param>
    /// <param name="billingMemoId">The billing memo id.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    public bool DeleteBillingMemoAwbRecord(string awbRecordId, out Guid billingMemoId, out Guid invoiceId)
    {
      var bmAwbRecordId = awbRecordId.ToGuid();
      //LoadStrategy call
      var awbRecord = BMAwbRepository.Single(bmAwbRecordId);
      if (awbRecord == null)
      {
        billingMemoId = new Guid();
        invoiceId = new Guid();
        return false;
      }

      var billingMemoRecord = awbRecord.BillingMemoRecord;
      billingMemoRecord.Invoice = CargoInvoiceRepository.Single(id: billingMemoRecord.InvoiceId);
      billingMemoId = awbRecord.BillingMemoId;
      invoiceId = awbRecord.BillingMemoRecord.InvoiceId;

      // Delete the BM AWB, re-sequence subsequent serial numbers and update invoice total.
      CargoInvoiceRepository.DeleteBillingMemoAwb(bmAwbRecordId);

      return true;
    }

    private void UpdateBillingMemoInvoiceTotal(CargoBillingMemoAwb awbRecord, bool isAwbDelete = false)
    {
      //var billingMemoRecord = BillingMemoRepository.Single(bmRecord => bmRecord.Id == billingMemoCouponBreakdownRecord.BillingMemoId);
      // Call replaced by Load strategy
      var billingMemoRecord = BillingMemoRepository.Single(awbRecord.BillingMemoId);
      CargoInvoiceRepository.UpdateCargoBMInvoiceTotal(billingMemoRecord.InvoiceId, billingMemoRecord.BillingCode, billingMemoRecord.Id, billingMemoRecord.LastUpdatedBy, isAwbDelete);
    }
    /// <summary>
    /// Gets the BM awb list.
    /// </summary>
    /// <param name="billingMemoId">The billing memo id.</param>
    /// <returns></returns>
    public IList<CargoBillingMemoAwb> GetBMAwbList(string billingMemoId)
    {
      var billingMemoGuid = billingMemoId.ToGuid();
      var bmAwblist = BMAwbRepository.Get(awb => awb.BillingMemoId == billingMemoGuid).ToList();
      return bmAwblist;
    }

    /// <summary>
    /// Adds the BM awb attachment.
    /// </summary>
    /// <param name="attach">The attach.</param>
    /// <returns></returns>
    public BMAwbAttachment AddBMAwbAttachment(BMAwbAttachment attach)
    {
      BMAwbAttachmentRepository.Add(attach);
      UnitOfWork.CommitDefault();
      attach = BMAwbAttachmentRepository.Single(a => a.Id == attach.Id);
      return attach;
    }

    /// <summary>
    /// Gets the BM awb attachment details.
    /// </summary>
    /// <param name="attachmentId">The attachment id.</param>
    /// <returns></returns>
    public BMAwbAttachment GetBMAwbAttachmentDetails(string attachmentId)
    {
      Guid attachmentGuid = attachmentId.ToGuid();
      var attachmentRecord = BMAwbAttachmentRepository.Single(attachment => attachment.Id == attachmentGuid);
      return attachmentRecord;
    }

    /// <summary>
    /// Gets the BM awb attachments.
    /// </summary>
    /// <param name="attachmentIds">The attachment ids.</param>
    /// <returns></returns>
    public List<BMAwbAttachment> GetBMAwbAttachments(List<Guid> attachmentIds)
    {
      return BMAwbAttachmentRepository.Get(attachment => attachmentIds.Contains(attachment.Id)).ToList();
    }

    /// <summary>
    /// Determines whether [is duplicate BM awb attachment file name] [the specified file name].
    /// </summary>
    /// <param name="fileName">Name of the file.</param>
    /// <param name="bmAwbId"></param>
    /// <returns>
    ///   <c>true</c> if [is duplicate BM awb attachment file name] [the specified file name]; otherwise, <c>false</c>.
    /// </returns>
    public bool IsDuplicateBMAwbAttachmentFileName(string fileName, Guid bmAwbId)
    {
      return BMAwbAttachmentRepository.GetCount(attachment => attachment.ParentId == bmAwbId && attachment.OriginalFileName.ToUpper() == fileName.ToUpper()) > 0;
    }

    /// <summary>
    /// Gets the B memo awb record details.
    /// </summary>
    /// <param name="bmAwbRecordId">The bm awb record id.</param>
    /// <returns></returns>
    public CargoBillingMemoAwb GetBMemoAwbRecordDetails(string bmAwbRecordId)
    {
      var bmAwbRecordGuid = bmAwbRecordId.ToGuid();
      var bmAwbRecords = BMAwbRepository.Single(bmAwbRecordGuid);
      return bmAwbRecords;
    }

    /// <summary>
    /// Adds the BM awb record.
    /// </summary>
    /// <param name="bmAwb">The bm awb.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <param name="duplicateErrorMessage">The duplicate error message.</param>
    /// <returns></returns>
    public CargoBillingMemoAwb AddBMAwbRecord(CargoBillingMemoAwb bmAwb, string invoiceId, out string duplicateErrorMessage)
    {
      if (!string.IsNullOrEmpty(bmAwb.ReasonCode)) bmAwb.ReasonCode = bmAwb.ReasonCode.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.CurrencyAdjustmentIndicator)) bmAwb.CurrencyAdjustmentIndicator = bmAwb.CurrencyAdjustmentIndicator.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.ConsignmentOriginId)) bmAwb.ConsignmentOriginId = bmAwb.ConsignmentOriginId.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.ConsignmentDestinationId)) bmAwb.ConsignmentDestinationId = bmAwb.ConsignmentDestinationId.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.CarriageFromId)) bmAwb.CarriageFromId = bmAwb.CarriageFromId.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.CarriageToId)) bmAwb.CarriageToId = bmAwb.CarriageToId.ToUpper();

      duplicateErrorMessage = ValidateBMAwb(bmAwb, null, invoiceId);
      if (!string.IsNullOrEmpty(duplicateErrorMessage))
      {
        bmAwb.ISValidationFlag = DuplicateValidationFlag;
      }
      bmAwb.BdSerialNumber = GetBMAwbSerialNo(bmAwb.BillingMemoId);
      BMAwbRepository.Add(bmAwb);
      UnitOfWork.CommitDefault();
      // Updates billing memo invoice total.
      UpdateBillingMemoInvoiceTotal(bmAwb);

      // Get expiry period.
      //DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, bmAwb.BillingMemoRecord.Invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

      // Update it in database.
      //CargoInvoiceRepository.UpdateExpiryDatePeriod(bmAwb.BillingMemoId, (int)TransactionType.CargoBillingMemo, expiryPeriod);
      return bmAwb;
    }

    /// <summary>
    /// Updates the BM awb record.
    /// </summary>
    /// <param name="bmAwb">The bm awb.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <param name="duplicateErrorMessage">The duplicate error message.</param>
    /// <returns></returns>
    public CargoBillingMemoAwb UpdateBMAwbRecord(CargoBillingMemoAwb bmAwb, string invoiceId, out string duplicateErrorMessage)
    {
      var billingMemoRecordInDb = BillingMemoRepository.Single(bm => bm.Id == bmAwb.Id);

      // Call replaced by load strategy
      var bmAwbRecordInDb = BMAwbRepository.Single(bmAwb.Id);
      if (!string.IsNullOrEmpty(bmAwb.ReasonCode)) bmAwb.ReasonCode = bmAwb.ReasonCode.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.CurrencyAdjustmentIndicator)) bmAwb.CurrencyAdjustmentIndicator = bmAwb.CurrencyAdjustmentIndicator.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.ConsignmentOriginId)) bmAwb.ConsignmentOriginId = bmAwb.ConsignmentOriginId.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.ConsignmentDestinationId)) bmAwb.ConsignmentDestinationId = bmAwb.ConsignmentDestinationId.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.CarriageFromId)) bmAwb.CarriageFromId = bmAwb.CarriageFromId.ToUpper();
      if (!string.IsNullOrEmpty(bmAwb.CarriageToId)) bmAwb.CarriageToId = bmAwb.CarriageToId.ToUpper();

      duplicateErrorMessage = ValidateBMAwb(bmAwb, bmAwbRecordInDb, invoiceId);
      if (!string.IsNullOrEmpty(duplicateErrorMessage))
      {
        bmAwb.ISValidationFlag = DuplicateValidationFlag;
      }
      //ValidateBillingMemo(billingMemo, billingMemoRecordInDb);
      var updatedBMAwb = BMAwbRepository.Update(bmAwb);

      var listToDelete = bmAwbRecordInDb.OtherCharges.Where(awbOtherCharge => bmAwb.OtherCharges.Count(otherCharge => otherCharge.Id == awbOtherCharge.Id) == 0).ToList();

      foreach (var otherCharge in bmAwb.OtherCharges.Where(otherCharge => otherCharge.Id.CompareTo(new Guid()) == 0))
      {
        BMAwbOtherChargeRepository.Add(otherCharge);
      }

      foreach (var otherCharge in listToDelete)
      {
        BMAwbOtherChargeRepository.Delete(otherCharge);
      }
      //Update vat list along with Billing Memo Record
      var listToDeleteVat = bmAwbRecordInDb.AwbVat.Where(vat => bmAwb.AwbVat.Count(vatRecord => vatRecord.Id == vat.Id) == 0).ToList();

      foreach (var vat in bmAwb.AwbVat.Where(vat => vat.Id.CompareTo(new Guid()) == 0))
      {
        BMAwbVatRepository.Add(vat);
      }

      foreach (var bmAwbVat in listToDeleteVat)
      {
        BMAwbVatRepository.Delete(bmAwbVat);
      }

      // Update prorate ladder.
      var listToDeleteProrateLadder = bmAwbRecordInDb.ProrateLadder.Where(prorateLadderDetailRecord => bmAwb.ProrateLadder.Count(prorateLadderDetail => prorateLadderDetail.Id == prorateLadderDetailRecord.Id) == 0).ToList();

      foreach (var prorateLadderDetail in bmAwb.ProrateLadder.Where(prorateLadderDetail => prorateLadderDetail.Id.CompareTo(new Guid()) == 0))
      {
        BMAwbProrateLadderDetailRepository.Add(prorateLadderDetail);
      }

      foreach (var prorateLadderDetail in listToDeleteProrateLadder)
      {
        BMAwbProrateLadderDetailRepository.Delete(prorateLadderDetail);
      }

      // Changes to update attachment breakdown records
      var listToDeleteAttachment = bmAwbRecordInDb.Attachments.Where(attachment => bmAwb.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0).ToList();

      var attachmentIdList = (from attachment in bmAwb.Attachments
                              where bmAwbRecordInDb.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0
                              select attachment.Id).ToList();

      var billingMemoAttachmentInDb = BMAwbAttachmentRepository.Get(billingMemoAttachment => attachmentIdList.Contains(billingMemoAttachment.Id));
      foreach (var recordAttachment in billingMemoAttachmentInDb)
      {
        if (IsDuplicateBMAwbAttachmentFileName(recordAttachment.OriginalFileName, bmAwb.Id))
        {
          throw new ISBusinessException(CargoErrorCodes.DuplicateFileName);
        }
        recordAttachment.ParentId = bmAwb.Id;
        BMAwbAttachmentRepository.Update(recordAttachment);
      }

      foreach (var bmAwbAttachment in listToDeleteAttachment)
      {
        BMAwbAttachmentRepository.Delete(bmAwbAttachment);
      }

      UnitOfWork.CommitDefault();

      // Updates billing memo invoice total.
      UpdateBillingMemoInvoiceTotal(bmAwb);
      bmAwb.BillingMemoRecord = billingMemoRecordInDb;

      Guid invoiceGuid = invoiceId.ToGuid();
      var billingMemoInvoice = CargoInvoiceRepository.Single(id: invoiceGuid);

      // Get expiry period.
      //DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, billingMemoInvoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

      // Update it in database.
      //CargoInvoiceRepository.UpdateExpiryDatePeriod(bmAwb.BillingMemoId, (int)TransactionType.CargoBillingMemo, expiryPeriod);

      return updatedBMAwb;
    }

    /// <summary>
    /// Gets the reason code list.
    /// </summary>
    /// <returns></returns>
    public IList<ReasonCode> GetReasonCodeListForBillingMemo()
    {
      var reasonCodes = ReasonCodeRepository.Get(reasonCode => reasonCode.IsActive && (reasonCode.TransactionTypeId == (int)TransactionType.CargoBillingMemo || reasonCode.TransactionTypeId == (int)TransactionType.CargoBillingMemoDueToAuthorityToBill || reasonCode.TransactionTypeId == (int)TransactionType.CargoBillingMemoDueToExpiry));

      return reasonCodes.ToList();
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="batchSeqNo"></param>
    /// <param name="invoiceNumber"></param>
    /// <returns></returns>
    public int GetAwbBatchRecSeqNumber(int batchSeqNo, string invoiceNumber)
    {
      return 0;
    }

    /// <summary>
    /// Updates the BM awb attachment.
    /// </summary>
    /// <param name="attachments">The attachments.</param>
    /// <param name="parentId">The parent id.</param>
    /// <returns></returns>
    public IList<BMAwbAttachment> UpdateBMAwbAttachment(IList<Guid> attachments, Guid parentId)
    {
      //var attachmentIds = attachments.Select(att => att.Id);
      var bmAwbAttachmentInDb = BMAwbAttachmentRepository.Get(billingMemoAttachment => attachments.Contains(billingMemoAttachment.Id));
      foreach (var recordAttachment in bmAwbAttachmentInDb)
      {
        recordAttachment.ParentId = parentId;
        BMAwbAttachmentRepository.Update(recordAttachment);
      }
      UnitOfWork.CommitDefault();
      return bmAwbAttachmentInDb.ToList();
    }

    /// <summary>
    /// Validates the BM awb.
    /// </summary>
    /// <param name="bmAwb">The bm awb.</param>
    /// <param name="bmAwbRecordInDb">The bm awb record in db.</param>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    private string ValidateBMAwb(CargoBillingMemoAwb bmAwb, CargoBillingMemoAwb bmAwbRecordInDb, string invoiceId)
    {

      var isUpdateOperation = false;
      var duplicateErrorMessage = string.Empty;
      //Check whether it's a update operation.
      if (bmAwbRecordInDb != null)
      {
        isUpdateOperation = true;
      }

      // If any of the header field values are given for prorate ladder, then atleast 1 detail record should be present.
      if (bmAwb.TotalProrateAmount != null || !string.IsNullOrEmpty(bmAwb.ProrateCalCurrencyId) || bmAwb.ProrateLadder.Count > 0)
      {
        if (bmAwb.ProrateLadder.Count == 0 || bmAwb.TotalProrateAmount == null || string.IsNullOrEmpty(bmAwb.ProrateCalCurrencyId))
        {
          throw new ISBusinessException(CargoErrorCodes.ProrateLadderRequired);
        }
      }

      // Vat Amount Billed is non-zero then Tax Breakdown record needs to be provided
      if (bmAwb.BilledVatAmount > 0 && bmAwb.AwbVat.Count <= 0)
      {
        double? ocVatAmount = bmAwb.OtherCharges.Sum(oc => oc.OtherChargeVatCalculatedAmount);
        double otherChargeVatCalculatedAmount = 0;
        if (ocVatAmount != null)
        {
          otherChargeVatCalculatedAmount = ConvertUtil.Round(ocVatAmount.Value, Constants.CgoDecimalPlaces);
        }
        if ((bmAwb.BilledVatAmount - otherChargeVatCalculatedAmount) != 0)
          throw new ISBusinessException(CargoErrorCodes.CgoBMAwbVatBreakdownRecordNotFound);
      }

      // get the parent Billing Memo to get the source code.
      //SCP85039: Changed call to get data from repository using Get() instead of earlier used Single()
      //var billingMemo = BillingMemoRepository.Single(bmAwb.BillingMemoId);
      var billingMemo = BillingMemoRepository.Get(x => x.Id == bmAwb.BillingMemoId).ToList().FirstOrDefault();      
      var transactionTypeId = billingMemo.ReasonCode == "6A"
                                   ? (int)TransactionType.CargoBillingMemoDueToAuthorityToBill
                                   : billingMemo.ReasonCode == "6B" ? (int)TransactionType.CargoBillingMemoDueToExpiry : (int)TransactionType.CargoBillingMemo;

      // Check if passed 'Currency Adjustment Indicator' is a valid currency code
      // For New coupon Record validation will be done 
      // For Update coupon Record if value CurrencyAdjustmentIndicator is updated then only validation will be done
      /* Logic Applied : 
       * Check for Currency Adjustment indicator only when
       * - entered value is not null and
       * - when value has changed during update operation
       */
      if ((!string.IsNullOrEmpty(bmAwb.CurrencyAdjustmentIndicator)) &&
          (isUpdateOperation ? CompareUtil.IsDirty(bmAwbRecordInDb.CurrencyAdjustmentIndicator, bmAwb.CurrencyAdjustmentIndicator) : true))
      {
        if (!ReferenceManager.IsValidCurrencyCode(bmAwb.CurrencyAdjustmentIndicator))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidCurrencyAdjustmentInd);
        }
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for BM AWB Prepaid.
      if (bmAwb.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        if (!string.IsNullOrEmpty(bmAwb.CarriageFromId) && !string.IsNullOrEmpty(bmAwb.CarriageToId) &&
            bmAwb.CarriageFromId.Trim().Equals(bmAwb.CarriageToId.Trim()))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidCarriageCombination);
        }
      }

      // Validate ConsignmentOriginId 
      if (!isUpdateOperation || CompareUtil.IsDirty(bmAwbRecordInDb.ConsignmentOriginId, bmAwb.ConsignmentOriginId))
      {
        if (!string.IsNullOrEmpty(bmAwb.ConsignmentOriginId)
          && !ReferenceManager.IsValidAirportCode(bmAwb.ConsignmentOriginId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidConsignmentOriginCode);
        }
      }

      // Validate ConsignmentDestinationId 
      if (!isUpdateOperation || CompareUtil.IsDirty(bmAwbRecordInDb.ConsignmentDestinationId, bmAwb.ConsignmentDestinationId))
      {
        if (!string.IsNullOrEmpty(bmAwb.ConsignmentDestinationId)
          && !ReferenceManager.IsValidAirportCode(bmAwb.ConsignmentDestinationId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidConsignmentDestinationCode);
        }
      }

      // ConsignmentOriginId and ConsignmentDestinationId should not be same.
      if (!string.IsNullOrEmpty(bmAwb.ConsignmentOriginId) &&
        !string.IsNullOrEmpty(bmAwb.ConsignmentDestinationId) &&
        bmAwb.ConsignmentOriginId.Trim().Equals(bmAwb.ConsignmentDestinationId.Trim()))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidOriginDestinationCombination);
      }

      // Either none or both Billed Weight and KG/LB Indicator should have values.
      if ((string.IsNullOrEmpty(bmAwb.KgLbIndicator) && bmAwb.BilledWeight.HasValue && bmAwb.BilledWeight.Value != 0) || (!string.IsNullOrEmpty(bmAwb.KgLbIndicator) && (!bmAwb.BilledWeight.HasValue || (bmAwb.BilledWeight.HasValue && bmAwb.BilledWeight.Value == 0))))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidBilledWeightKGLBIndicator);
      }

      if (!isUpdateOperation || CompareUtil.IsDirty(bmAwbRecordInDb.CarriageFromId, bmAwb.CarriageFromId))
      {
        if (!string.IsNullOrEmpty(bmAwb.CarriageFromId) && !ReferenceManager.IsValidAirportCode(bmAwb.CarriageFromId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidFromCarriageCode);
        }
      }

      if (!isUpdateOperation || CompareUtil.IsDirty(bmAwbRecordInDb.CarriageToId, bmAwb.CarriageToId))
      {
        if (!string.IsNullOrEmpty(bmAwb.CarriageToId) && !ReferenceManager.IsValidAirportCode(bmAwb.CarriageToId))
        {
          throw new ISBusinessException(CargoErrorCodes.InvalidToCarriageCode);
        }
      }

      if (!isUpdateOperation ||
       (CompareUtil.IsDirty(bmAwbRecordInDb.AwbSerialNumber, bmAwb.AwbSerialNumber) ||
       CompareUtil.IsDirty(bmAwbRecordInDb.AwbIssueingAirline, bmAwb.AwbIssueingAirline)))
      {
        // Duplicate check - Ticket Issuing Airline, Ticket/Document Number, Coupon No.: As per values provided in the dialog by the user.
        var invoiceGuid = invoiceId.ToGuid();

        //SCP85039: Changed call to get data from repository using Get() instead of earlier used Single()
        //var invoice = CargoInvoiceRepository.Single(id: invoiceGuid);
        var invoice = CargoInvoiceRepository.Get(inv => inv.Id == invoiceGuid).ToList().FirstOrDefault();
        DateTime billingDate;
        var billingYearToCompare = 0;
        var billingMonthToCompare = 0;

        if (invoice!=null && DateTime.TryParse(string.Format("{0}/{1}/{2}", invoice.BillingYear.ToString().PadLeft(2, '0'), invoice.BillingMonth.ToString().PadLeft(2, '0'), "01"), out billingDate))
        {
          var billingDateToCompare = billingDate.AddMonths(-12);
          billingYearToCompare = billingDateToCompare.Year;
          billingMonthToCompare = billingDateToCompare.Month;
        }

        long duplicateAwbCount = 0;
        if (!(bmAwb.PartShipmentIndicator == PartShipMentIndicatorP || bmAwb.CcaIndicator))
          duplicateAwbCount = BMAwbRepository.GetBMAwbRecordDuplicateCount(bmAwb.AwbSerialNumber,
                                                                            bmAwb.AwbIssueingAirline,
                                                                            invoice.BillingMemberId,
                                                                            invoice.BilledMemberId,
                                                                            billingYearToCompare,
                                                                            billingMonthToCompare, bmAwb.AwbBillingCode);

        //if ((isUpdateOperation && duplicateCouponCount > 1) || (!isUpdateOperation && duplicateCouponCount > 0))
        if (duplicateAwbCount > 0)
        {
          duplicateErrorMessage = string.Format(Messages.BMAwbDuplicateMessage, duplicateAwbCount);
        }
      }

      return duplicateErrorMessage;
    }

    /// <summary>
    /// Gets the BM awb prorate ladder detail list.
    /// </summary>
    /// <param name="bmAwbProrateLadderDetailId">The bm awb prorate ladder detail id.</param>
    /// <returns></returns>
    public IList<BMAwbProrateLadderDetail> GetBMAwbProrateLadderDetailList(Guid bmAwbProrateLadderDetailId)
    {
      var detailList = BMAwbProrateLadderDetailRepository.Get(p => p.ParentId == bmAwbProrateLadderDetailId).ToList();
      return detailList;
    }

    /// <summary>
    /// Adds the awb prorate ladder detail.
    /// </summary>
    /// <param name="bmAwbProrateLadderDetail">The bm awb prorate ladder detail.</param>
    /// <returns></returns>
    public BMAwbProrateLadderDetail AddAwbProrateLadderDetail(BMAwbProrateLadderDetail bmAwbProrateLadderDetail)
    {
      if (!string.IsNullOrEmpty(bmAwbProrateLadderDetail.ToSector)) bmAwbProrateLadderDetail.ToSector = bmAwbProrateLadderDetail.ToSector.ToUpper();
      if (!string.IsNullOrEmpty(bmAwbProrateLadderDetail.FromSector)) bmAwbProrateLadderDetail.FromSector = bmAwbProrateLadderDetail.FromSector.ToUpper();
      ValidateBMAwbProrateLadderDetail(bmAwbProrateLadderDetail);
      BMAwbProrateLadderDetailRepository.Add(bmAwbProrateLadderDetail);
      UnitOfWork.CommitDefault();
      return bmAwbProrateLadderDetail;
    }


    /// <summary>
    /// Deletes the awb prorate ladder detail record.
    /// </summary>
    /// <param name="prorateLadderDetailId">The prorate ladder detail id.</param>
    /// <param name="isParentdelete"></param>
    /// <param name="couponId"></param>
    /// <returns></returns>
    public bool DeleteAwbProrateLadderDetailRecord(string prorateLadderDetailId, out bool isParentdelete, out Guid couponId)
    {
      couponId = Guid.NewGuid();
      isParentdelete = false;
      var bmAwbprorateLadderDetailRecordId = prorateLadderDetailId.ToGuid();
      //LoadStrategy call
      var awbprorateLadderDetailRecord = BMAwbProrateLadderDetailRepository.Get(d => d.Id == bmAwbprorateLadderDetailRecordId).FirstOrDefault();
      if (awbprorateLadderDetailRecord != null)
      {

        BMAwbProrateLadderDetailRepository.Delete(awbprorateLadderDetailRecord);
        UnitOfWork.CommitDefault();
        var prorateLadderId = awbprorateLadderDetailRecord.ParentId;
        var detailList = GetBMAwbProrateLadderDetailList(prorateLadderId);
        return true;
      }
      else
      {
        return false;
      }
    }


    private void ValidateBMAwbProrateLadderDetail(BMAwbProrateLadderDetail bmAwbProrateLadderDetail)
    {
      // From Airport and To Airport should not be same.
      if (!string.IsNullOrEmpty(bmAwbProrateLadderDetail.FromSector) && !string.IsNullOrEmpty(bmAwbProrateLadderDetail.ToSector) &&
          bmAwbProrateLadderDetail.FromSector.Trim().Equals(bmAwbProrateLadderDetail.ToSector.Trim()))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidSectorCombination);
      }


      if (!string.IsNullOrEmpty(bmAwbProrateLadderDetail.FromSector) && !ReferenceManager.IsValidAirportCode(bmAwbProrateLadderDetail.FromSector))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidFromSectorCode);
      }


      if (!string.IsNullOrEmpty(bmAwbProrateLadderDetail.ToSector) && !ReferenceManager.IsValidAirportCode(bmAwbProrateLadderDetail.ToSector))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidToSectorCode);
      }
    }

    #endregion

    #region Billing History

    public IQueryable<CargoBillingHistorySearchResult> GetBillingHistorySearchResult(InvoiceSearchCriteria searchCriteria, CorrespondenceSearchCriteria correspondenceSearchCriteria)
    {
      var invoice = CargoInvoiceRepository.GetBillingHistorySearchResult(searchCriteria, correspondenceSearchCriteria);
      return invoice.AsQueryable();
    }

    public IQueryable<CargoBillingHistorySearchResult> GetBillingHistoryCorrSearchResult(CorrespondenceSearchCriteria correspondenceSearchCriteria)
    {
      var invoice = CargoInvoiceRepository.GetBillingHistoryCorrSearchResult(correspondenceSearchCriteria);
      return invoice.AsQueryable();
    }

    //SCP199693 - create BM and close correspondence at same time - related to Spira [IN:008756] [TC:082202]
    public CargoExistingBMTransactionDetails GetBillingMemosForCorrespondence(long correspondenceNumber, int billingMemberId)
    {
        var transactionDetails = new CargoExistingBMTransactionDetails();
      transactionDetails.Transactions = CGOInvoiceRepository.GetBillingMemosForCorrespondence(correspondenceNumber, billingMemberId);
      return transactionDetails;
    }

    public CargoAuditTrail GetBillingHistoryAuditTrail(string transactionId, string transactionType)
    {
      var transactionGuid = transactionId.ToGuid();

      var auditTrail = CGOInvoiceRepository.AuditSingle(transactionGuid, transactionType);

      return auditTrail;
    }
    #endregion

    #region Correspondence Trail Report

    public IQueryable<CorrespondenceTrailSearchResult> GetCorrespondenceTrailSearchResult(CorrespondenceTrailSearchCriteria correspondenceTrailSearchCriteria)
    {
      var correspondences = CargoInvoiceRepository.GetCorrespondenceTrailSearchResult(correspondenceTrailSearchCriteria);
      return correspondences.AsQueryable();
    }

    #endregion
    /// <summary>
    /// Updating an existing record.
    /// </summary>
    /// <param name="awbRecord">Coupon Record to update</param>
    /// <param name="duplicateCouponErrorMessage">The duplicate coupon error message.</param>
    /// <returns>Updated coupon record</returns>
    public AwbRecord UpdateAwbRecord(AwbRecord awbRecord, out string duplicateCouponErrorMessage)
    {
        var logRefId = Guid.NewGuid();
        var log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
                  BillingCategorys.Cargo.ToString(), "Stage 1: UpdateAwbRecord start", 0, logRefId.ToString());
        ReferenceManager.LogDebugData(log);

      // Replaced with LoadStrategy call
      var awbRecordInDb = CargoAwbRecordRepository.Single(awbRecord.Id);

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
                BillingCategorys.Cargo.ToString(), "Stage 2: CargoAwbRecordRepository.Single completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      //var couponRecordInDb = CouponRecordRepository.Single(coupon => coupon.Id == couponRecord.Id);
      awbRecord.ISValidationFlag = awbRecordInDb.ISValidationFlag;
      duplicateCouponErrorMessage = ValidateAirwayBill(awbRecord, awbRecord.InvoiceId.ToString(), awbRecordInDb);

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
            BillingCategorys.Cargo.ToString(), "Stage 3: ValidateAirwayBill completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      if (!string.IsNullOrEmpty(duplicateCouponErrorMessage))
      {
        awbRecord.ISValidationFlag = DuplicateValidationFlag;
      }

      var couponBreakdownRecord = CargoAwbRecordRepository.Update(awbRecord);

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
         BillingCategorys.Cargo.ToString(), "Stage 4: CargoAwbRecordRepository.Update completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);


      // Changes to update vat breakdown records
      var listToDeleteVat = awbRecordInDb.VatBreakdown.Where(vat => awbRecord.VatBreakdown.Count(vatRecord => vatRecord.Id == vat.Id) == 0).ToList();
      //below code added on 2.11.11
      var listToDeleteOt = awbRecordInDb.OtherChargeBreakdown.Where(otCharge => awbRecord.OtherChargeBreakdown.Count(otRecord => otRecord.Id == otCharge.Id) == 0).ToList();

      foreach (var vat in awbRecord.VatBreakdown.Where(vat => vat.Id.CompareTo(new Guid()) == 0))
      {
        AwbRecordVatRepository.Add(vat);
      }
      //below code added on 2.11.11
      foreach (var otch in awbRecord.OtherChargeBreakdown.Where(ot => ot.Id.CompareTo(new Guid()) == 0))
      {
        // AwbRecordVatRepository.Add(vat);
        AwbRecordOtRepository.Add(otch);
      }

      foreach (var couponRecordVat in listToDeleteVat)
      {
        AwbRecordVatRepository.Delete(couponRecordVat);
      }
      //below code added on 2.11.11
      foreach (var recordOt in listToDeleteOt)
      {
        AwbRecordOtRepository.Delete(recordOt);
      }
      //
      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
       BillingCategorys.Cargo.ToString(), "Stage 5: Before attachment breakdown", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);
      //
      // Changes to update attachment breakdown records
      var listToDeleteAttachment = awbRecordInDb.Attachments.Where(attachment => awbRecord.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0).ToList();

      var attachmentIdList = (from attachment in awbRecord.Attachments
                              where awbRecordInDb.Attachments.Count(attachmentRecord => attachmentRecord.Id == attachment.Id) == 0
                              select attachment.Id).ToList();
      //if (attachmentIdList.Count > 0)
      //{
      var awbRecordAttachmentInDb =
        CargoAwbAttachmentRepository.Get(couponAttachment => attachmentIdList.Contains(couponAttachment.Id));

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
     BillingCategorys.Cargo.ToString(), "Stage 6: awbRecordAttachmentInDb completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      foreach (var recordAttachment in awbRecordAttachmentInDb)
      {
        if (IsDuplicateAwbAttachmentFileName(recordAttachment.OriginalFileName, couponBreakdownRecord.Id))
        {
          throw new ISBusinessException(CargoErrorCodes.DuplicateFileName);
        }

        recordAttachment.ParentId = couponBreakdownRecord.Id;
        CargoAwbAttachmentRepository.Update(recordAttachment);
      }


      foreach (var couponRecordAttachment in listToDeleteAttachment)
      {
        CargoAwbAttachmentRepository.Delete(couponRecordAttachment);
      }
      // }
      UnitOfWork.CommitDefault();

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
   BillingCategorys.Cargo.ToString(), "Stage 7: CommitDefault completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      // Update prime invoice total
      CargoInvoiceRepository.UpdateAwbInvoiceTotal(awbRecord.InvoiceId, awbRecord.LastUpdatedBy, awbRecord.BillingCodeId, awbRecord.BatchSequenceNumber, awbRecord.RecordSequenceWithinBatch);
      
      //SCP85039:Commented below mention line not using anywhere
      //var invoice = CargoInvoiceRepository.Single(id: awbRecord.InvoiceId);

      // Get expiry period of prime coupon.
      //DateTime expiryPeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

      // Update it in database.
      // Transaction type is just required to update in the respective table. Since same table is used for both prepaid and charge collect, sending transaction type as Prepaid.
      //CargoInvoiceRepository.UpdateExpiryDatePeriod(awbRecord.Id, (int)TransactionType.CargoPrimePrepaid, expiryPeriod);

      log = ReferenceManager.GetDebugLog(DateTime.Now, "UpdateAwbRecord", this.ToString(),
BillingCategorys.Cargo.ToString(), "Stage 8: UpdateAwbRecord completed", 0, logRefId.ToString());
      ReferenceManager.LogDebugData(log);

      return couponBreakdownRecord;
    }

    /// <summary>
    /// Gets the awb prepaid billing record list.
    /// </summary>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    public IList<AwbRecord> GetAwbPrepaidBillingRecordList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var awbPrepaidBillingList = CargoAwbRecordRepository.Get(cr => cr.InvoiceId == invoiceGuid && cr.BillingCodeId == (int)BillingCode.AWBPrepaid);
      awbPrepaidBillingList.OrderBy(cr => cr.BatchSequenceNumber);
      return awbPrepaidBillingList.ToList();
    }

    /// <summary>
    /// Gets the awb charge collect billing record list.
    /// </summary>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    public IList<AwbRecord> GetAwbChargeCollectBillingRecordList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var awbPrepaidBillingList = CargoAwbRecordRepository.Get(cr => cr.InvoiceId == invoiceGuid && cr.BillingCodeId == (int)BillingCode.AWBChargeCollect);
      awbPrepaidBillingList.OrderBy(cr => cr.BatchSequenceNumber);
      return awbPrepaidBillingList.ToList();
    }

    /// <summary>
    /// Gets the awb record list.
    /// </summary>
    /// <param name="couponIdList">The coupon id list.</param>
    /// <returns></returns>
    public IList<AwbRecord> GetAwbRecordList(string[] couponIdList)
    {
      var couponList = new List<AwbRecord>();

      foreach (var couponId in couponIdList)
      {
        var couponGuid = couponId.ToGuid();
        // Replaced with LoadStrategy call
        couponList.Add(CargoAwbRecordRepository.Single(awbRecordId: couponGuid));
      }

      return couponList;
    }

    /// <summary>
    /// Deleting a awb record 
    /// </summary>
    /// <param name="awbRecordId"></param>
    /// <returns></returns>
    public bool DeleteAwbRecord(string awbRecordId)
    {
      var awbRecordGuid = awbRecordId.ToGuid();
      // Replaced with LoadStrategy call
      var awbBilling = CargoAwbRecordRepository.Single(awbRecordGuid);
      if (awbBilling == null) return false;
      CargoAwbRecordRepository.Delete(awbBilling);
      UnitOfWork.CommitDefault();
      // Update prime invoice total
      // CargoAwbRecordRepository.UpdateAwbInvoiceTotal(awbBilling.InvoiceId, awbBilling.LastUpdatedBy);
      CargoInvoiceRepository.UpdateAwbInvoiceTotal(awbBilling.InvoiceId, awbBilling.LastUpdatedBy, awbBilling.BillingCodeId, awbBilling.BatchSequenceNumber, awbBilling.RecordSequenceWithinBatch);

      return true;
    }

    /// <summary>
    /// Detail of specific awb record
    /// </summary>
    public AwbRecord GetAwbRecordDetails(string awbRecordId)
    {
      var awbRecordGuid = awbRecordId.ToGuid();

      // Replaced with LoadStrategy call
      var awbRecords = CargoAwbRecordRepository.Single(awbRecordGuid);
      awbRecords = JoinAwbSerialNumber(awbRecords);
      return awbRecords;
    }
    /// <summary>
    /// Seprates Awb serial Number and Checkdigit
    /// </summary>
    /// <param name="awbRecord"></param>
    /// <returns></returns>
    public AwbRecord SplitAwbSerialNumber(AwbRecord awbRecord)
    {
      if (awbRecord.AwbSerialNumber.ToString().Length >= 8)
      {
        var serialNumber = Convert.ToInt32(awbRecord.AwbSerialNumber.ToString().Substring(0, 7));
        var checkDigit = Convert.ToInt32(awbRecord.AwbSerialNumber.ToString().Substring(7, 1));
        awbRecord.AwbSerialNumber = serialNumber;
        awbRecord.AwbCheckDigit = checkDigit;
      }

      return awbRecord;
    }
    /// <summary>
    /// Combines Awb serial Number and Checkdigit
    /// </summary>
    /// <param name="awbRecord"></param>
    /// <returns></returns>
    public AwbRecord JoinAwbSerialNumber(AwbRecord awbRecord)
    {
      var serialNumber = awbRecord.AwbSerialNumber.ToString();
      var checkDigit = awbRecord.AwbCheckDigit.ToString();
      awbRecord.AwbSerialNumber = Convert.ToInt32(serialNumber + checkDigit);
      return awbRecord;
    }

    /// <summary>
    /// Add invoice level Vat
    /// </summary>
    /// <param name="vatList">The invoice total vat.</param>
    /// <returns></returns>
    public CargoInvoiceTotalVat AddInvoiceLevelVat(CargoInvoiceTotalVat vatList)
    {
      CargoInvoiceVatRepository.Add(vatList);
      //Update Invoice Status to open
      var invoice = CargoInvoiceRepository.Single(id: vatList.ParentId);
      invoice.InvoiceStatusId = (int)InvoiceStatusType.Open;
      CargoInvoiceRepository.Update(invoice);

      UnitOfWork.CommitDefault();
      return vatList;
    }

    /// <summary>
    /// Delete cargo invoice level Vat
    /// </summary>
    /// <param name="vatId"></param>
    /// <returns></returns>
    public bool DeleteInvoiceLevelVat(string vatId)
    {
      Guid vatGuid = vatId.ToGuid();
      CargoInvoiceTotalVat vatRecord = CargoInvoiceVatRepository.Single(vat => vat.Id == vatGuid);
      if (vatRecord == null) return false;
      CargoInvoiceVatRepository.Delete(vatRecord);

      var invoice = CargoInvoiceRepository.Single(id: vatRecord.ParentId);
      invoice.InvoiceStatusId = (int)InvoiceStatusType.Open;
      CargoInvoiceRepository.Update(invoice);

      UnitOfWork.CommitDefault();
      return true;
    }

    /// <summary>
    /// To get Invoice level VAT list
    /// </summary>
    /// <param name="invoiceId">invoice id for which vat list to be retrieved..</param>
    /// <returns>List of the invoice level Vat</returns>
    public IList<CargoInvoiceTotalVat> GetInvoiceLevelVatList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var invoiceTotalVatlist = CargoInvoiceTotalVatRepository.Get(invtotal => invtotal.ParentId == invoiceGuid).ToList();
      return invoiceTotalVatlist;
    }

    // DerivedVATDetails class is used temporarily.It will be replaced by InvoiceTotalVat class,
    // once InvoiceTotalVat class is used in Repository.
    public IList<DerivedVatDetails> GetInvoiceLevelDerivedVatList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      IList<DerivedVatDetails> derivedVatRecords = CargoInvoiceRepository.GetDerivedVatDetails(invoiceGuid);
      return derivedVatRecords;
    }

    /// <summary>
    /// Retrieves list of VAT types which are not applied in the invoice
    /// </summary>
    /// <param name="invoiceId">invoice id for which vat list to be retrieved.</param>
    /// <returns></returns>
    public IList<NonAppliedVatDetails> GetNonAppliedVatList(string invoiceId)
    {
      var nonAppliedVatList = CargoInvoiceRepository.GetNonAppliedVatDetails(invoiceId.ToGuid());
      return nonAppliedVatList;
    }
    /// <summary>
    /// Validate AwbSerialNumber 
    /// (if AwbSerialNumber Mod 7 == Checkdigit) then valid
    /// else in valid
    /// </summary>
    /// <param name="awbSerialNumber">AwbSerialNumber</param>
    /// <param name="checkDigit">checkDigit</param>
    /// <returns></returns>
    public bool ValidateAwbSerialNumber(int awbSerialNumber, int checkDigit)
    {
      var isValid = false;
      if (awbSerialNumber % 7 == checkDigit)
        isValid = true;
      return isValid;
    }
    /// <summary>
    /// Retrieve invoice subtotal
    /// </summary>
    /// <param name="invoiceId"></param>
    /// <returns></returns>
    public IList<BillingCodeSubTotal> GetSubTotalList(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var subTotalList = CargoBillingCodeSubTotalRepository.Get(sc => sc.InvoiceId == invoiceGuid).ToList();
      return subTotalList;
    }

    /// <summary>
    /// Gets the rejected transaction details.
    /// </summary>
    /// <param name="transactionIds">The transaction ids.</param>
    /// <returns></returns>
    public TransactionDetails GetRejectedTransactionDetails(string transactionIds)
    {
      string[] transactionIdAndType = transactionIds.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
      string memoId = null, couponIds = null;
      string couponGuid = null;
      var rejectedTransactionDetails = new TransactionDetails();
      if (transactionIdAndType[1] == "AWB Prepaid" || transactionIdAndType[1] == "AWB Charge Collect" || transactionIdAndType[1] == "AWB")
      {
        couponIds = transactionIdAndType[0];
        string[] coupons = couponIds.Split(new char[] { ',' });

        foreach (var coupon in coupons)
        {
          couponGuid = ConvertUtil.ConvertGuidToString(coupon.ToGuid()) + ',' + couponGuid;
        }
      }

      else if (transactionIdAndType[1] == "RM" || transactionIdAndType[1] == "Rejection Memo") memoId = ConvertUtil.ConvertGuidToString(transactionIdAndType[0].ToGuid());
      else return rejectedTransactionDetails; // For any other transaction type, validation is not needed.

      rejectedTransactionDetails.Transactions = CargoInvoiceRepository.GetRejectedTransactionDetails(memoId, couponGuid);

      return rejectedTransactionDetails;
    }

    /// <summary>
    /// Gets the invoices for billing history.
    /// </summary>
    /// <param name="billingCode">The billing code.</param>
    /// <param name="billedMemberId">The billed member id.</param>
    /// <param name="billingMemberId">The billing member id.</param>
    /// <param name="settlementMethodId">The settlement method id.</param>
    /// <returns></returns>
    public IQueryable<CargoInvoice> GetInvoicesForBillingHistory(int billingCode, int billedMemberId, int billingMemberId, int settlementMethodId)
    {
      var currentPeriod = CalendarManager.GetCurrentPeriodIfOpenOrPreviousAsCurrent(ClearingHouse.Ich);
      //var invoiceList = CargoInvoiceRepository.Get(invoice => invoice.BillingCode == billingCode && invoice.BilledMemberId == billedMemberId && invoice.BillingMemberId == billingMemberId && (invoice.InvoiceStatusId == (int)InvoiceStatusType.Open || invoice.InvoiceStatusId == (int)InvoiceStatusType.ReadyForSubmission) && invoice.BillingYear == currentPeriod.Year && invoice.BillingMonth == currentPeriod.Month && invoice.BillingPeriod == currentPeriod.Period && invoice.InvoiceTypeId != (int)InvoiceType.CreditNote && invoice.SettlementMethodId == settlementMethodId);
      //var invoiceList = CargoInvoiceRepository.Get(invoice => invoice.BillingCode == billingCode && invoice.BilledMemberId == billedMemberId && invoice.BillingMemberId == billingMemberId && (invoice.InvoiceStatusId == (int)InvoiceStatusType.Open || invoice.InvoiceStatusId == (int)InvoiceStatusType.ReadyForSubmission) && invoice.BillingYear == currentPeriod.Year && invoice.BillingMonth == currentPeriod.Month && invoice.BillingPeriod == currentPeriod.Period && invoice.InvoiceTypeId != (int)InvoiceType.CreditNote);
      //return invoiceList;

        /* CMP #624: ICH Rewrite-New SMI X
           * Description: SMI X transaction should be transacted by (rejected, BM) only by SMI X invoice and vice a versa.
           * Refer FRS Section 2.14 PAX/CGO IS-WEB Screens (Part 3) Change #9 and Change #11 */

        var invoiceList = ((int)SMI.IchSpecialAgreement == settlementMethodId)
                              ? CargoInvoiceRepository.Get(
                                  invoice =>
                                  invoice.BillingCode == billingCode && invoice.BilledMemberId == billedMemberId &&
                                  invoice.BillingMemberId == billingMemberId &&
                                  (invoice.InvoiceStatusId == (int)InvoiceStatusType.Open ||
                                   invoice.InvoiceStatusId == (int)InvoiceStatusType.ReadyForSubmission) &&
                                  invoice.BillingYear == currentPeriod.Year &&
                                  invoice.BillingMonth == currentPeriod.Month &&
                                  invoice.BillingPeriod == currentPeriod.Period &&
                                  invoice.InvoiceTypeId != (int)InvoiceType.CreditNote &&
                                  invoice.SettlementMethodId == (int)SMI.IchSpecialAgreement)
                              : CargoInvoiceRepository.Get(
                                  invoice =>
                                  invoice.BillingCode == billingCode && invoice.BilledMemberId == billedMemberId &&
                                  invoice.BillingMemberId == billingMemberId &&
                                  (invoice.InvoiceStatusId == (int)InvoiceStatusType.Open ||
                                   invoice.InvoiceStatusId == (int)InvoiceStatusType.ReadyForSubmission) &&
                                  invoice.BillingYear == currentPeriod.Year &&
                                  invoice.BillingMonth == currentPeriod.Month &&
                                  invoice.BillingPeriod == currentPeriod.Period &&
                                  invoice.InvoiceTypeId != (int)InvoiceType.CreditNote &&
                                  invoice.SettlementMethodId != (int)SMI.IchSpecialAgreement);
        return invoiceList;

    }

    /// <summary>
    /// Checks whether invoices are blocked due to some pending processes
    /// </summary>
    /// <param name="cgoInvoiceBases"></param>
    /// <returns></returns>
    public bool ValidateCgoInvoices(IEnumerable<InvoiceBase> cgoInvoiceBases)
    {
      return (from cgoInvoice in cgoInvoiceBases
              where
                cgoInvoice.InvoiceStatus == InvoiceStatusType.ReadyForBilling ||
                cgoInvoice.InvoiceStatus == InvoiceStatusType.Claimed
              select cgoInvoice).Count() <= 0;
    }

    /// <summary>
    /// Following method is used to Get SourceCode Vat total details to be displayed on Popup
    /// </summary>
    /// <param name="billingCodeSubVatTotalId">SourceCode Vat breakdown Id</param>
    /// <returns>SourceCode Vat breakdown record</returns>
    public List<CargoBillingCodeSubTotalVat> GetBillingCodeVatTotal(string billingCodeSubVatTotalId)
    {
      // Convert billingCodeSubVatTotalId Id to Guid
      var billingCodeTotalId = billingCodeSubVatTotalId.ToGuid();
      // Query repository to get record
      var sourceCodeVatTotalRecord = CargoBillingCodeSubTotalVatRepository.Get(sct => sct.ParentId == billingCodeTotalId).ToList();
      //var sourceCodeVatTotalRecord = CgoBillingCodeSubTotalVatRepository.GetBillingCodeVatTotals(billingCodeTotalId);
      //rejectedTransactionDetails.Transactions = CargoInvoiceRepository.GetRejectedTransactionDetails(memoId, couponGuid);
      // return Record
      return sourceCodeVatTotalRecord;
    }

    /// <summary>
    /// Determines whether [is billing memo invoice out side time limit] [the specified correspondence ref number].
    /// </summary>
    /// <param name="correspondenceRefNumber">The correspondence ref number.</param>
    /// <param name="authorityToBill">if set to true [authority to bill].</param>
    /// <param name="correspondenceStatusId">The correspondence status id.</param>
    /// <param name="correspondenceDate">The correspondence date.</param>
    /// <returns>
    /// true if [is billing memo invoice out side time limit] [the specified correspondence ref number]; otherwise, false.
    /// </returns>
    public bool IsBillingMemoInvoiceOutSideTimeLimit(string correspondenceRefNumber, bool authorityToBill, int correspondenceStatusId, DateTime correspondenceDate)
    {
      var isInsideTimeLimit = false;
      TransactionType transactionType = 0;

      var corrRefNo = Convert.ToInt64(correspondenceRefNumber);
      var cargoCorrespondence = CargoCorrespondenceRepository.Get(corr => corr.CorrespondenceNumber == corrRefNo && corr.CorrespondenceSubStatusId == (int)CorrespondenceSubStatus.Responded).OrderByDescending(correspondence => correspondence.CorrespondenceStage).
                                  FirstOrDefault();

      var billingMemoInvoice = CargoInvoiceRepository.Single(inv => inv.Id == cargoCorrespondence.InvoiceId);
      if (correspondenceStatusId == (int)CorrespondenceStatus.Expired)
        transactionType = TransactionType.CargoBillingMemoDueToExpiry;

      if (authorityToBill)
        transactionType = TransactionType.CargoBillingMemoDueToAuthorityToBill;

      //CMP#624 : 2.10 - Change#6 : Time Limits
      /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like ICH */
      if (!ReferenceManager.IsSmiLikeBilateral(billingMemoInvoice.SettlementMethodId, false))
      {
        isInsideTimeLimit = ReferenceManager.IsTransactionInTimeLimitMethodD(transactionType, billingMemoInvoice.SettlementMethodId, correspondenceDate);
      }
      else
      {
        isInsideTimeLimit = ReferenceManager.IsTransactionInTimeLimitMethodD1(transactionType, Convert.ToInt32(SMI.Bilateral), correspondenceDate);
      }

      return !isInsideTimeLimit;
    }

    /// <summary>
    /// Gets the RM awb prorate ladder detail list.
    /// </summary>
    /// <param name="rmAwbProrateLadderDetailId">The rm awb prorate ladder detail id.</param>
    /// <returns></returns>
    public IList<RMAwbProrateLadderDetail> GetRMAwbProrateLadderDetailList(Guid rmAwbProrateLadderDetailId)
    {
      var detailList = RMAwbProrateLadderDetailRepository.Get(p => p.ParentId == rmAwbProrateLadderDetailId).ToList();
      return detailList;
    }

    /// <summary>
    /// Adds the RM awb prorate ladder detail.
    /// </summary>
    /// <param name="rmAwbProrateLadderDetail">The rm awb prorate ladder detail.</param>
    /// <returns></returns>
    public RMAwbProrateLadderDetail AddRMAwbProrateLadderDetail(RMAwbProrateLadderDetail rmAwbProrateLadderDetail)
    {
      if (!string.IsNullOrEmpty(rmAwbProrateLadderDetail.ToSector)) rmAwbProrateLadderDetail.ToSector = rmAwbProrateLadderDetail.ToSector.ToUpper();
      if (!string.IsNullOrEmpty(rmAwbProrateLadderDetail.FromSector)) rmAwbProrateLadderDetail.FromSector = rmAwbProrateLadderDetail.FromSector.ToUpper();
      ValidateRMAwbProrateLadderDetail(rmAwbProrateLadderDetail);
      RMAwbProrateLadderDetailRepository.Add(rmAwbProrateLadderDetail);
      UnitOfWork.CommitDefault();
      return rmAwbProrateLadderDetail;
    }

    /// <summary>
    /// Deletes the RM awb prorate ladder detail record.
    /// </summary>
    /// <param name="prorateLadderDetailId">The prorate ladder detail id.</param>
    /// <param name="isParentdelete"></param>
    /// <param name="couponId"></param>
    /// <returns></returns>
    public bool DeleteRMAwbProrateLadderDetailRecord(string prorateLadderDetailId, out bool isParentdelete, out Guid couponId)
    {
      couponId = Guid.NewGuid();
      isParentdelete = false;
      var rmAwbprorateLadderDetailRecordId = prorateLadderDetailId.ToGuid();
      //LoadStrategy call
      var awbprorateLadderDetailRecord = RMAwbProrateLadderDetailRepository.Get(d => d.Id == rmAwbprorateLadderDetailRecordId).FirstOrDefault();
      if (awbprorateLadderDetailRecord != null)
      {

        RMAwbProrateLadderDetailRepository.Delete(awbprorateLadderDetailRecord);
        UnitOfWork.CommitDefault();
        var prorateLadderId = awbprorateLadderDetailRecord.ParentId;
        GetRMAwbProrateLadderDetailList(prorateLadderId);
        //if (detailList.Count == 0)
        //{
        //    DeleteAwbProrateLadderRecord(prorateLadderId.ToString(), out couponId);
        //    isParentdelete = true;
        //}
        // Update rejection memo invoice total. 
        //UpdateRejectionMemoInvoiceTotal(couponBreakdownRecord, true);
        return true;
      }
      return false;
    }

    /// <summary>
    /// Validates the RM awb prorate ladder detail.
    /// </summary>
    /// <param name="rmAwbProrateLadderDetail">The rm awb prorate ladder detail.</param>
    private void ValidateRMAwbProrateLadderDetail(RMAwbProrateLadderDetail rmAwbProrateLadderDetail)
    {

      // From Airport and To Airport should not be same.
      if (!string.IsNullOrEmpty(rmAwbProrateLadderDetail.FromSector) && !string.IsNullOrEmpty(rmAwbProrateLadderDetail.ToSector) &&
          rmAwbProrateLadderDetail.FromSector.Trim().Equals(rmAwbProrateLadderDetail.ToSector.Trim()))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidSectorCombination);
      }


      if (!string.IsNullOrEmpty(rmAwbProrateLadderDetail.FromSector) && !ReferenceManager.IsValidAirportCode(rmAwbProrateLadderDetail.FromSector))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidFromSectorCode);
      }


      if (!string.IsNullOrEmpty(rmAwbProrateLadderDetail.ToSector) && !ReferenceManager.IsValidAirportCode(rmAwbProrateLadderDetail.ToSector))
      {
        throw new ISBusinessException(CargoErrorCodes.InvalidToSectorCode);
      }
    }

    /// <summary>
    /// Gets the duplicate RM coupon count.
    /// </summary>
    /// <param name="awbRecord">The Air way bill record.</param>
    /// <param name="invoice">The invoice.</param>

    /// <param name="duplicateErrorMessage">The duplicate error message.</param>
    /// <returns></returns>
    private string GetDuplicateAwbCount(AwbRecord awbRecord, InvoiceBase invoice, string duplicateErrorMessage)
    {
      long duplicateAwbRecordCount = 0;
      if (!(awbRecord.PartShipmentIndicator == PartShipMentIndicatorP || awbRecord.CcaIndicator))
      {
        duplicateAwbRecordCount = CargoAwbRecordRepository.GetAwbRecordDuplicateCount(awbRecord.AwbSerialNumber,
                                                                                      awbRecord.AwbIssueingAirline,
                                                                                      invoice.BillingMemberId,
                                                                                      awbRecord.CarriageFromId,
                                                                                      awbRecord.CarriageToId,
                                                                                      awbRecord.AwbDate,
                                                                                      awbRecord.BillingCodeId);
      }

      if (duplicateAwbRecordCount > 0)
      {
        duplicateErrorMessage = string.Format(Messages.PrimeAWBDuplicateMessage, duplicateAwbRecordCount);
      }

      return duplicateErrorMessage;
    }

    /// <summary>
    /// Determines whether billed member migrated for specified billing month and period in invoice header.
    /// </summary>
    /// <param name="transactionType">Type of the transaction.</param>
    /// <param name="isXmlFileType">if set to true [is XML file type].</param>
    /// <param name="cargoConfiguration"></param>
    /// <param name="isBillingMember">if set to true [is billing member].</param>
    /// <returns>
    /// True if member migrated for the specified invoice header; otherwise, false.
    /// </returns>
    public bool IsMemberMigratedForLinkingTransaction(InvoiceBase invoice, CargoRejectionMemo rejectionMemoRecord, TransactionType transactionType, bool isXmlFileType, CargoConfiguration cargoConfiguration = null, bool isBillingMember = true)
    {

      var memberId = isBillingMember ? invoice.BillingMemberId : invoice.BilledMemberId;
      if (isBillingMember && (invoice.BillingMember == null || invoice.BillingMemberId == 0))
      {
        return true;
      }

      if (!isBillingMember && (invoice.BilledMember == null || invoice.BilledMemberId == 0))
      {
        return true;
      }

      cargoConfiguration = cargoConfiguration ?? MemberManager.GetCargoConfig(memberId);

      if (cargoConfiguration == null)
      {
        return false;
      }

      if (rejectionMemoRecord.YourInvoiceBillingMonth == 0 || rejectionMemoRecord.YourInvoiceBillingMonth > 12 || rejectionMemoRecord.YourInvoiceBillingYear == 0)
      {
        Logger.InfoFormat("Invalid your invoice billing month or year");
        return false;
      }
      //SCP#48125 : RM Linking.
      //SCP340428: Incorrect rejection memo
      var billingPeriod = new BillingPeriod(rejectionMemoRecord.YourInvoiceBillingYear, rejectionMemoRecord.YourInvoiceBillingMonth, rejectionMemoRecord.YourInvoiceBillingPeriod);
      DateTime? minumOfMigrationDate = null;

      switch (transactionType)
      {
        case TransactionType.CargoPrimeChargeCollect:
        case TransactionType.CargoPrimePrepaid:
          if (cargoConfiguration.PrimeBillingIsIdecMigratedDate.HasValue && cargoConfiguration.PrimeBillingIsIdecMigrationStatus == MigrationStatus.Certified)
          {
            minumOfMigrationDate = cargoConfiguration.PrimeBillingIsIdecMigratedDate;
          }

          if (cargoConfiguration.PrimeBillingIsxmlMigratedDate.HasValue && cargoConfiguration.PrimeBillingIsxmlMigrationStatus == MigrationStatus.Certified)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.PrimeBillingIsxmlMigratedDate ? minumOfMigrationDate : cargoConfiguration.PrimeBillingIsxmlMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.PrimeBillingIsxmlMigratedDate;
            }
          }

          if (cargoConfiguration.PrimeBillingIswebMigratedDate.HasValue)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.PrimeBillingIswebMigratedDate ? minumOfMigrationDate : cargoConfiguration.PrimeBillingIswebMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.PrimeBillingIswebMigratedDate;
            }
          }

          if (minumOfMigrationDate.HasValue && minumOfMigrationDate.Value.Year != 0 && minumOfMigrationDate.Value.Month != 0 && minumOfMigrationDate.Value.Day != 0)
          {
            var isMigrationPeriod = new BillingPeriod(minumOfMigrationDate.Value.Year, minumOfMigrationDate.Value.Month, minumOfMigrationDate.Value.Day);
            return (billingPeriod >= isMigrationPeriod);
          }
          break;
        case TransactionType.CargoRejectionMemoStage1:
          if (cargoConfiguration.RmIsIdecMigratedDate.HasValue && cargoConfiguration.RmIsIdecMigrationStatus == MigrationStatus.Certified)
          {
            minumOfMigrationDate = cargoConfiguration.RmIsIdecMigratedDate;
          }

          if (cargoConfiguration.RmIsXmlMigratedDate.HasValue && cargoConfiguration.RmIsXmlMigrationStatus == MigrationStatus.Certified)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.RmIsXmlMigratedDate ? minumOfMigrationDate : cargoConfiguration.RmIsXmlMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.RmIsXmlMigratedDate;
            }
          }

          if (cargoConfiguration.RmIswebMigratedDate.HasValue)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.RmIswebMigratedDate ? minumOfMigrationDate : cargoConfiguration.RmIswebMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.RmIswebMigratedDate;
            }
          }

          if (minumOfMigrationDate.HasValue && minumOfMigrationDate.Value.Year != 0 && minumOfMigrationDate.Value.Month != 0 && minumOfMigrationDate.Value.Day != 0)
          {
            var isMigrationPeriod = new BillingPeriod(minumOfMigrationDate.Value.Year, minumOfMigrationDate.Value.Month, minumOfMigrationDate.Value.Day);
            return (billingPeriod >= isMigrationPeriod);
          }
          break;
        case TransactionType.CargoBillingMemo:
          if (cargoConfiguration.BmIsIdecMigratedDate.HasValue && cargoConfiguration.BmIsIdecMigrationStatus == MigrationStatus.Certified)
          {
            minumOfMigrationDate = cargoConfiguration.BmIsIdecMigratedDate;
          }

          if (cargoConfiguration.BmIsXmlMigratedDate.HasValue && cargoConfiguration.BmIsXmlMigrationStatus == MigrationStatus.Certified)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.BmIsXmlMigratedDate ? minumOfMigrationDate : cargoConfiguration.BmIsXmlMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.BmIsXmlMigratedDate;
            }

          }
          if (cargoConfiguration.BmIswebMigratedDate.HasValue)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.BmIswebMigratedDate ? minumOfMigrationDate : cargoConfiguration.BmIswebMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.BmIswebMigratedDate;
            }
          }

          if (minumOfMigrationDate.HasValue && minumOfMigrationDate.Value.Year != 0 && minumOfMigrationDate.Value.Month != 0 && minumOfMigrationDate.Value.Day != 0)
          {
            var isMigrationPeriod = new BillingPeriod(minumOfMigrationDate.Value.Year, minumOfMigrationDate.Value.Month, minumOfMigrationDate.Value.Day);
            return (billingPeriod >= isMigrationPeriod);
          }
          break;
        case TransactionType.CargoCreditMemo:
          if (cargoConfiguration.CmIsIdecMigratedDate.HasValue && cargoConfiguration.CmIsIdecMigrationStatus == MigrationStatus.Certified)
          {
            minumOfMigrationDate = cargoConfiguration.CmIsIdecMigratedDate;
          }

          if (cargoConfiguration.CmIsXmlMigratedDate.HasValue && cargoConfiguration.CmIsXmlMigrationStatus == MigrationStatus.Certified)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.CmIsXmlMigratedDate ? minumOfMigrationDate : cargoConfiguration.CmIsXmlMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.CmIsXmlMigratedDate;
            }
          }
          if (cargoConfiguration.CmIswebMigratedDate.HasValue)
          {
            if (minumOfMigrationDate.HasValue)
              minumOfMigrationDate = minumOfMigrationDate < cargoConfiguration.CmIswebMigratedDate ? minumOfMigrationDate : cargoConfiguration.CmIswebMigratedDate;
            else
            {
              minumOfMigrationDate = cargoConfiguration.CmIswebMigratedDate;
            }
          }

          if (minumOfMigrationDate.HasValue && minumOfMigrationDate.Value.Year != 0 && minumOfMigrationDate.Value.Month != 0 && minumOfMigrationDate.Value.Day != 0)
          {
            var isMigrationPeriod = new BillingPeriod(minumOfMigrationDate.Value.Year, minumOfMigrationDate.Value.Month, minumOfMigrationDate.Value.Day);
            return (billingPeriod >= isMigrationPeriod);
          }
          break;
      }
      return false;
    }

    /// <summary>
    /// Determines whether billed member migrated for specified billing month and period in invoice header.
    /// </summary>
    /// <param name="invoice">The invoice.</param>
    /// <param name="transactionType">Type of the transaction.</param>
    /// <param name="isXmlFileType">if set to true [is XML file type].</param>
    /// <param name="cargoConfiguration"></param>
    /// <param name="isBillingMember">if set to true [is billing member].</param>
    /// <returns>
    /// True if member migrated for the specified invoice header; otherwise, false.
    /// </returns>
    public bool IsMemberMigratedForTransaction(InvoiceBase invoice, TransactionType transactionType, bool isXmlFileType, CargoConfiguration cargoConfiguration = null, bool isBillingMember = true)
    {
      var memberId = isBillingMember ? invoice.BillingMemberId : invoice.BilledMemberId;
      if (isBillingMember && (invoice.BillingMember == null || invoice.BillingMemberId == 0))
      {
        return true;
      }

      if (!isBillingMember && (invoice.BilledMember == null || invoice.BilledMemberId == 0))
      {
        return true;
      }

      cargoConfiguration = cargoConfiguration ?? MemberManager.GetCargoConfig(memberId);

      if (cargoConfiguration == null)
      {
        return false;
      }

      var billingPeriod = new BillingPeriod(invoice.BillingYear, invoice.BillingMonth, 1);

      switch (transactionType)
      {
        case TransactionType.CargoPrimeChargeCollect:
          if (isXmlFileType)
          {
            if (cargoConfiguration.PrimeBillingIsxmlMigratedDate.HasValue && cargoConfiguration.PrimeBillingIsxmlMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Year != 0 && cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Year, cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          else
          {
            if (cargoConfiguration.PrimeBillingIsIdecMigratedDate.HasValue && cargoConfiguration.PrimeBillingIsIdecMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Year != 0 && cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Year, cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          break;
        case TransactionType.CargoPrimePrepaid:
          if (isXmlFileType)
          {
            if (cargoConfiguration.PrimeBillingIsxmlMigratedDate.HasValue && cargoConfiguration.PrimeBillingIsxmlMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Year != 0 && cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Year, cargoConfiguration.PrimeBillingIsxmlMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          else
          {
            if (cargoConfiguration.PrimeBillingIsIdecMigratedDate.HasValue && cargoConfiguration.PrimeBillingIsIdecMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Year != 0 && cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Year, cargoConfiguration.PrimeBillingIsIdecMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          break;
        case TransactionType.CargoRejectionMemoStage1:
          if (isXmlFileType)
          {
            if (cargoConfiguration.RmIsXmlMigratedDate.HasValue && cargoConfiguration.RmIsXmlMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.RmIsXmlMigratedDate.Value.Year != 0 && cargoConfiguration.RmIsXmlMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.RmIsXmlMigratedDate.Value.Year, cargoConfiguration.RmIsXmlMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          else
          {
            if (cargoConfiguration.RmIsIdecMigratedDate.HasValue && cargoConfiguration.RmIsIdecMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.RmIsIdecMigratedDate.Value.Year != 0 && cargoConfiguration.RmIsIdecMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.RmIsIdecMigratedDate.Value.Year, cargoConfiguration.RmIsIdecMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          break;
        case TransactionType.CargoBillingMemo:
          if (isXmlFileType)
          {
            if (cargoConfiguration.BmIsXmlMigratedDate.HasValue && cargoConfiguration.BmIsXmlMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.BmIsXmlMigratedDate.Value.Year != 0 && cargoConfiguration.BmIsXmlMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.BmIsXmlMigratedDate.Value.Year, cargoConfiguration.BmIsXmlMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          else
          {
            if (cargoConfiguration.BmIsIdecMigratedDate.HasValue && cargoConfiguration.BmIsIdecMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.BmIsIdecMigratedDate.Value.Year != 0 && cargoConfiguration.BmIsIdecMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.BmIsIdecMigratedDate.Value.Year, cargoConfiguration.BmIsIdecMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          break;
        case TransactionType.CargoCreditMemo:
          if (isXmlFileType)
          {
            if (cargoConfiguration.CmIsXmlMigratedDate.HasValue && cargoConfiguration.CmIsXmlMigrationStatus == MigrationStatus.Certified)
            {
              if (cargoConfiguration.CmIsXmlMigratedDate.Value.Year != 0 && cargoConfiguration.CmIsXmlMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.CmIsXmlMigratedDate.Value.Year, cargoConfiguration.CmIsXmlMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          else
          {
            if (cargoConfiguration.CmIsIdecMigratedDate.HasValue && cargoConfiguration.CmIsIdecMigrationStatus == MigrationStatus.Certified && cargoConfiguration.CmIsIdecMigratedDate.HasValue)
            {
              if (cargoConfiguration.CmIsIdecMigratedDate.Value.Year != 0 && cargoConfiguration.CmIsIdecMigratedDate.Value.Month != 0)
              {
                var isIdecMigrationPeriod = new BillingPeriod(cargoConfiguration.CmIsIdecMigratedDate.Value.Year, cargoConfiguration.CmIsIdecMigratedDate.Value.Month, 1);
                return (billingPeriod >= isIdecMigrationPeriod);
              }
              return false;
            }
          }
          break;

      }
      return false;
    }

    /// <summary>
    /// Ignores the validation in migration period.
    /// </summary>
    /// <param name="invoice">The invoice.</param>
    /// <param name="rejectionMemoRecord"></param>
    /// <param name="transactionType">Type of the transaction.</param>
    /// <param name="cargoConfiguration"></param>
    /// <returns></returns>
    public bool IgnoreValidationInMigrationPeriod(CargoInvoice invoice, CargoRejectionMemo rejectionMemoRecord, TransactionType transactionType, CargoConfiguration cargoConfiguration = null)
    {
      // Get billing and billed member Cargo configuration. - To Check
      var cargoConfigBilledMember = cargoConfiguration ?? MemberManager.GetCargoConfig(invoice.BilledMemberId);

      var isXmlfileType = (invoice.SubmissionMethod == (Model.Enums.SubmissionMethod)SubmissionMethod.IsXml) ? true : false;
      //SCP#48125 : RM Linking.
      if (!IsMemberMigratedForLinkingTransaction(invoice, rejectionMemoRecord, transactionType, isXmlfileType, cargoConfigBilledMember, false))
      {
        return true;
      }
      if (ValidationCache.Instance.IgnoreValidationOnMigrationPeriod)
      {
        return true;
      }

      return false;
    }

    /// <summary>
    /// To validate the cargo invoice.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="issuingAirline"></param>
    /// <returns></returns>
    public bool ValidateParsedInvoice(CargoInvoice invoice, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName, DateTime fileSubmissionDate, IDictionary<string, bool> issuingAirline)
    {
      var stopWatch = new Stopwatch();
      var isValid = true;
      var isTransactionRecordsExistsInInvoice = false;
      var isAwbTransactionExistsInInvoice = false;
      var isRejectionMemoTransactionExistsInInvoice = false;
      var isBillingMemoTransactionExistsInInvoice = false;
      var isCreditMemoTransactionExistsInInvoice = false;
      const string billingDateFormat = "yyyyMM";
      
      //CMP496: Add reference data repository.
      var referenceDataRepository = Ioc.Resolve<IReferenceDataManager>(typeof(IReferenceDataManager));

      #region CMP #624: ICH Rewrite-New SMI X

      /*  Description: Detailed Validation of IS-IDEC and IS-XML Files (Part 1) */
      var billingMember = (invoice.BillingMemberId == 0 ? null : MemberManager.GetMemberDetails(invoice.BillingMemberId));
      var billedMember = (invoice.BilledMemberId == 0 ? null : MemberManager.GetMemberDetails(invoice.BilledMemberId));

      // Get Final Parent Details for SMI, Currency, Clearing House abd Suspended Flag validations
      var billingFinalParent = (invoice.BillingMemberId == 0 ? null : MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BillingMemberId)));
      var billedFinalParent = (invoice.BilledMemberId == 0 ? null : MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BilledMemberId)));

      // Assign final parent to invoice
      if (billingFinalParent != null && billingFinalParent.Id != billingMember.Id)
      {
          invoice.BillingParentMemberId = billingFinalParent.Id;
      }
      if (billedFinalParent != null && billedFinalParent.Id != billedMember.Id)
      {
          invoice.BilledParentMemberId = billedFinalParent.Id;
      }

      // Retrieve Ich Configurations of the members only once.
      if (billingMember != null)
          billingMember.IchConfiguration = MemberManager.GetIchConfig(billingMember.Id);

      if (billedMember != null)
          billedMember.IchConfiguration = GetIchConfiguration(billedMember.Id);

      //ID : 305133 - Suspension flag not set at SIS validation process for PAX and CGO
      if ((billedMember != null) && (billingMember != null))
      {
          // Update suspended flag according to ach/Ach configuration.
          if (ValidateSuspendedFlag(invoice, billingFinalParent, billedFinalParent))
          {
              invoice.SuspendedInvoiceFlag = true;
          }
      }



      /* CMP #624: ICH Rewrite-New SMI X 
       * Description: ICH Web Service is called when header is saved
       * Refer FRS Section: 2.8	Detailed Validation of IS-IDEC and IS-XML Files (Part 1). */
      bool smiXValidationsPhase1Result = ValidationBeforeSmiXWebServiceCall(invoice, exceptionDetailsList,
                                                                              invoice.InvoiceTypeId, fileSubmissionDate,
                                                                              fileName, billingFinalParent,
                                                                              billedFinalParent, false, null,
                                                                              invoice.BatchSequenceNumber,
                                                                              invoice.RecordSequenceWithinBatch);

      if (invoice.SettlementMethodId == (int)SMI.IchSpecialAgreement && invoice.GetSmiXPhase1ValidationStatus())
      {
          /* CMP #624: ICH Rewrite-New SMI X 
           * Description: ICH Web Service is called when header is saved
           * Refer FRS Section: 2.9	Detailed Validation of IS-IDEC and IS-XML Files (Part 2). */
          CallSmiXIchWebServiceAndHandleResponse(invoice, exceptionDetailsList, invoice.InvoiceTypeId,
                                                 fileSubmissionDate, fileName, false, invoice.BatchSequenceNumber,
                                                 invoice.RecordSequenceWithinBatch);
      }

      #endregion

      /* CMP #596: Length of Member Accounting Code to be Increased to 12 
       Desc: New validation #MF1. The Member should not be a Type B Member.
       Disallow Type B members to bill or be billed in Pax and Cgo billing categories.
       Ref: FRS Section 3.7 Table 26 Row 1, 2.
       
       As per CMP# 596 FRS document, the term ‘Type B Members’ means  - 
       new SIS Members having an Accounting Code with one of the following attributes:
       a.The length of the code is 3, but alpha characters appear in the second and/or third position (the first position may be alpha or numeric)
       b.The length of the code is 4, but alpha character(s) appear in any position (i.e. it is not purely 4 numeric)
       c.The length of the code ranges from 5 to 12
      */
      if (IsTypeBMember(billingMember.MemberCodeNumeric))
      {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml ? "OrganizationID" : "Billing Member", billingMember.MemberCodeNumeric, invoice,
          fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidMemberType, 
          ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }

      if ( billedMember!= null && IsTypeBMember(billedMember.MemberCodeNumeric))
      {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml ? "OrganizationID" : "Billing Member", billedMember.MemberCodeNumeric, invoice,
          fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidMemberType,
          ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);

          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }

      var regEx = new Regex("^[a-zA-Z0-9]+$");
      if (invoice.InvoiceNumber != null && !regEx.IsMatch(invoice.InvoiceNumber))
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Number", invoice.InvoiceNumber, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.SpecialCharactersAreNotAllowedInInvoiceNumber, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      bool isSystemMultilingual = ValidationCache.Instance != null ? ValidationCache.Instance.IsSystemMultilingual : SystemParameters.Instance.General.IsMultilingualAllowed;
      if (!string.IsNullOrEmpty(invoice.InvTemplateLanguage) && isSystemMultilingual)
      {
        if (ValidationCache.Instance.Languages != null)
        {
          if (!ValidationCache.Instance.Languages.ContainsKey(invoice.InvTemplateLanguage.Trim()))
          {
            //Add exception
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Template Language", invoice.InvTemplateLanguage, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidLanguage, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);

            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
        else
        {
          //Fetch from db
          var langaugesRepository = Ioc.Resolve<IRepository<Language>>();
          if (langaugesRepository.Single(i => i.Language_Code.ToLower().CompareTo(invoice.InvTemplateLanguage.ToLower()) == 0 && i.IsReqForPdf) == null)
          {
            //Add exception
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Template Language", invoice.InvTemplateLanguage, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidLanguage, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);

            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Billing period should be 01,02,03,04
      if (invoice.BillingPeriod <= 0 || invoice.BillingPeriod > 4)
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Period", invoice.BillingPeriod.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingPeriod, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validation For Invoice Type
      if ((invoice.InvoiceTypeId != (int)InvoiceType.CreditNote && invoice.InvoiceTypeId != (int)InvoiceType.Invoice))
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Type", invoice.InvoiceType.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidInvoiceType, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Get current billing period once per invoice and use it for validating all the records in invoice.
      var clearingHouseEnum = ReferenceManager.GetClearingHouseToFetchCurrentBillingPeriod(invoice.SettlementMethodId);

      BillingPeriod billingPeriod;
      var isValidBillingPeriod = false;

      try
      {
        billingPeriod = CalendarManager.GetBillingPeriod(fileSubmissionDate, clearingHouseEnum);
        isValidBillingPeriod = ValidateBillingPeriod(invoice, billingPeriod, clearingHouseEnum);
        if (!isValidBillingPeriod)
        {
          billingPeriod = CalendarManager.GetLastClosedBillingPeriod(fileSubmissionDate, clearingHouseEnum);
        }
      }
      catch (ISCalendarDataNotFoundException)
      {
        billingPeriod = CalendarManager.GetLastClosedBillingPeriod(fileSubmissionDate, clearingHouseEnum);
      }

      if (!isValidBillingPeriod)
      {
        if (ReferenceManager.IsValidSmiForLateSubmission(invoice.SettlementMethodId) && IsLateSubmission(invoice, fileSubmissionDate, clearingHouseEnum, billingPeriod))
        {
          invoice.ValidationStatus = InvoiceValidationStatus.ErrorPeriod;
          invoice.ValidationStatusId = (int)InvoiceValidationStatus.ErrorPeriod;
        }
        else
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Date", string.Format("{0}{1}{2}", invoice.BillingYear.ToString().PadLeft(2, '0'), invoice.BillingMonth.ToString().PadLeft(2, '0'), invoice.BillingPeriod.ToString().PadLeft(2, '0')), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingMonthAndPeriod, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Listing to Billing Rate should be 1 when Currency of Listing and Currency of Billing are the same.
      if (invoice.ListingCurrencyId.HasValue && invoice.BillingCurrencyId.HasValue)
      {
        if (invoice.ListingCurrencyId.Value == invoice.BillingCurrencyId.Value && Convert.ToDecimal(invoice.ExchangeRate) != 1)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Listing To Billing Rate", invoice.ExchangeRate.Value.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidListingToBillingRateForSameCurrencies, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      if (invoice.MemberLocationInformation.Count != 0)
      {
        stopWatch.Start();
       

        // Validate RefData 1,2 
        foreach (var memberLocationInfo in invoice.MemberLocationInformation)
        {
          if (!string.IsNullOrEmpty(memberLocationInfo.CountryCode))
          {
              if (!ReferenceManager.IsValidCountryCode(invoice, memberLocationInfo.CountryCode))
              {
                  var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                                     exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Member Location Country code",
                                                                                     memberLocationInfo.CountryCode,
                                                                                     invoice, fileName,
                                                                                     ErrorLevels.ErrorLevelInvoice,
                                                                                     CargoErrorCodes.InvalidCountryCode,
                                                                                     ErrorStatus.X,
                                                                                     invoice.BatchSequenceNumber,
                                                                                     invoice.RecordSequenceWithinBatch);
                  exceptionDetailsList.Add(validationExceptionDetail);
                  isValid = false;
              }
              else if(invoice.BilledReferenceDataSourceId == (int) ReferenceDataSource.Supplied ||
                   invoice.BillingReferenceDataSourceId == (int) ReferenceDataSource.Supplied)
              {
                  //CMP496: 1) If country code is valid then get country name from mst_country master.
                  //This validation only work when reference data is provide in file or supplied
                  //Replace it with file's country name
                  //This code will work for Both Billing and Billed
                  string countryName = ReferenceManager.GetCountryNameByCode(memberLocationInfo.CountryCode);
                  memberLocationInfo.CountryName = countryName;
              }
          }

           #region CMP496: 2) Validate Billed reference data if supplied in file.
          //This code will only work if billed location code equal to MISC. 
          if (!memberLocationInfo.IsBillingMember && invoice.BilledReferenceDataSourceId == (int)ReferenceDataSource.Supplied)
          {
              exceptionDetailsList = referenceDataRepository.ReferenceDataValidation(exceptionDetailsList,invoice.SubmissionMethod, fileName,
                                                                                      fileSubmissionDate, null, invoice);
              Logger.Info("Reference Data Validated ");
          } 
          #endregion
        }

        stopWatch.Stop();
        Logger.InfoFormat("Validating country code in member locations - time required: [{0}]", stopWatch.Elapsed);
      }

     
      #region CMP496: Comment, this validation not covering all possible cases.
      /*//Either both location should be provided or location information for both billing and billed member should be provided
      if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && invoice.MemberLocationInformation.Count == 2 && !string.IsNullOrWhiteSpace(invoice.BillingMemberLocationCode) && !string.IsNullOrWhiteSpace(invoice.BilledMemberLocationCode))
      {
        isValidBillingLocationCombination = true;
      }

      //Either both location should be provided or location information for both billing and billed member should be provided
      if (invoice.MemberLocationInformation.Count == 2 && string.IsNullOrWhiteSpace(invoice.BillingMemberLocationCode) && string.IsNullOrWhiteSpace(invoice.BilledMemberLocationCode))
      {
        isValidBillingLocationCombination = true;
      }

      if (invoice.MemberLocationInformation.Count == 0 && !string.IsNullOrWhiteSpace(invoice.BillingMemberLocationCode) && !string.IsNullOrWhiteSpace(invoice.BilledMemberLocationCode))
      {
        isValidBillingLocationCombination = true;
      }

      if (invoice.MemberLocationInformation.Count == 0 && string.IsNullOrWhiteSpace(invoice.BillingMemberLocationCode) && string.IsNullOrWhiteSpace(invoice.BilledMemberLocationCode))
      {
        isValidBillingLocationCombination = true;
      }*/
      #endregion

      #region CMP496: 3) Adding New validation to cover all scenarios using Matrix.
      var validBillingBilledLocationCombination =
            referenceDataRepository.IsValidBillingBilledCombination(invoice.MemberLocationInformation,
                                                                    invoice.SubmissionMethod,
                                                                    invoice.BillingMemberLocationCode,
                                                                    invoice.BilledMemberLocationCode,
                                                                    invoice.BillingReferenceDataSourceId,
                                                                    invoice.BilledReferenceDataSourceId);


      switch (validBillingBilledLocationCombination)
      {
          case ReferenceDataErrorType.General:
              {
                  var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                                     exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Member Location Code",
                                                                                     string.Empty, invoice, fileName,
                                                                                     ErrorLevels.ErrorLevelInvoice,
                                                                                     CargoErrorCodes.
                                                                                         InvalidInvoiceMemberLocationInformation,
                                                                                     ErrorStatus.X, invoice.BillingCode,
                                                                                     0, invoice.BatchSequenceNumber,
                                                                                     invoice.RecordSequenceWithinBatch);
                  exceptionDetailsList.Add(validationExceptionDetail);
                  isValid = false;
                  break;
              }
          case ReferenceDataErrorType.Specific:
              {
                  var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                                     exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Billing Member Location Code",
                                                                                     string.Empty, invoice, fileName,
                                                                                     ErrorLevels.ErrorLevelInvoice,
                                                                                     ErrorCodes.
                                                                                         InvalidInvoiceBillingMemberLocationInformation,
                                                                                     ErrorStatus.X, invoice.BillingCode,
                                                                                     0, invoice.BatchSequenceNumber,
                                                                                     invoice.RecordSequenceWithinBatch);
                  exceptionDetailsList.Add(validationExceptionDetail);
                  isValid = false;
                  break;
              }
          case ReferenceDataErrorType.Both:
              {
                  var validationExceptionDetail1 = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                                     exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Billing Member Location Code",
                                                                                     string.Empty, invoice, fileName,
                                                                                     ErrorLevels.ErrorLevelInvoice,
                                                                                     ErrorCodes.
                                                                                         InvalidInvoiceBillingMemberLocationInformation,
                                                                                     ErrorStatus.X, invoice.BillingCode,
                                                                                     0, invoice.BatchSequenceNumber,
                                                                                     invoice.RecordSequenceWithinBatch);
                  exceptionDetailsList.Add(validationExceptionDetail1);

                  var validationExceptionDetail2 = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                                     exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Member Location Code",
                                                                                     string.Empty, invoice, fileName,
                                                                                     ErrorLevels.ErrorLevelInvoice,
                                                                                     CargoErrorCodes.
                                                                                         InvalidInvoiceMemberLocationInformation,
                                                                                     ErrorStatus.X, invoice.BillingCode,
                                                                                     0, invoice.BatchSequenceNumber,
                                                                                     invoice.RecordSequenceWithinBatch);
                  exceptionDetailsList.Add(validationExceptionDetail2);
                  isValid = false;
                  break;
              }
      }

        #endregion

      var isValidBilledMemberLocation = true;
      var isValidBillingMemberLocation = true;

      // Calculate time required to check whether member locations are valid.
      stopWatch.Reset();
      stopWatch.Start();

      if (invoice.BillingMemberLocationCode != null && !string.IsNullOrEmpty(invoice.BillingMemberLocationCode.Trim()) && invoice.BillingMemberId != 0)
      {
        if (!MemberManager.IsValidMemberLocation(invoice.BillingMemberLocationCode, invoice.BillingMemberId))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member Location Code", invoice.BillingMemberLocationCode, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingMemberLocation, ErrorStatus.X, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
          isValidBillingMemberLocation = false;
        }
      }
      else
      {
        isValidBillingMemberLocation = false;
      }

      if (invoice.BilledMemberLocationCode != null && !string.IsNullOrEmpty(invoice.BilledMemberLocationCode.Trim()) && invoice.BilledMemberId != 0)
      {
        if (!MemberManager.IsValidMemberLocation(invoice.BilledMemberLocationCode, invoice.BilledMemberId))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billed Member Location Code", invoice.BilledMemberLocationCode, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBilledMemberLocation, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
          isValidBilledMemberLocation = false;
        }
      }
      else
      {
        isValidBilledMemberLocation = false;
      }

      stopWatch.Stop();
      Logger.InfoFormat("Validating member location codes - time required: [{0}]", stopWatch.Elapsed);

      #region CMP496: 4) Populate billed member location code. Due to new scenario introduced.
      //A new scenario introduce when billing location code not supplied and billing ref data, billed location code, billed ref data are passed.
      //Due this billed member location code is not populated in member location information table's column.
      if (invoice.BilledReferenceDataSourceId == (int)ReferenceDataSource.Supplied && isValidBilledMemberLocation)
      {
        invoice.MemberLocationInformation = referenceDataRepository.PopulateBilledMemberLocationCode(invoice.MemberLocationInformation,
                                                                   invoice.BilledMemberId,
                                                                   invoice.BilledMemberLocationCode,
                                                                   invoice.BilledReferenceDataSourceId,
                                                                   isValidBilledMemberLocation);
      }
      #endregion

      // Calculate time required to validate billing and listing currencies.
      stopWatch.Reset();
      stopWatch.Start();

      #region Code moved at the top as per CMP #624 requirement
      //var billingMember = (invoice.BillingMemberId == 0 ? null : MemberManager.GetMemberDetails(invoice.BillingMemberId));
      //var billedMember = (invoice.BilledMemberId == 0 ? null : MemberManager.GetMemberDetails(invoice.BilledMemberId));

      //// Get Final Parent Details for SMI, Currency, Clearing House abd Suspended Flag validations
      //var billingFinalParent = (invoice.BillingMemberId == 0 ? null : MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BillingMemberId)));
      //var billedFinalParent = (invoice.BilledMemberId == 0 ? null : MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BilledMemberId)));

      //// Assign final parent to invoice
      //if (billingFinalParent != null && billingFinalParent.Id != billingMember.Id)
      //{
      //  invoice.BillingParentMemberId = billingFinalParent.Id;
      //}
      //if (billedFinalParent != null && billedFinalParent.Id != billedMember.Id)
      //{
      //  invoice.BilledParentMemberId = billedFinalParent.Id;
      //}

      //// Retrieve Ich Configurations of the members only once.
      //if (billingMember != null)
      //  billingMember.IchConfiguration = MemberManager.GetIchConfig(billingMember.Id);

      //if (billedMember != null)
      //  billedMember.IchConfiguration = GetIchConfiguration(billedMember.Id);
      #endregion

      //Fixed Issue Id : 65713 
      // Retrieve Ich Configurations of the Parent members only.
      if (billingFinalParent != null)
          billingFinalParent.IchConfiguration = MemberManager.GetIchConfig(billingFinalParent.Id);
      if (billedFinalParent != null)
          billedFinalParent.IchConfiguration = GetIchConfiguration(billedFinalParent.Id);


      // Validate billing currency
      if (invoice.BillingCurrencyId != null)
      {
        if (!ReferenceManager.IsValidCurrency(invoice, invoice.BillingCurrencyId))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Currency", invoice.BillingCurrencyId.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingCurrency, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else
        {
          // Validate billing currency
          //CMP #553: ACH Requirement for Multiple Currency Handling-FRS-v1.1.doc
          if (billingMember != null && billedMember != null && !ValidateBillingCurrency(invoice, billingFinalParent, billedFinalParent, true, exceptionDetailsList, fileName, fileSubmissionDate))
          {
             isValid = false;
          }

            // SCP177435 - EXCHANGE RATE 
          if (billingMember != null && billedMember != null && !ValidateListingCurrency(invoice, billingFinalParent, billedFinalParent))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Listing Currency",
              invoice.ListingCurrencyId.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidListingCurrency, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Validation foe DS w r. to member profile.
      if (billingMember != null)
      {
        if ((!billingMember.DigitalSignApplication) && (invoice.DigitalSignatureRequired.Equals(DigitalSignatureRequired.Yes)))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Digital SignitureRequried", invoice.DigitalSignatureRequiredId.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidDigitalSignatureRequiredFlag, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate listing currency
      if (invoice.ListingCurrencyId != null)
      {
        if (!ReferenceManager.IsValidCurrency(invoice, invoice.ListingCurrencyId))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Listing Currency",
            invoice.ListingCurrencyId.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidListingCurrency, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        //else
        //{
        //  try
        //  {
        //    ValidateInvoiceListingCurrency(invoice);
        //  }
        //  catch (ISBusinessException)
        //  {

        //    var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Listing Currency",
        //      invoice.ListingCurrencyId.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidListingCurrency, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
        //    exceptionDetailsList.Add(validationExceptionDetail);
        //    isValid = false;
        //  }
        //}
      }

      stopWatch.Stop();
      Logger.InfoFormat("Validating billing and listing currencies - time required: [{0}]", stopWatch.Elapsed);

      // Calculate time required to validate duplicate invoice number.
      stopWatch.Reset();
      stopWatch.Start();

      // Validate duplication of invoice number
      if (invoice.InvoiceNumber != null)
      {
        string currentfilename = string.Empty;
        //478879 - Loading IS-XML from IS-WEB not working Duplicate File Issue.
        var filetime = fileSubmissionDate.ToString("yyyyMMddHHMMss");

        if (ParsedInvoiceList.ContainsKey(invoice.InvoiceNumber))
        {
          ParsedInvoiceList.TryGetValue(invoice.InvoiceNumber, out currentfilename);
        }

        var msg = string.Format("FN:{0},CFN:{1},FNE:{2},Inv:{3},BY:{4},MId:{5}", fileName + filetime, currentfilename, (!string.IsNullOrEmpty(currentfilename) && currentfilename.Equals(fileName + filetime)), invoice.InvoiceNumber.Trim(), invoice.BillingYear, invoice.BillingMemberId);
        Logger.InfoFormat("Validating duplicate invoice : [{0}]", msg);


        if (!ValidateInvoiceNumber(invoice.InvoiceNumber.Trim(), invoice.BillingYear, invoice.BillingMemberId) || (!string.IsNullOrEmpty(currentfilename) && currentfilename.Equals(fileName + filetime)))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Number", invoice.InvoiceNumber, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.DuplicateInvoiceFound, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else if (!ParsedInvoiceList.ContainsKey(invoice.InvoiceNumber))
        {
           ParsedInvoiceList.Add(invoice.InvoiceNumber, fileName + filetime);
        }
      }

      stopWatch.Stop();
      Logger.InfoFormat("Validating duplicate invoice number - time required: [{0}]", stopWatch.Elapsed);

      // Calculate time required to populate default locations.
      stopWatch.Reset();
      stopWatch.Start();

      if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec || invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml)
      {
        if (invoice.MemberLocationInformation.Count == 0)
        {
          if (invoice.BillingMemberLocationCode != null && invoice.BilledMemberLocationCode != null)
          {
            if (string.IsNullOrEmpty(invoice.BillingMemberLocationCode.Trim()) && string.IsNullOrEmpty(invoice.BilledMemberLocationCode.Trim()))
            {
              invoice.BillingMemberLocationCode = DefaultMemberLocationCode;
              invoice.BilledMemberLocationCode = DefaultMemberLocationCode;
              invoice.BillingReferenceDataSourceId = (int)ReferenceDataSource.Default;
              invoice.BilledReferenceDataSourceId = (int)ReferenceDataSource.Default;
            }
            else if (isValidBillingMemberLocation)
            {
              invoice.BillingReferenceDataSourceId = (int)ReferenceDataSource.AsPerLocation;
            }
            else if (string.IsNullOrEmpty(invoice.BillingMemberLocationCode.Trim()))
            {
                invoice.BillingMemberLocationCode = DefaultMemberLocationCode;
                invoice.BillingReferenceDataSourceId = (int) ReferenceDataSource.Default;
            }
            
            if (isValidBilledMemberLocation)
            {
                invoice.BilledReferenceDataSourceId = (int)ReferenceDataSource.AsPerLocation;
            }
            else if (string.IsNullOrEmpty(invoice.BilledMemberLocationCode.Trim()))
            {
                invoice.BilledMemberLocationCode = DefaultMemberLocationCode;
                invoice.BilledReferenceDataSourceId = (int)ReferenceDataSource.Default;
            }

              // Populate billing member location information from member's location table.
            var billingMemberLocationInformation = new MemberLocationInformation { IsBillingMember = true, Id = Guid.NewGuid() };
            if (PopulateDefaultLocation(invoice.BillingMemberId, billingMemberLocationInformation, invoice.BillingMemberLocationCode, invoice))
            {
              invoice.MemberLocationInformation.Add(billingMemberLocationInformation);
            }
            // Populate billed member location information from member's location table.
            var billedMemberLocationInformation = new MemberLocationInformation { IsBillingMember = false, Id = Guid.NewGuid() };
            if (PopulateDefaultLocation(invoice.BilledMemberId, billedMemberLocationInformation, invoice.BilledMemberLocationCode))
            {
              invoice.MemberLocationInformation.Add(billedMemberLocationInformation);
            }
          }
        }
        else if (invoice.MemberLocationInformation.Count == 2 && string.IsNullOrWhiteSpace(invoice.LegalText))
        {
          var memberManager = Ioc.Resolve<IMemberManager>(typeof(IMemberManager));
          var eBillingConfig = memberManager.GetEbillingConfig(invoice.BillingMemberId);
          invoice.LegalText = eBillingConfig != null && eBillingConfig.LegalText != null ? eBillingConfig.LegalText.Trim().Replace("\r", "").Replace("\n", "") : string.Empty;
          foreach (MemberLocationInformation memLoc in invoice.MemberLocationInformation)
          {
            if (memLoc.IsBillingMember)
            {
              memLoc.LegalText = invoice.LegalText;
            }
          }
        }
        else
        {
          foreach (MemberLocationInformation memLoc in invoice.MemberLocationInformation)
          {
            if (memLoc.IsBillingMember)
            {
              memLoc.LegalText = invoice.LegalText;
            }
          }
        }
      }

      stopWatch.Stop();
      Logger.InfoFormat("Populating default locations - time required: [{0}]", stopWatch.Elapsed);

      // Calculate time required to validate billing and and billed member.
      stopWatch.Reset();
      stopWatch.Start();

      // Validate settlement method
      if (billingMember != null && billedMember != null)
      {
        // Make sure billing and billed member are not the same.
        if (invoice.BilledMemberId == invoice.BillingMemberId)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", string.Format("{0}-{1}", invoice.BillingMember.MemberCodeNumeric, invoice.BilledMember.MemberCodeNumeric), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.SameBillingAndBilledMember, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        #region CMP #624: ICH Rewrite-New SMI X 
        if (invoice.SettlementMethodId != (int)SMI.IchSpecialAgreement)
        {
          //To Check
          if (!ValidatePaxAndCargoSettlementMethod(invoice, billingFinalParent, billedFinalParent, invoice.InvoiceTypeId))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                               exceptionDetailsList.Count() + 1,
                                                                               fileSubmissionDate,
                                                                               "Settlement Method",
                                                                               invoice.SettlementMethodDisplayText,
                                                                               invoice,
                                                                               fileName,
                                                                               ErrorLevels.ErrorLevelInvoice,
                                                                               CargoErrorCodes.InvalidSettlementMethod,
                                                                               ErrorStatus.X,
                                                                               invoice.BillingCode,
                                                                               0,
                                                                               invoice.BatchSequenceNumber,
                                                                               invoice.RecordSequenceWithinBatch);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          else //CMP602
          {
            SetViewableByClearingHouse(invoice);
          }
        }

        #endregion

        bool isCreditorBlocked;
        bool isDebitorBlocked;
        bool isCGrpBlocked;
        bool isDGrpBlocked;
        //BlockingRulesRepository.ValidateBlockingRules(invoice.BillingMemberId, invoice.BilledMemberId, BillingCategoryType.Cgo, smiValue, billingZoneId, billedZoneId, out isCreditorBlocked, out isDebitorBlocked, out isCGrpBlocked, out isDGrpBlocked);
            
        //SCP164383: Blocking Rule Failed
        //Desc: Hooking a call to centralized code for blocking rule validation
        ValidationForBlockedAirline(invoice.BillingMemberId, invoice.BilledMemberId, (SMI)invoice.InvoiceSmi,
						BillingCategoryType.Cgo, out isCreditorBlocked, out isDebitorBlocked,
						out isCGrpBlocked, out isDGrpBlocked);

            
        // Blocked by Creditor
        if (isCreditorBlocked)
        {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, string.Empty, string.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingToMember, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch, string.Empty);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }
        // Blocked by Debtor
        if (isDebitorBlocked)
        {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, string.Empty, string.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingFromMember, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch, string.Empty);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

        //Validate BlockBy Group Rule
        if (isCGrpBlocked)
        {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, string.Empty, string.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingToMemberGroup, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch, string.Empty);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

        if (isDGrpBlocked)
        {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, string.Empty, string.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingFromMemberGroup, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch, string.Empty);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

        //Billing member status should be not be 'Basic', 'Restricted','Terminated'
        if (!ValidateBillingMembershipStatus(billingMember))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", invoice.BillingMember.MemberCodeNumeric, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBillingMemberStatus, ErrorStatus.X, invoice.BillingCode);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Billed member status should be not be 'Terminated'
        if (!ValidateBilledMemberStatus(billedMember))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billed Member", invoice.BilledMember.MemberCodeNumeric, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidBilledMemberStatus, ErrorStatus.X, invoice.BillingCode);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      foreach (var meberLocationinfo in invoice.MemberLocationInformation)
      {
        if (meberLocationinfo.OrganizationDesignator != null)
        {
          if (meberLocationinfo.IsBillingMember)
          {
            if (billingMember != null && !meberLocationinfo.OrganizationDesignator.Equals(billingMember.MemberCodeAlpha))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member Organization Designator", meberLocationinfo.OrganizationDesignator, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidOrganizationDesignator, ErrorStatus.X, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
          else
          {
            if (billedMember != null && !meberLocationinfo.OrganizationDesignator.Equals(billedMember.MemberCodeAlpha))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billed Member Organization Designator", meberLocationinfo.OrganizationDesignator, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidOrganizationDesignator, ErrorStatus.X, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }
      }

      stopWatch.Stop();
      Logger.InfoFormat("Validating billing and billed member information - time required: [{0}]", stopWatch.Elapsed);

      // Calculate time required to validate invoice date.
      stopWatch.Reset();
      stopWatch.Start();

      // Validate invoice Date 
      if (!ValidateParsedInvoiceDate(invoice.InvoiceDate, billingPeriod))
      {
        if (!IsLateSubmission(invoice, invoice.InvoiceDate, clearingHouseEnum, billingPeriod))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Date", Convert.ToString(invoice.InvoiceDate), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidInvoiceDate, ErrorStatus.X, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      stopWatch.Stop();
      Logger.InfoFormat("Validating invoice date - time required: [{0}]", stopWatch.Elapsed);

      // Calculate time required to validate exchange rate.
      stopWatch.Reset();
      stopWatch.Start();

      ExchangeRate exchangeRate = null;

      if (invoice.BillingYear != 0 && invoice.BillingMonth != 0)
      {
        DateTime billingDate;
        var cultureInfo = new CultureInfo("en-US");
        cultureInfo.Calendar.TwoDigitYearMax = 2099;
        if (DateTime.TryParseExact(string.Format("{0}{1}", invoice.BillingYear, invoice.BillingMonth.ToString().PadLeft(2, '0')), billingDateFormat, cultureInfo, DateTimeStyles.None, out billingDate))
        {
          // This exchange rate will be used for validating net amounts in coupon.
          var invoiceBillingDate = new DateTime(invoice.BillingYear, invoice.BillingMonth, 1);

          exchangeRate = ExchangeRateRepository.First(
            rate => rate.CurrencyId == invoice.ListingCurrencyId &&
            rate.EffectiveFromDate <= invoiceBillingDate && rate.EffectiveToDate >= invoiceBillingDate);
        }

      }

      // Validate billing currency rate  
      if (invoice.ListingCurrencyId != invoice.BillingCurrencyId && (invoice.SettlementMethodId == (int)SMI.Ich || invoice.SettlementMethodId == (int)SMI.Ach || invoice.SettlementMethodId == (int)SMI.AdjustmentDueToProtest))
      {
        var invalidCurrencyRate = true;

        if (exchangeRate != null)
        {
          switch (invoice.BillingCurrencyId)
          {
            case (int)BillingCurrency.EUR:
              if (ConvertUtil.Round(Convert.ToDecimal(exchangeRate.FiveDayRateEur), Constants.ExchangeRateDecimalPlaces) != Convert.ToDecimal(invoice.ExchangeRate)) invalidCurrencyRate = false;
              break;

            case (int)BillingCurrency.GBP:
              if (ConvertUtil.Round(Convert.ToDecimal(exchangeRate.FiveDayRateGbp), Constants.ExchangeRateDecimalPlaces) != Convert.ToDecimal(invoice.ExchangeRate)) invalidCurrencyRate = false;
              break;

            case (int)BillingCurrency.USD:
              if (ConvertUtil.Round(Convert.ToDecimal(exchangeRate.FiveDayRateUsd), Constants.ExchangeRateDecimalPlaces) != Convert.ToDecimal(invoice.ExchangeRate)) invalidCurrencyRate = false;
              break;
          }

          if (!invalidCurrencyRate)
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Listing to Billing Rate", Convert.ToString(invoice.ExchangeRate), invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvalidListingToBillingRate, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }
      stopWatch.Stop();
      Logger.InfoFormat("Validating exchange rate - time required: [{0}]", stopWatch.Elapsed);

      // Calculate time required to find duplicate coupons.
      stopWatch.Reset();
      stopWatch.Start();

      // Validate Batch Number and Record Seq number in BM and RM of Invoice
      var bmRmBatchseqNu = (from bmRecord in invoice.CGOBillingMemo
                            join rmRecord in invoice.CGORejectionMemo on
                              new { bmRecord.BatchSequenceNumber, bmRecord.RecordSequenceWithinBatch } equals
                              new { rmRecord.BatchSequenceNumber, rmRecord.RecordSequenceWithinBatch }
                            group rmRecord by new { bmRecord.BillingMemoNumber, rmRecord.RejectionMemoNumber, rmRecord.BatchSequenceNumber, rmRecord.RecordSequenceWithinBatch }
                              into bmRmEqualBatchSeq
                              from g in bmRmEqualBatchSeq.DefaultIfEmpty()
                              where g != null
                              select bmRmEqualBatchSeq).ToList();

      if (bmRmBatchseqNu.Count > 0)
      {
        foreach (var equalBatchSeqNu in bmRmBatchseqNu)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number-Sequence Number with in Batch", Convert.ToString(equalBatchSeqNu.Key.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalBatchSeqNu.Key.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate Batch Number and Record Seq number in BM and PB of Invoice
      var bmPbBatchseqNu = (from bmRecord in invoice.CGOBillingMemo
                            join pbRecord in invoice.AwbDataRecord on
                              new { bmRecord.BatchSequenceNumber, bmRecord.RecordSequenceWithinBatch } equals
                              new { pbRecord.BatchSequenceNumber, pbRecord.RecordSequenceWithinBatch }
                            group pbRecord by new { bmRecord.BillingMemoNumber, pbRecord.BatchSequenceNumber, pbRecord.RecordSequenceWithinBatch }
                              into bmPbEqualBatchSeq
                              from g in bmPbEqualBatchSeq.DefaultIfEmpty()
                              where g != null
                              select bmPbEqualBatchSeq).ToList();

      if (bmPbBatchseqNu.Count > 0)
      {
        foreach (var equalBatchSeqNu in bmPbBatchseqNu)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number-Sequence Number with in Batch", Convert.ToString(equalBatchSeqNu.Key.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalBatchSeqNu.Key.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate Batch Number and Record Seq number in RM and PB of Invoice
      var rmPbBatchseqNu = (from rmRecord in invoice.CGORejectionMemo
                            join pbRecord in invoice.AwbDataRecord on
                              new { rmRecord.BatchSequenceNumber, rmRecord.RecordSequenceWithinBatch } equals
                              new { pbRecord.BatchSequenceNumber, pbRecord.RecordSequenceWithinBatch }
                            group pbRecord by new { rmRecord.RejectionMemoNumber, pbRecord.BatchSequenceNumber, pbRecord.RecordSequenceWithinBatch }
                              into bmPbEqualBatchSeq
                              from g in bmPbEqualBatchSeq.DefaultIfEmpty()
                              where g != null
                              select bmPbEqualBatchSeq).ToList();

      if (rmPbBatchseqNu.Count > 0)
      {
        foreach (var equalBatchSeqNu in rmPbBatchseqNu)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number-Sequence Number with in Batch", Convert.ToString(equalBatchSeqNu.Key.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalBatchSeqNu.Key.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelCoupon, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      stopWatch.Stop();
      Logger.InfoFormat("Checking for duplicate coupon batch and sequence numbers - time required: [{0}]", stopWatch.Elapsed);

      var clearingHouse = ReferenceManager.GetClearingHouseFromSMI(invoice.SettlementMethodId);

      #region AWB Transaction

      // AwbRecord Validation.
      var processedBatchNumbers = new List<int>();
      var awbRecordComparer = new AwbRecordComparer();
      if (invoice.AwbDataRecord.Distinct(awbRecordComparer).Count() != invoice.AwbDataRecord.Count())
      {
        foreach (var equalCoupon in awbRecordComparer.EqualCoupons)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number-Sequence Number with in Batch", Convert.ToString(equalCoupon.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalCoupon.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      // Get Min Max acceptable amount for Coupon.
      List<MinAcceptableAmount> awbMinAcceptableAmountsP = null;
      List<MinAcceptableAmount> awbMinAcceptableAmountsC = null;
      if (!string.IsNullOrEmpty(clearingHouse.Trim()))
      {
        // If invoice contains Min Max Acceptable amounts then don't make DB call. - To Check
        awbMinAcceptableAmountsP = GetMinAcceptableAmounts(invoice, clearingHouse, TransactionType.CargoPrimePrepaid); //Added code for Min Acceptable amount
        awbMinAcceptableAmountsC = GetMinAcceptableAmounts(invoice, clearingHouse, TransactionType.CargoPrimeChargeCollect); //Added code for Min Acceptable amount
      }

      foreach (var awbRecord in invoice.AwbDataRecord)
      {
        awbRecord.TransactionStatus = TransactionStatus.Validated;

        // Validate Batch Number sequence order
        if (processedBatchNumbers.Contains(awbRecord.BatchSequenceNumber) && processedBatchNumbers.Last() != awbRecord.BatchSequenceNumber)
        {

          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(awbRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Sequence Number", Convert.ToString(awbRecord.BatchSequenceNumber),
              invoice, fileName, ErrorLevels.ErrorLevelCoupon, CargoErrorCodes.DuplicateBatchNo, ErrorStatus.X, awbRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
        }
        else if (!processedBatchNumbers.Contains(awbRecord.BatchSequenceNumber))
        {
          processedBatchNumbers.Add(awbRecord.BatchSequenceNumber);
        }

        
        isValid = ValidateParsedAwbRecord(awbRecord, exceptionDetailsList, invoice, fileName, issuingAirline, fileSubmissionDate, exchangeRate, awbMinAcceptableAmountsP, awbMinAcceptableAmountsC);

        isTransactionRecordsExistsInInvoice = true;
        isAwbTransactionExistsInInvoice = true;
      }

      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      var awbPrepaidBillingRecord =
        invoice.AwbDataRecord.Where(awb => awb.BillingCodeId == (int)BillingCode.AWBPrepaid);

      if (awbPrepaidBillingRecord != null && awbPrepaidBillingRecord.Count() > 0)
      {
        var awbBillingSubTotal = invoice.CGOBillingCodeSubTotal.Where(c =>  c.BillingCode == (int)BillingCode.AWBPrepaid);

        if (awbBillingSubTotal == null || awbBillingSubTotal.Count() == 0)
        {
          // Billing Code Sub Total Record was not found for Billing Code AWBPrepaid 

          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                     exceptionDetailsList.Count() + 1,
                                                                     fileSubmissionDate,
                                                                     "Billing Code",
                                                                     Convert.ToString(BillingCode.AWBPrepaid), invoice,
                                                                     fileName, ErrorLevels.ErrorLevelInvoice,
                                                                     CargoErrorCodes.BillingCodeSubTotalNotFound,
                                                                     ErrorStatus.X, invoice.BillingCode, 0,
                                                                     invoice.BatchSequenceNumber,
                                                                     invoice.RecordSequenceWithinBatch);

          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }

      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      var awbChargeCollectBillingRecord =
        invoice.AwbDataRecord.Where(awb => awb.BillingCodeId == (int)BillingCode.AWBChargeCollect);

      if (awbChargeCollectBillingRecord != null && awbChargeCollectBillingRecord.Count() > 0)
      {
        var awbBillingSubTotal = invoice.CGOBillingCodeSubTotal.Where(c => c.BillingCode == (int)BillingCode.AWBChargeCollect);

        if (awbBillingSubTotal == null || awbBillingSubTotal.Count() == 0)
        {
          // Billing Code Sub Total Record was not found for Billing Code AWBPrepaid 
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                             exceptionDetailsList.Count() + 1,
                                                                             fileSubmissionDate,
                                                                             "Billing Code",
                                                                             Convert.ToString(BillingCode.AWBChargeCollect), invoice,
                                                                             fileName, ErrorLevels.ErrorLevelInvoice,
                                                                             CargoErrorCodes.BillingCodeSubTotalNotFound,
                                                                             ErrorStatus.X, invoice.BillingCode, 0,
                                                                             invoice.BatchSequenceNumber,
                                                                             invoice.RecordSequenceWithinBatch);

          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }


      #endregion

      // Get billing and billed member Cargo configuration. - To Check
      var cargoConfigBilledMember = MemberManager.GetCargoConfig(invoice.BilledMemberId);
      var cargoConfigBillingMember = MemberManager.GetCargoConfig(invoice.BillingMemberId);

      var isXmlfileType = (invoice.SubmissionMethod == (Model.Enums.SubmissionMethod)SubmissionMethod.IsXml) ? true : false;

      // Member Migration validations
      if (isAwbTransactionExistsInInvoice)
      {
        if (invoice.InvoiceTypeId == (int)InvoiceType.CreditNote)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Header", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvoiceShouldNotHaveCreditNoteTransactions, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //To Check
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoPrimePrepaid, false, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForAWBIsIdec, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoPrimePrepaid, true, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForAWBIsXml, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }


      #region RM Transaction

      // RM Validations 
      processedBatchNumbers.Clear();

      // Validate Duplicate for batch Number-Sequence with in batch pair
      var memoRecordBaseComparer = new MemoComparer();
      if (invoice.CGORejectionMemo.Distinct(memoRecordBaseComparer).Count() != invoice.CGORejectionMemo.Count())
      {
        foreach (var equalCoupon in memoRecordBaseComparer.EqualCoupons)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number/Sequence Number with in Batch", Convert.ToString(equalCoupon.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalCoupon.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      if (invoice.CGORejectionMemo.Count > 0)
      {
        List<MinAcceptableAmount> rejectionMinAmounts;
        var transactionDate = GetTransactionDate(invoice);
        if (invoice.ValidMinAcceptableAmounts == null)
        {
          rejectionMinAmounts =
            MinAcceptableAmountRepository.Get(
                                            record => record.IsActive && (record.TransactionTypeId == (int)TransactionType.CargoRejectionMemoStage1 ||
                                            record.TransactionTypeId == (int)TransactionType.CargoRejectionMemoStage2 ||
                                            record.TransactionTypeId == (int)TransactionType.CargoRejectionMemoStage3)
                                            && record.ClearingHouse == clearingHouse && record.EffectiveFromPeriod <= transactionDate && record.EffectiveToPeriod >= transactionDate).ToList();
        }
        else
        {
          rejectionMinAmounts = invoice.ValidMinAcceptableAmounts.Where(
                                            record => record.IsActive && (record.TransactionTypeId == (int)TransactionType.CargoRejectionMemoStage1
                                            || record.TransactionTypeId == (int)TransactionType.CargoRejectionMemoStage1 ||
                                            record.TransactionTypeId == (int)TransactionType.CargoRejectionMemoStage1)
                                            && record.ClearingHouse == clearingHouse && record.EffectiveFromPeriod <= transactionDate && record.EffectiveToPeriod >= transactionDate).ToList();
        }

        //var rejectionMemoNumbers = new StringBuilder();
        foreach (var rejectionMemoRecord in invoice.CGORejectionMemo)
        {
          //samplingConstant = rejectionMemoRecord.SamplingConstant;
          rejectionMemoRecord.TransactionStatus = TransactionStatus.Validated;
          //Validate Batch Number sequence order
          if (processedBatchNumbers.Contains(rejectionMemoRecord.BatchSequenceNumber) && processedBatchNumbers.Last() != rejectionMemoRecord.BatchSequenceNumber)
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Sequence Number", Convert.ToString(rejectionMemoRecord.BatchSequenceNumber),
              invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.DuplicateBatchNo, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
          }
          else if (!processedBatchNumbers.Contains(rejectionMemoRecord.BatchSequenceNumber))
          {
            processedBatchNumbers.Add(rejectionMemoRecord.BatchSequenceNumber);
          }
          //Validate parsed rejection memo
          isValid = ValidateParsedRejectionMemoRecord(rejectionMemoRecord, exceptionDetailsList, invoice, fileName, issuingAirline, fileSubmissionDate, exchangeRate, billingPeriod, rejectionMinAmounts, awbMinAcceptableAmountsP, awbMinAcceptableAmountsC, cargoConfigBilledMember);
        }

        
        // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
        var rmBillingSubTotal = invoice.CGOBillingCodeSubTotal.Where(c => c.BillingCode == (int)BillingCode.RejectionMemo);
        if (rmBillingSubTotal == null || rmBillingSubTotal.Count() == 0)
        {
          // Billing Code Sub Total Record was not found for Billing Code RejectionMemo 
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                             exceptionDetailsList.Count() + 1,
                                                                             fileSubmissionDate,
                                                                             "Billing Code",
                                                                             Convert.ToString(BillingCode.RejectionMemo), invoice,
                                                                             fileName, ErrorLevels.ErrorLevelInvoice,
                                                                             CargoErrorCodes.BillingCodeSubTotalNotFound,
                                                                             ErrorStatus.X, invoice.BillingCode, 0,
                                                                             invoice.BatchSequenceNumber,
                                                                             invoice.RecordSequenceWithinBatch);

          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }


        isTransactionRecordsExistsInInvoice = true;
        isRejectionMemoTransactionExistsInInvoice = true;
      }

      #endregion

      if (isRejectionMemoTransactionExistsInInvoice)
      {
        if (invoice.InvoiceTypeId == (int)InvoiceType.CreditNote)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Header", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvoiceShouldNotHaveCreditNoteTransactions, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoRejectionMemoStage1, false, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForRMIsIdec, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoRejectionMemoStage1, true, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForRMIsXml, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      #region BM Transaction

      //BM Record Validations
      processedBatchNumbers.Clear();
      //Validate Duplicate for batch Number-Sequence with in batch pair
      memoRecordBaseComparer = new MemoComparer();
      if (invoice.CGOBillingMemo.Distinct(memoRecordBaseComparer).Count() != invoice.CGOBillingMemo.Count())
      {
        foreach (var equalCoupon in memoRecordBaseComparer.EqualCoupons)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number/Sequence Number with in Batch", Convert.ToString(equalCoupon.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalCoupon.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      foreach (var billingMemoRecord in invoice.CGOBillingMemo)
      {
        billingMemoRecord.TransactionStatus = TransactionStatus.Validated;
        //Validate Batch Number sequence order
        if (processedBatchNumbers.Contains(billingMemoRecord.BatchSequenceNumber) && processedBatchNumbers.Last() != billingMemoRecord.BatchSequenceNumber)
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Sequence Number", Convert.ToString(billingMemoRecord.BatchSequenceNumber),
              invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.DuplicateBatchNo, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
        }
        else if (!processedBatchNumbers.Contains(billingMemoRecord.BatchSequenceNumber))
        {
          processedBatchNumbers.Add(billingMemoRecord.BatchSequenceNumber);
        }
        //Validate parsed billing memo
        isValid = ValidateParsedBillingMemoRecord(billingMemoRecord, exceptionDetailsList, invoice, fileName, issuingAirline, fileSubmissionDate);
        isTransactionRecordsExistsInInvoice = true;
        isBillingMemoTransactionExistsInInvoice = true;
      }

      
      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      if (invoice.CGOBillingMemo != null && invoice.CGOBillingMemo.Count > 0)
      {
        var bmBillingSubTotal = invoice.CGOBillingCodeSubTotal.Where(c => c.BillingCode == (int)BillingCode.BillingMemo);

        if (bmBillingSubTotal == null || bmBillingSubTotal.Count() == 0)
        {
          // Billing Code Sub Total Record was not found for Billing Code BillingMemo 
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                        exceptionDetailsList.Count() + 1,
                                                                        fileSubmissionDate,
                                                                        "Billing Code",
                                                                        Convert.ToString(BillingCode.BillingMemo), invoice,
                                                                        fileName, ErrorLevels.ErrorLevelInvoice,
                                                                        CargoErrorCodes.BillingCodeSubTotalNotFound,
                                                                        ErrorStatus.X, invoice.BillingCode, 0,
                                                                        invoice.BatchSequenceNumber,
                                                                        invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }


      }

      #endregion

      if (isBillingMemoTransactionExistsInInvoice)
      {
        if (invoice.InvoiceTypeId == (int)InvoiceType.CreditNote)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Header", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvoiceShouldNotHaveCreditNoteTransactions, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        //Member migration check
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoBillingMemo, false, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForBMIsIdec, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoBillingMemo, true, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForBMIsXml, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      #region CM Transaction

      //CM Record Validations
      processedBatchNumbers.Clear();
      //Validate Duplicate for batch Number-Sequence with in batch pair
      memoRecordBaseComparer = new MemoComparer();
      if (invoice.CGOCreditMemo.Distinct(memoRecordBaseComparer).Count() != invoice.CGOCreditMemo.Count())
      {
        foreach (var equalCoupon in memoRecordBaseComparer.EqualCoupons)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Number/Sequence Number with in Batch", Convert.ToString(equalCoupon.BatchSequenceNumber).PadLeft(5, '0') + "-" + Convert.ToString(equalCoupon.RecordSequenceWithinBatch).PadLeft(5, '0'), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.DuplicateBatchNoSequenceNo, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      if (invoice.CGOCreditMemo.Count > 0)
      {
        MaxAcceptableAmount maxAcceptableAmount = null;
        if (!string.IsNullOrEmpty(clearingHouse.Trim()))
        {
          // Get Min Max acceptable amount for CM.
          maxAcceptableAmount = GetMaxAcceptableAmount(invoice, clearingHouse, TransactionType.CargoCreditMemo);
        }

        foreach (CargoCreditMemo creditMemoRecord in invoice.CGOCreditMemo)
        {
          creditMemoRecord.TransactionStatus = TransactionStatus.Validated;
          //Validate Batch Number sequence order
          if (processedBatchNumbers.Contains(creditMemoRecord.BatchSequenceNumber) &&
              processedBatchNumbers.Last() != creditMemoRecord.BatchSequenceNumber)
          {

            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Batch Sequence Number", Convert.ToString(creditMemoRecord.BatchSequenceNumber),
              invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.DuplicateBatchNo, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
          }
          else if (!processedBatchNumbers.Contains(creditMemoRecord.BatchSequenceNumber))
          {
            processedBatchNumbers.Add(creditMemoRecord.BatchSequenceNumber);
          }
          //To Check
          isValid = ValidateParsedCreditMemoRecord(creditMemoRecord, exceptionDetailsList, invoice, fileName, issuingAirline, fileSubmissionDate, exchangeRate, maxAcceptableAmount);
        }

        isTransactionRecordsExistsInInvoice = true;
        isCreditMemoTransactionExistsInInvoice = true;


        // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.

          var cmBillingSubTotal = invoice.CGOBillingCodeSubTotal.Where(c => c.BillingCode == (int)BillingCode.CreditNote);

          if (cmBillingSubTotal == null || cmBillingSubTotal.Count() == 0)
          {
            // Billing Code Sub Total Record was not found for Billing Code BillingMemo 
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(),
                                                                          exceptionDetailsList.Count() + 1,
                                                                          fileSubmissionDate,
                                                                          "Billing Code",
                                                                          Convert.ToString(BillingCode.CreditNote), invoice,
                                                                          fileName, ErrorLevels.ErrorLevelInvoice,
                                                                          CargoErrorCodes.BillingCodeSubTotalNotFound,
                                                                          ErrorStatus.X, invoice.BillingCode, 0,
                                                                          invoice.BatchSequenceNumber,
                                                                          invoice.RecordSequenceWithinBatch);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        



      }
      #endregion

      if (isCreditMemoTransactionExistsInInvoice)
      {
        if (invoice.InvoiceTypeId == (int)InvoiceType.Invoice)
        {
          //To Check
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Header", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.CreditNotShouldNotHaveOtherTransactions, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Member migration check
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoCreditMemo, false, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForCMIsIdec, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && (IsMemberMigratedForTransaction(invoice, TransactionType.CargoCreditMemo, true, cargoConfigBillingMember) == false))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Member", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MemberIsNotMigratedForCMIsXml, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      if (isTransactionRecordsExistsInInvoice)
      {
        //Validation of Billing code total record with sum of transactions records.
        if (ValidateParsedBillingCodeSubTotalTotal(invoice, fileSubmissionDate, exceptionDetailsList, fileName) == false)
        {
          isValid = false;
        }

        //Validation of invoice total record with sum of Billing code records.
        if (ValidateParsedInvoiceTotal(invoice, fileSubmissionDate, exceptionDetailsList, fileName) == false)
        {
          isValid = false;
        }
      }
      else
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Header", String.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.MandatoryTransactionInInvoice, ErrorStatus.X, invoice.BillingCode, 0, invoice.BatchSequenceNumber, invoice.RecordSequenceWithinBatch);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Code to generate IsValidation summary.
      var validationManager = Ioc.Resolve<IValidationErrorManager>(typeof(IValidationErrorManager));
      invoice.ISValidationExceptionSummary = validationManager.GetIsSummary(invoice, exceptionDetailsList, fileName, fileSubmissionDate);
      invoice.ValidationExceptionSummary = validationManager.GetIsSummaryForValidationErrorCorrection(invoice, exceptionDetailsList.ToList());

      UpdateCargoParsedInvoiceStatus(invoice, fileName, fileSubmissionDate, exceptionDetailsList);

      if (invoice.ISValidationExceptionSummary != null)
      {
        invoice.ISValidationExceptionSummary.InvoiceStatus = ((int)invoice.InvoiceStatus).ToString();
      }

      return isValid;
    }

    /// <summary>
    /// Validate Invoice details and batch record sequence number. This change has implemented based on SCP#85837
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileRecordSequenceNumber"></param>
    /// <returns></returns>
    public bool ValidateParsedInvoice(CargoInvoice invoice, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName, DateTime fileSubmissionDate, IDictionary<string, bool> issuingAirline, Dictionary<int, Dictionary<Guid, int>> fileRecordSequenceNumber)
    {
      foreach (var batchNumber in fileRecordSequenceNumber.Keys)
      {
        Dictionary<Guid, int> temp = fileRecordSequenceNumber[batchNumber];
        int expected = temp.FirstOrDefault().Value;
        foreach (var guid in temp.Keys)
        {
          if (expected != temp[guid])
          {
            if (invoice.AwbDataRecord.Count(a => a.Id == guid) > 0)
            {
              AwbRecord record = invoice.AwbDataRecord.FirstOrDefault(a => a.Id == guid);
              //Add Error
              var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(record.Id.Value(),
                                                                              exceptionDetailsList.Count() +
                                                                              1, fileSubmissionDate,
                                                                              "Record Sequenec Within Batch",
                                                                              Convert.ToString(
                                                                                  record.
                                                                                      RecordSequenceWithinBatch),
                                                                              invoice, fileName,
                                                                              ErrorLevels.ErrorLevelCoupon,
                                                                              ErrorCodes.InvalidRecordSequenceNumberOrder,
                                                                              ErrorStatus.X, record);
              validationExceptionDetail.ErrorDescription = string.Format("{0} {1}",
                                                                   validationExceptionDetail.
                                                                       ErrorDescription, expected);
              exceptionDetailsList.Add(validationExceptionDetail);
            }
            else if (invoice.CGORejectionMemo.Count(a => a.Id == guid) > 0)
            {
              CargoRejectionMemo record = invoice.CGORejectionMemo.FirstOrDefault(a => a.Id == guid);
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(record.Id.Value(),
                                                                              exceptionDetailsList.Count() +
                                                                              1, fileSubmissionDate,
                                                                              "Record Sequence Within Batch",
                                                                              Convert.ToString(
                                                                                  record.
                                                                                  RecordSequenceWithinBatch),
                                                                              invoice, fileName,
                                                                              ErrorLevels.
                                                                                  ErrorLevelRejectionMemo,
                                                                              ErrorCodes.
                                                                                  InvalidRecordSequenceNumberOrder,
                                                                              ErrorStatus.X,
                                                                              record.BillingCode,
                                                                              record);
              validationExceptionDetail.ErrorDescription = string.Format("{0} {1}",
                                                                  validationExceptionDetail.
                                                                      ErrorDescription, expected);
              exceptionDetailsList.Add(validationExceptionDetail);
            }
            else if (invoice.CGOBillingMemo.Count(a => a.Id == guid) > 0)
            {
              CargoBillingMemo record = invoice.CGOBillingMemo.FirstOrDefault(a => a.Id == guid);
              //Add Error
              var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(record.Id.Value(),
                                                                                   exceptionDetailsList.Count() + 1,
                                                                                   fileSubmissionDate,
                                                                                   "Record Sequence Within Batch",
                                                                                   Convert.ToString(
                                                                                       record.
                                                                                           RecordSequenceWithinBatch),
                                                                                   invoice, fileName,
                                                                                   ErrorLevels.ErrorLevelBillingMemo,
                                                                                   ErrorCodes.InvalidRecordSequenceNumberOrder,
                                                                                   ErrorStatus.X, record.BillingCode,
                                                                                   record);
              validationExceptionDetail.ErrorDescription = string.Format("{0} {1}",
                                                                         validationExceptionDetail.
                                                                             ErrorDescription, expected);
              exceptionDetailsList.Add(validationExceptionDetail);
            }
            else if (invoice.CGOCreditMemo.Count(a => a.Id == guid) > 0)
            {
              CargoCreditMemo record = invoice.CGOCreditMemo.FirstOrDefault(a => a.Id == guid);
              //Add Error
              var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(record.Id.Value(),
                                                                                   exceptionDetailsList.Count() +
                                                                                   1, fileSubmissionDate,
                                                                                   "Batch Sequence Number",
                                                                                   Convert.ToString(
                                                                                       record.
                                                                                           RecordSequenceWithinBatch),
                                                                                   invoice, fileName,
                                                                                   ErrorLevels.
                                                                                       ErrorLevelCreditMemo,
                                                                                   ErrorCodes.InvalidRecordSequenceNumberOrder,
                                                                                   ErrorStatus.X,
                                                                                   record.BillingCode,
                                                                                   record);

              validationExceptionDetail.ErrorDescription = string.Format("{0} {1}",
                                                                         validationExceptionDetail.
                                                                             ErrorDescription, expected);
              exceptionDetailsList.Add(validationExceptionDetail);
            }
          }
          expected++;
        }
      }
      return ValidateParsedInvoice(invoice, exceptionDetailsList, fileName, fileSubmissionDate, issuingAirline);
    }

    #region Update Parsed Invoice

    /// <summary>
    /// To Update Parsed Invoice Status.
    /// </summary>
    /// <param name="cgoInvoice"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exceptionDetailsList"></param>
    public void UpdateCargoParsedInvoiceStatus(CargoInvoice cgoInvoice, string fileName, DateTime fileSubmissionDate, IList<IsValidationExceptionDetail> exceptionDetailsList)
    {
        //fixed for issue id.5713 
        cgoInvoice.SettlementFileStatus = InvoiceProcessStatus.NotSet;

      if (exceptionDetailsList.Count(rec => rec.InvoiceNumber == cgoInvoice.InvoiceNumber && Convert.ToInt32(rec.ErrorStatus) == (int)ErrorStatus.Z) > 0)
      {
        //If the invoice is submitted with other errors then it is not eligible for late submission.
        if (cgoInvoice.ValidationStatus == InvoiceValidationStatus.ErrorPeriod)
        {
          cgoInvoice.ValidationStatus = InvoiceValidationStatus.Failed;
          cgoInvoice.ValidationStatusId = (int)InvoiceValidationStatus.Failed;
        }
        cgoInvoice.InvoiceStatus = InvoiceStatusType.ErrorNonCorrectable;

        // For non-correctable error invoice, clear all the transaction data.
        ClearCargoInvoiceTransactionData(cgoInvoice);
      }
      else if (exceptionDetailsList.Count(rec => rec.InvoiceNumber == cgoInvoice.InvoiceNumber && Convert.ToInt32(rec.ErrorStatus) == (int)ErrorStatus.X) > 0)
      {
        //If the invoice is submitted with other errors then it is not eligible for late submission.

        cgoInvoice.ValidationStatus = InvoiceValidationStatus.Failed;
        cgoInvoice.ValidationStatusId = (int)InvoiceValidationStatus.Failed;
        cgoInvoice.InvoiceStatus = InvoiceStatusType.ErrorNonCorrectable;
        // For non-correctable error invoice, clear all the transaction data.
        ClearCargoInvoiceTransactionData(cgoInvoice);
      }
      else if (exceptionDetailsList.Count(rec => rec.InvoiceNumber == cgoInvoice.InvoiceNumber && Convert.ToInt32(rec.ErrorStatus) == (int)ErrorStatus.C) > 0)
      {
        cgoInvoice.ValidationStatus = InvoiceValidationStatus.Failed;
        cgoInvoice.ValidationStatusId = (int)InvoiceValidationStatus.Failed;
        cgoInvoice.InvoiceStatus = InvoiceStatusType.ErrorCorrectable;

        var billingMember = MemberManager.GetMember(cgoInvoice.BillingMemberId);
        var billedMember = MemberManager.GetMember(cgoInvoice.BilledMemberId);

        UpdateInvoiceDetails(cgoInvoice, billingMember, billedMember);
      }
      else
      {
        //If the invoice is submitted with no errors then it is eligible for late submission.
        if (cgoInvoice.ValidationStatus == InvoiceValidationStatus.ErrorPeriod)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(cgoInvoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Date",
          string.Format("{0}{1}{2}", cgoInvoice.BillingYear, cgoInvoice.BillingMonth, cgoInvoice.BillingPeriod), cgoInvoice, fileName,
          ErrorLevels.ErrorLevelInvoice, CargoErrorCodes.InvoiceValidForLateSubmission, ErrorStatus.X, cgoInvoice.BillingCode);
          exceptionDetailsList.Add(validationExceptionDetail);
          // Update status of Invoice as OnHold, invoice status will be updated from SP as ReadyForBilling.
          cgoInvoice.InvoiceStatusId = (int)InvoiceStatusType.ErrorNonCorrectable;
        }
        else
        {
          cgoInvoice.ValidationStatus = InvoiceValidationStatus.Completed;
          cgoInvoice.ValidationStatusId = (int)InvoiceValidationStatus.Completed;
          // Update status of Invoice as OnHold, invoice status will be updated from SP as ReadyForBilling.
          cgoInvoice.InvoiceStatusId = (int)InvoiceStatusType.OnHold;

          var billingMember = MemberManager.GetMember(cgoInvoice.BillingMemberId);
          var billedMember = MemberManager.GetMember(cgoInvoice.BilledMemberId);

          UpdateInvoiceDetails(cgoInvoice, billingMember, billedMember);
        }
      }
    }

    /// <summary>
    /// To Clears all transaction data from Cargo invoice object.
    /// </summary>
    /// <param name="cgoInvoice"></param>
    private static void ClearCargoInvoiceTransactionData(CargoInvoice cgoInvoice)
    {
      int sandboxMode = 0;
      try
      {
        sandboxMode = Convert.ToInt32(ConfigurationManager.AppSettings["SandboxMode"].ToString());
      }
      catch (Exception ex)
      {
        Logger.Debug("Handled Error: ", ex);
      }

      if (sandboxMode == 0)
      {
        cgoInvoice.AwbDataRecord.Clear();
        cgoInvoice.CGOBillingMemo.Clear();
        cgoInvoice.CGOCreditMemo.Clear();
        cgoInvoice.CGORejectionMemo.Clear();
        cgoInvoice.CGOBillingCodeSubTotal.Clear();
        cgoInvoice.CGOInvoiceTotalVat.Clear();
        cgoInvoice.MemberLocationInformation.Clear();
        cgoInvoice.ValidationExceptionSummary.Clear();
      }
    }

    /// <summary>
    /// To Update Parsed Invoice Status.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="billingMember"></param>
    /// <param name="billedMember"></param>
    public void UpdateInvoiceDetails(CargoInvoice invoice, Member billingMember, Member billedMember)
    {
      // Get Final Parent Details for SMI, Currency, Clearing House abd Suspended Flag validations
      var billingFinalParent = MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BillingMemberId));
      var billedFinalParent = MemberManager.GetMember(MemberManager.GetFinalParentDetails(invoice.BilledMemberId));

      var clearingHouse = ReferenceManager.GetClearingHouseForInvoice(invoice, billingFinalParent, billedFinalParent);

      // Update clearing house of invoice
      invoice.ClearingHouse = clearingHouse;

      // Update DS Required By as per billing member location country and DS Required flag in member profile.
      if (invoice.MemberLocationInformation.Count == 2)
      {
        var isDsRequiredByBillingMember = false;
        var isDsRequiredByBilledMember = false;

        //if (billingMember != null && billingMember.DigitalSignApplication && (invoice.DigitalSignatureRequiredId == (int)DigitalSignatureRequired.Yes || invoice.DigitalSignatureRequiredId == (int)DigitalSignatureRequired.Default))
        // SCPID 28241 : Seperate out DSReq : Yes and Default in two different condition.
        if (billingMember != null && billingMember.DigitalSignApplication && (invoice.DigitalSignatureRequiredId == (int)DigitalSignatureRequired.Yes))
        {
            isDsRequiredByBillingMember = true;
        } //Added  missing code to check DS Req for Country in case of billing for Default scenario
        else if (billingMember != null && billingMember.DigitalSignApplication && (invoice.DigitalSignatureRequiredId == (int)DigitalSignatureRequired.Default))
        {
            if (IsDigitalSignatureRequiredForTheCountry(invoice, true))
            {
                isDsRequiredByBillingMember = true;
            }

        }

        if (billedMember != null && billedMember.DigitalSignApplication)
        {
            // Added missing code for to check DS Req for country check for billed point of view as well.
            if (IsDigitalSignatureRequiredForTheCountry(invoice, false))
            {
                isDsRequiredByBilledMember = true;
            }
        }
          // Update DsRequiredBy of invoice based on digital signature required by billing member and billed member.
        invoice.DsRequirdBy = GetDigitalSignatureRequiredBy(isDsRequiredByBillingMember, isDsRequiredByBilledMember);
        invoice.DsStatus = GetDigitalSignatureStatus(invoice.DsRequirdBy, invoice, billedMember);
      }

      // Update suspended flag according to ach/Ach configuration.
      if (ValidateSuspendedFlag(invoice, billingFinalParent, billedFinalParent))
      {
        invoice.SuspendedInvoiceFlag = true;
      }

      // Set Sponsored By  
      if (billingMember != null)
      {
        var ichConfiguration = billingMember.IchConfiguration;
        if (ichConfiguration != null && ichConfiguration.SponsoredById.HasValue)
        {
          invoice.SponsoredById = ichConfiguration.SponsoredById;
        }
      }

      invoice.SupportingAttachmentStatus = SupportingAttachmentStatus.NotProcessed;
     
    }

    #endregion

    /// <summary>
    /// This will return the CouponSearchCriteria in the below form
    /// 'TicketIssuingAirline1-TicketCouponNo1-TicketDocNo1,TicketIssuingAirline2-TicketCouponNo2-TicketDocNo2,.....'
    /// </summary>
    /// <param name="couponSearchCriterias"></param>
    /// <returns></returns>
    private string CreateCouponSearchCriteriaString(IEnumerable<CouponSearchCriteria> couponSearchCriterias)
    {
      var couponSearchCriteriaCollection = new List<string>();
      foreach (var couponSearchCriteria in couponSearchCriterias)
      {
        var searchCriterialArray = new string[3];
        searchCriterialArray[0] = couponSearchCriteria.TicketIssuingAirline;
        searchCriterialArray[1] = couponSearchCriteria.TicketCouponNo.ToString();
        searchCriterialArray[2] = couponSearchCriteria.TicketDocNo.ToString();
        couponSearchCriteriaCollection.Add(string.Join("-", searchCriterialArray));
      }
      return string.Join(",", couponSearchCriteriaCollection);
    }

    /// <summary>
    /// Gets the invoice with RM coupons.
    /// </summary>
    /// <param name="invoiceNumber"></param>
    /// <param name="billingMonth"></param>
    /// <param name="billingYear"></param>
    /// <param name="billingPeriod"></param>
    /// <param name="billingMemberId"></param>
    /// <param name="billedMemberId"></param>
    /// <param name="billingCode"></param>
    /// <param name="couponSearchCriteriaString"></param>
    /// <returns></returns>
    public CargoInvoice GetInvoiceWithCMCoupons(string invoiceNumber, int billingMonth, int billingYear, int billingPeriod, int billingMemberId, int billedMemberId, int? billingCode = null, string couponSearchCriteriaString = null)
    {
      var entities = new[] { LoadStrategy.CargoEntities.CreditMemo, LoadStrategy.CargoEntities.CmAwb };

      var invoices = CargoInvoiceRepository.GetInvoiceLS(new LoadStrategy(string.Join(",", entities)), invoiceNumber, billingMonth, billingYear, billingPeriod, billingMemberId, billedMemberId, billingCode, invoiceStatusIds: ((int)InvoiceStatusType.Presented).ToString(), couponSearchCriteriaString: couponSearchCriteriaString);

      CargoInvoice invoice = null;
      if (invoices.Count > 0)
      {
        // TODO: throw exception if invoice count > 1
        invoice = invoices[0];
      }
      return invoice;
    }

    /// <summary>
    /// Gets the invoice with RM coupons.
    /// </summary>
    /// <param name="invoiceNumber"></param>
    /// <param name="billingMonth"></param>
    /// <param name="billingYear"></param>
    /// <param name="billingPeriod"></param>
    /// <param name="billingMemberId"></param>
    /// <param name="billedMemberId"></param>
    /// <param name="billingCode"></param>
    /// <param name="couponSearchCriteriaString"></param>
    /// <returns></returns>
    public CargoInvoice GetInvoiceWithBMCoupons(string invoiceNumber, int billingMonth, int billingYear, int billingPeriod, int billingMemberId, int billedMemberId, int? billingCode = null, string couponSearchCriteriaString = null)
    {
      var entities = new[] { LoadStrategy.CargoEntities.BillingMemo, LoadStrategy.CargoEntities.BmAwb };

      var invoices = CargoInvoiceRepository.GetInvoiceLS(new LoadStrategy(string.Join(",", entities)), invoiceNumber, billingMonth, billingYear, billingPeriod, billingMemberId, billedMemberId, billingCode, invoiceStatusIds: ((int)InvoiceStatusType.Presented).ToString(), couponSearchCriteriaString: couponSearchCriteriaString);

      CargoInvoice invoice = null;
      if (invoices.Count > 0)
      {
        // TODO: throw exception if invoice count > 1
        invoice = invoices[0];
      }
      return invoice;
    }

    /// <summary>
    /// To Validate Rejection Memo.
    /// </summary>
    /// <param name="rejectionMemoRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exchangeRate"></param>
    /// <param name="billingPeriod"></param>
    /// <returns></returns>
    private bool ValidateParsedRejectionMemoRecord(CargoRejectionMemo rejectionMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate, ExchangeRate exchangeRate, BillingPeriod billingPeriod, List<MinAcceptableAmount> rejectionMinAmounts, List<MinAcceptableAmount> minAcceptableAmountsP, List<MinAcceptableAmount> minAcceptableAmountsC,CargoConfiguration cargoConfigBilledMember)
    {

      var isValid = true;
      TransactionType transType = 0;
      TransactionType transTypeMigration = 0;
      bool ignoreValidationInMigrationPeriod = false;
      bool IsBmCmRmFound = false;
      var currDate = new DateTime(invoice.BillingYear, invoice.BillingMonth, 1);
      var exchangeRateRepository = Ioc.Resolve<IExchangeRateRepository>(typeof(IExchangeRateRepository));
      var currInvExRate = exchangeRateRepository.Get(ex => ex.CurrencyId == invoice.ListingCurrencyId && ex.EffectiveFromDate <= currDate && ex.EffectiveToDate >= currDate).FirstOrDefault();

      DateTime yourInvoiceBillingDate;
      //To avoid converting year 30 into year 1930
      var cultureInfo = new CultureInfo("en-US");
      cultureInfo.Calendar.TwoDigitYearMax = 2099;
      bool isValidYourInvoicedate = false;
      var yourInvoiceDateString = string.Format("{2}{1}{0}",
                                     Convert.ToString(rejectionMemoRecord.YourInvoiceBillingPeriod).PadLeft(2, '0'),
                                     Convert.ToString(rejectionMemoRecord.YourInvoiceBillingMonth).PadLeft(2, '0'),
                                     Convert.ToString(rejectionMemoRecord.YourInvoiceBillingYear).PadLeft(4, '0'));
      if (DateTime.TryParseExact(yourInvoiceDateString, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out yourInvoiceBillingDate))
      {
        if (yourInvoiceBillingDate.Day >= 1 && yourInvoiceBillingDate.Day <= 4)
        {
          isValidYourInvoicedate = true;
        }
        else
        {
          //Raise NonCorrectable error for invalid your invoice Date.
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                               exceptionDetailsList.Count() + 1,
                                                                               fileSubmissionDate,
                                                                               "Your Invoice Billing Date",
                                                                               yourInvoiceDateString,
                                                                               invoice,
                                                                               fileName,
                                                                               ErrorLevels.ErrorLevelRejectionMemo,
                                                                               ErrorCodes.InvalidYourInvoiceBillingDatePeriod,
                                                                               ErrorStatus.X,
                                                                               rejectionMemoRecord.BillingCode,
                                                                               rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        //Raise NonCorrectable error for invalid your invoice Date.
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                               exceptionDetailsList.Count() + 1,
                                                                               fileSubmissionDate,
                                                                               "Your Invoice Billing Date",
                                                                               yourInvoiceDateString,
                                                                               invoice,
                                                                               fileName,
                                                                               ErrorLevels.ErrorLevelRejectionMemo,
                                                                               ErrorCodes.InvalidYourInvoiceBillingDatePeriod,
                                                                               ErrorStatus.X,
                                                                               rejectionMemoRecord.BillingCode,
                                                                               rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      if (isValidYourInvoicedate)
      {
        invoice.IgnoreValidationInMigrationPeriodRm1 = IgnoreValidationInMigrationPeriod(invoice, rejectionMemoRecord, TransactionType.CargoRejectionMemoStage1, cargoConfigBilledMember);
        invoice.IgnoreValidationInMigrationPeriodCoupon = IgnoreValidationInMigrationPeriod(invoice, rejectionMemoRecord, TransactionType.CargoPrimePrepaid, cargoConfigBilledMember);
        invoice.IgnoreValidationInMigrationPeriodBm = IgnoreValidationInMigrationPeriod(invoice, rejectionMemoRecord, TransactionType.CargoBillingMemo, cargoConfigBilledMember);
        invoice.IgnoreValidationInMigrationPeriodCm = IgnoreValidationInMigrationPeriod(invoice, rejectionMemoRecord, TransactionType.CargoCreditMemo, cargoConfigBilledMember);
      }
      bool outcomeOfMismatchOnRmBilledOrAllowedAmounts = ValidationCache.Instance.CgoRmBilledAllowedAmount;
      switch (rejectionMemoRecord.RejectionStage)
      {
        case (int)RejectionStage.StageOne:
          transType = TransactionType.CargoRejectionMemoStage1;
          transTypeMigration = TransactionType.CargoPrimePrepaid;
          if (rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.BMNumber)
          {
            ignoreValidationInMigrationPeriod = invoice.IgnoreValidationInMigrationPeriodBm;
          }
          else if (rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.CMNumber)
          {
            ignoreValidationInMigrationPeriod = invoice.IgnoreValidationInMigrationPeriodCm;
          }
          else
          {
            ignoreValidationInMigrationPeriod = invoice.IgnoreValidationInMigrationPeriodCoupon;
          }
          break;
        case (int)RejectionStage.StageTwo:
          transType = TransactionType.CargoRejectionMemoStage2;
          transTypeMigration = TransactionType.CargoRejectionMemoStage1;
          ignoreValidationInMigrationPeriod = invoice.IgnoreValidationInMigrationPeriodRm1;
          break;
        case (int)RejectionStage.StageThree:
          transType = TransactionType.CargoRejectionMemoStage3;
          transTypeMigration = TransactionType.CargoRejectionMemoStage1;
          ignoreValidationInMigrationPeriod = invoice.IgnoreValidationInMigrationPeriodRm1;
          break;
      }

      // Validate BillingCode
      if (!rejectionMemoRecord.BillingCode.Equals((int)BillingCode.RejectionMemo))
      {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Billing Code", ((BillingCode)rejectionMemoRecord.BillingCode).ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.InvalidBillingCode,
          ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }

      //SCPID:122022 -Valid Batch & Sequence number.
      if (rejectionMemoRecord.RecordSequenceWithinBatch <= 0 || rejectionMemoRecord.BatchSequenceNumber <= 0)
      {    
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Batch Sequence Number - Record Sequence Number",string.Format("{0}-{1}", rejectionMemoRecord.BatchSequenceNumber, rejectionMemoRecord.RecordSequenceWithinBatch), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.BatchRecordSequenceNoReq,
          ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }
      //Validate ReasonCode 
      if (!ReferenceManager.IsValidReasonCode(invoice, rejectionMemoRecord.ReasonCode, (int)transType))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Reason Code", rejectionMemoRecord.ReasonCode, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.CgoInvalidReasonCode,
          ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      else
      {
        //RM Coupon Breakdown Record is mandatory for some reason code.)
        if (rejectionMemoRecord.ReasonCode != null)
        {
          var isCouponBreakdownMandatory = invoice.ValidReasonCodes != null ? invoice.ValidReasonCodes.Count(reasonCode =>
            reasonCode.Code.Equals(rejectionMemoRecord.ReasonCode, StringComparison.OrdinalIgnoreCase) && reasonCode.TransactionTypeId == (int)transType
            && reasonCode.CouponAwbBreakdownMandatory) > 0 : ReasonCodeRepository.GetCount(reasonCode => reasonCode.Code.Equals(rejectionMemoRecord.ReasonCode, StringComparison.OrdinalIgnoreCase)
            && reasonCode.TransactionTypeId == (int)transType && reasonCode.CouponAwbBreakdownMandatory) > 0;

          if (isCouponBreakdownMandatory)
          {
            if (rejectionMemoRecord.CouponBreakdownRecord.Count == 0)
            {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Reason Code", rejectionMemoRecord.ReasonCode, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.MandatoryCouponBreakdownRecord,
                ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }
      }

      //Duplicate check in current invoice - Rejection memo number
      if (invoice.CGORejectionMemo.Where(rejection => rejection.RejectionMemoNumber == rejectionMemoRecord.RejectionMemoNumber).Count() > 1)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Rejection Memo Number", rejectionMemoRecord.RejectionMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
          CargoErrorCodes.DuplicateRejectionMemoNumber, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
      }
      // Should be a unique number within each Billed Airline in the Billing period.
      else if (IsDuplicateRejectionMemoNumber(rejectionMemoRecord, null, false, invoice))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Rejection Memo Number", rejectionMemoRecord.RejectionMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
          CargoErrorCodes.DuplicateRejectionMemoNumber, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
      }

      //BMCMIndicator should be populated in case Billing Memo/Credit Memo Number is populated.
      if ((rejectionMemoRecord.BMCMIndicatorId == 0 || rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.None) && !string.IsNullOrWhiteSpace(rejectionMemoRecord.YourBillingMemoNumber))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Billing/Credit Memo Number", rejectionMemoRecord.YourBillingMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
                    CargoErrorCodes.InvalidFimbmcmIndicatorForValidFimBmCmNumber, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      //BMCMIndicator should be populated in case Billing Memo/Credit Memo Number is populated.
      if (rejectionMemoRecord.BMCMIndicatorId != 0 && rejectionMemoRecord.BMCMIndicatorId != (int)BMCMIndicator.None && string.IsNullOrWhiteSpace(rejectionMemoRecord.YourBillingMemoNumber))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Billing/Credit Memo Number", rejectionMemoRecord.YourBillingMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
                    CargoErrorCodes.InvalidFimBmCmNumberForValidFimbmcmIndicator, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }


      // Use transaction type to get corresponding min max acceptable amount.

      //Validate Net Reject Amount)
      if (exchangeRate != null && !ReferenceManager.IsValidNetAmount(Convert.ToDouble(rejectionMemoRecord.TotalNetRejectAmount), transType, invoice.ListingCurrencyId, invoice, exchangeRate, validateMaxAmount: false, iMinAcceptableAmount: null, rejectionReasonCode: rejectionMemoRecord.ReasonCode, applicableMinimumField: ApplicableMinimumField.TotalNetRejectAmount, isRejectionMemo : true))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Net Reject Amount", rejectionMemoRecord.TotalNetRejectAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
          CargoErrorCodes.NetRejectAmountIsNotInAllowedRange, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (exchangeRate != null && !ReferenceManager.IsValidNetAmount(Convert.ToDouble(rejectionMemoRecord.TotalWeightChargeDifference + rejectionMemoRecord.TotalValuationChargeDifference), transType, invoice.ListingCurrencyId, invoice, exchangeRate, validateMaxAmount: false, iMinAcceptableAmount: null, rejectionReasonCode: rejectionMemoRecord.ReasonCode, applicableMinimumField: ApplicableMinimumField.TotalWeightChargesValueChargesDiff, isRejectionMemo: true))
      {
        //SCP339207 - To understand the reason for file rejection
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Sum of Total Wt Charge Diff and Total Valuation Charge Diff", (Convert.ToDouble(rejectionMemoRecord.TotalWeightChargeDifference + rejectionMemoRecord.TotalValuationChargeDifference)).ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
          CargoErrorCodes.SumTotalWtChargeandValChargeDiffInAllowedRange, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // YourInvoiceNumber mandatory check for Rejection Stage "1" or "2" or "3".
      if (string.IsNullOrWhiteSpace(rejectionMemoRecord.YourInvoiceNumber) && (rejectionMemoRecord.RejectionStage == 1 || rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3))
      {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
           "Your Invoice Number", rejectionMemoRecord.YourInvoiceNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.YourInvoiceNotExists, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          
          exceptionDetailsList.Add(validationExceptionDetail);
          
          isValid = false;
      }

      // SCP # 56198 - Query on the file quality
      // Your Rejection Memo No. cannot be provided if CGO RM stage 1
      if (!string.IsNullOrWhiteSpace(rejectionMemoRecord.YourRejectionNumber) && rejectionMemoRecord.RejectionStage == 1)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                             exceptionDetailsList.Count() + 1,
                                                                             fileSubmissionDate,
                                                                             "Your Rejection Memo Number",
                                                                             rejectionMemoRecord.YourRejectionNumber,
                                                                             invoice,
                                                                             fileName,
                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                             CargoErrorCodes.YourRejectionNumberNotRequired,
                                                                             ErrorStatus.X,
                                                                             rejectionMemoRecord.BillingCode,
                                                                             rejectionMemoRecord);

        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // YourRejectionNumber mandatory check for
      // 1. Rejection Stage "2" or "3" and Billing Code = 0.
      // 2. Billing Code = 7.
      if (string.IsNullOrWhiteSpace(rejectionMemoRecord.YourRejectionNumber) && (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3))
      {
           var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Your Rejection Memo Number", rejectionMemoRecord.YourRejectionNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.InvalidYourRejectionNumber, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }

      //Transaction in outside time limit.
      string clearingHouse = string.Empty;
      if (invoice.SettlementMethodId == (int)SMI.Ach)
      {
        clearingHouse = "A";
      }
      /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like Bilateral */
      else if (invoice.SettlementMethodId == (int)SMI.Ich || invoice.SettlementMethodId == (int)SMI.AchUsingIataRules || ReferenceManager.IsSmiLikeBilateral(invoice.SettlementMethodId, true))
      {
        clearingHouse = "I";
      }

      //This will be used for RM AWB linking 
      CargoInvoice yourInvoice = null;
      CargoRejectionMemo yourRejectionMemoRecord = null;
      CargoBillingMemo yourBillingMemoRecord = null;
      CargoCreditMemo yourCreditMemoRecord = null;

      if (rejectionMemoRecord.YourInvoiceBillingMonth == 0 || (rejectionMemoRecord.YourInvoiceBillingPeriod <= 0 || rejectionMemoRecord.YourInvoiceBillingPeriod > 4))
      {
          if (ignoreValidationInMigrationPeriod)
          {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Your Invoice Number", rejectionMemoRecord.YourInvoiceNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.YourInvoiceNotExists, ErrorStatus.W, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
              exceptionDetailsList.Add(validationExceptionDetail);
          }
          else
          {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Your Invoice Number", rejectionMemoRecord.YourInvoiceNumber, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.YourInvoiceNotExists, ErrorStatus.C, rejectionMemoRecord.BillingCode, rejectionMemoRecord, islinkingError: true);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
          }
      }
      else
      {

          var billingMemberId = invoice.BilledMemberId;



          //Validate your Invoice Number/AWB Serial Number/Rejection Coupon Number
          var couponSearchCriterias = new List<CouponSearchCriteria>();
          foreach (var rmCoupon in rejectionMemoRecord.CouponBreakdownRecord)
          {
              couponSearchCriterias.Add(new CouponSearchCriteria()
                                            {
                                                TicketIssuingAirline = rmCoupon.AwbIssueingAirline,
                                                TicketCouponNo = rmCoupon.AwbSerialNumber,
                                                TicketDocNo = rmCoupon.AwbBillingCode
                                            });
          }


          if (rejectionMemoRecord.RejectionStage == 1)
          {
            //Remove entity framework and use ado.net for performance optimization while fetching invoice detail and coupons from database
            //SCP400648 - KAL: RM linking logic in validation Service
            yourInvoice = cargoValidationManager.GetInvoiceWithCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                  rejectionMemoRecord.YourInvoiceBillingMonth,
                                                  rejectionMemoRecord.YourInvoiceBillingYear,
                                                  rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                  invoice.BilledMemberId,
                                                  invoice.BillingMemberId,
                                                  null,
                                                  CreateCouponSearchCriteriaString(couponSearchCriterias), ((int)InvoiceStatusType.Presented).ToString());
          }
          else
          {
            // Get rejection invoice with RM and RM Coupon for Rejection Stage 2 and 3.
            //Remove entity framework and use ado.net for performance optimization while fetching invoice detail and RM coupons from database
            //SCP400648 - KAL: RM linking logic in validation Service
            yourInvoice = cargoValidationManager.GetInvoiceWithRMCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                    rejectionMemoRecord.YourInvoiceBillingMonth,
                                                    rejectionMemoRecord.YourInvoiceBillingYear,
                                                    rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                    invoice.BilledMemberId,
                                                    invoice.BillingMemberId,
                                                    null,
                                                    null, ((int)InvoiceStatusType.Presented).ToString());
          }

          if (yourInvoice == null)
          {
              //SCP#48125 : RM Linking
              Logger.InfoFormat("Your Invoice Not found and ignoreValidationInMigrationPeriod Flag value: {0} ",
                                ignoreValidationInMigrationPeriod);
              if (ignoreValidationInMigrationPeriod)
              {
                  var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                       exceptionDetailsList.Count() + 1,
                                                                                       fileSubmissionDate,
                                                                                       "Your Invoice Number",
                                                                                       rejectionMemoRecord.
                                                                                           YourInvoiceNumber,
                                                                                       invoice,
                                                                                       fileName,
                                                                                       ErrorLevels.
                                                                                           ErrorLevelRejectionMemo,
                                                                                       CargoErrorCodes.
                                                                                           YourInvoiceNotExists,
                                                                                       ErrorStatus.W,
                                                                                       rejectionMemoRecord.BillingCode,
                                                                                       rejectionMemoRecord);
                  exceptionDetailsList.Add(validationExceptionDetail);
              }
              else
              {
                  var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                       exceptionDetailsList.Count() + 1,
                                                                                       fileSubmissionDate,
                                                                                       "Your Invoice Number",
                                                                                       rejectionMemoRecord.
                                                                                           YourInvoiceNumber,
                                                                                       invoice,
                                                                                       fileName,
                                                                                       ErrorLevels.
                                                                                           ErrorLevelRejectionMemo,
                                                                                       CargoErrorCodes.
                                                                                           YourInvoiceNotExists,
                                                                                       ErrorStatus.C,
                                                                                       rejectionMemoRecord.BillingCode,
                                                                                       rejectionMemoRecord,
                                                                                       islinkingError: true);
                  exceptionDetailsList.Add(validationExceptionDetail);
                  isValid = false;
              }
          }
          if (yourInvoice != null)
          {
              Logger.InfoFormat("Your Invoice: {0} Billing Period: {1}-{2}-P{3} is found", yourInvoice.InvoiceNumber,
                                yourInvoice.BillingMonth, yourInvoice.BillingYear, yourInvoice.BillingPeriod);

              //CMP#624 : 2.11-New Validation #6:SMI Match Check for PAX/CGO RMs
              if (!ValidateSmiAfterLinking(invoice.SettlementMethodId, yourInvoice.SettlementMethodId))
              {
                  /* CMP #624: ICH Rewrite-New SMI X 
                * Description: Code Fixed regarding bug #9214: CMP 624: Incorrect error on stage 1 Rejection if SMI X invoice is rejected by non X invoice from ISWEB. 
                * Instead of Exception SP is modified to return SMIException to show SMI related error message. */
                  string errorCode = "";
                  if (yourInvoice.SettlementMethodId == (int) SMI.IchSpecialAgreement)
                  {
                      /* ERROR_CODE_O := 'Exception: BPAXNS_10945 - Rejected Invoice/Credit Note was billed using Settlement Method X. 
                     * Invoices/Credit Notes billed using Settlement Method X can be rejected only by an Invoice using Settlement Method X*/
                      errorCode = ErrorCodes.PaxNSRejInvBHLinkingCheckForSmiX;
                  }
                  else
                  {
                      /* Exception: BPAXNS_10943 - Rejected Invoice/Credit Note was billed using a Settlement Method other than X. 
                     * Only Invoices/Credit Notes billed using Settlement Method X can be rejected by an Invoice using Settlement Method X. */
                      errorCode = ErrorCodes.PaxNSRejctionInvoiceLinkingCheckForSmiX;
                  }
                  Logger.InfoFormat("Invoice SMI : {0} -- Your Invoice SMI {1}", invoice.SettlementMethodId,
                                    yourInvoice.SettlementMethodId);

                  var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                       exceptionDetailsList.Count() + 1,
                                                                                       fileSubmissionDate,
                                                                                       "Your Invoice Number",
                                                                                       rejectionMemoRecord.
                                                                                           YourInvoiceNumber,
                                                                                       invoice,
                                                                                       fileName,
                                                                                       ErrorLevels.
                                                                                           ErrorLevelRejectionMemo,
                                                                                       errorCode,
                                                                                       ErrorStatus.X,
                                                                                       rejectionMemoRecord.BillingCode,
                                                                                       rejectionMemoRecord,
                                                                                       islinkingError: true);
                  exceptionDetailsList.Add(validationExceptionDetail);
                  isValid = false;
              }

              #region CMP#674: Validation of Coupon and AWB Breakdowns in Rejections

              if (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3
                                                             && yourInvoice != null &&
                  yourInvoice.CGORejectionMemo != null && yourInvoice.CGORejectionMemo.Count() > 0)
              {
                  Stopwatch stopwatch = new Stopwatch();
                  stopwatch.Start();

                  Logger.InfoFormat("AWB Breakdowns Rejections Validation started for Rejection Memo: [{0}]",
                                    rejectionMemoRecord.RejectionMemoNumber);

                  var yourRejectionMemo = yourInvoice.CGORejectionMemo.Where(
                      rm => rm.RejectionMemoNumber == rejectionMemoRecord.YourRejectionNumber).FirstOrDefault();

                  if (yourRejectionMemo != null)
                  {
                      /* Group Rejected/Your Invoice Coupons by Airline-DocNo-CpnNo */
                      IEnumerable<IGrouping<string, int>> rejectedRMCouponGroupings =
                          yourRejectionMemo.CouponBreakdownRecord.GroupBy(
                              rmCpn => string.Format("{0}-{1}", rmCpn.AwbIssueingAirline, rmCpn.AwbSerialNumber),
                              rmCpn => rmCpn.AwbSerialNumber);
                      

                      char[] delimiter = new char[] {'-'};

                      /* Iterate over each Grouping of Airline-DocNo-CpnNo, in the Rejected RM Coupon collection. */
                      foreach (IGrouping<string, int> rmCpn in rejectedRMCouponGroupings)
                      {
                          //Rejected RM Coupon Uniqueue Key
                          var couponGroupKeyParts = rmCpn.Key.Split(delimiter);
                          var couponGroupKey_AwbIssuingAirline = couponGroupKeyParts[0];
                          var couponGroupKey_AwbSerialNumber = couponGroupKeyParts[1];

                          int rejectedMemoCouponCount = rmCpn.Count();

                          /* Check if rejection invoice has that combination for same number of times. */
                          int rejectingMemoCouponCount = rejectionMemoRecord.CouponBreakdownRecord.Count(
                              cpn =>
                              cpn.AwbIssueingAirline == couponGroupKey_AwbIssuingAirline &&
                              cpn.AwbSerialNumber == long.Parse(couponGroupKey_AwbSerialNumber));

                          if (rejectedMemoCouponCount != rejectingMemoCouponCount)
                          {
                              /* Report Error -
                         * Error Code - RejectionMemoCouponMissing = "BCGO_10402"
                         * Error Description - Mismatch in AWB <yyy-yyyyyyy>. It was billed <a> time(s) in the rejected RM; and <b> time(s) in this RM. 
                         *                     Other mismatches if any are not included in this report.
                         */
                              string errorDescription =
                                  string.Format(
                                      Messages.ResourceManager.GetString(
                                          CargoErrorCodes.CargoRMCouponMismatchFileValidation),
                                      couponGroupKey_AwbIssuingAirline, couponGroupKey_AwbSerialNumber,
                                      rejectedMemoCouponCount, rejectingMemoCouponCount);

                              var validationExceptionDetail =
                                  CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                       exceptionDetailsList.Count() + 1,
                                                                       fileSubmissionDate,
                                                                       "Rejection Memo",
                                                                       rejectionMemoRecord.
                                                                           RejectionMemoNumber,
                                                                       invoice,
                                                                       fileName,
                                                                       ErrorLevels.
                                                                           ErrorLevelRejectionMemo,
                                                                       CargoErrorCodes.
                                                                           CargoRMCouponMismatchFileValidation,
                                                                       ErrorStatus.X,
                                                                       rejectionMemoRecord.BillingCode,
                                                                       rejectionMemoRecord,
                                                                       formatedErrorDescriptionText: errorDescription);
                              exceptionDetailsList.Add(validationExceptionDetail);

                              isValid = false;

                              /* error description should report the first mismatch identified */
                              break;
                          }
                          //else
                          //{
                          //    /* Validation Pass - For Logical Completion */
                          //}
                      }
                      stopwatch.Stop();
                      Logger.InfoFormat("Time elapsed for AWB Breakdowns Rejections Validation: {0}", stopwatch.Elapsed);
                  }
              }

          #endregion

            var prevDate = new DateTime(yourInvoice.BillingYear, yourInvoice.BillingMonth, 1);
            var prevInvExRate = exchangeRateRepository.Get(ex => ex.CurrencyId == yourInvoice.ListingCurrencyId && ex.EffectiveFromDate <= prevDate && ex.EffectiveToDate >= prevDate).FirstOrDefault();
            //Billing Memo Rejection.         
            if (rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.BMNumber)
            {
              if (rejectionMemoRecord.YourBillingMemoNumber != null && !string.IsNullOrEmpty(rejectionMemoRecord.YourBillingMemoNumber.Trim()))
              {
                if (rejectionMemoRecord.RejectionStage == 1)
                {

                  // Get rejection invoice with RM and RM Coupon for Rejection Stage 2 and 3.
                  yourInvoice = GetInvoiceWithBMCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                        rejectionMemoRecord.YourInvoiceBillingMonth,
                                                        rejectionMemoRecord.YourInvoiceBillingYear,
                                                        rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                        billingMemberId,
                                                        invoice.BillingMemberId);

                  var yourBillingMemoRecordList =
                    yourInvoice.CGOBillingMemo.Where(
                      billingMemo => billingMemo.BillingMemoNumber != null && billingMemo.BillingMemoNumber.Trim().ToUpper() == rejectionMemoRecord.YourBillingMemoNumber.Trim().ToUpper()).ToList();
                  //If Billing memo not found in your invoice then raise an error.
                  if (yourBillingMemoRecordList.Count() != 1)
                  {
                    //Logger.InfoFormat("Your Billing Memo Record: {0} is not found", rejectionMemoRecord.YourBillingMemoNumber);
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Your Billing Memo Number",
                                                                                         rejectionMemoRecord.YourBillingMemoNumber,
                                                                                         invoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         CargoErrorCodes.AuditTrailFailForYourBillingMemoNumber,
                                                                                         ErrorStatus.C,
                                                                                         rejectionMemoRecord.BillingCode,
                                                                                         rejectionMemoRecord,
                                                                                         islinkingError: true);
                    exceptionDetailsList.Add(validationExceptionDetail);
                    isValid = false;
                  }
                  else
                  {
                    if (yourBillingMemoRecordList.FirstOrDefault() != null)
                    {
                      //Logger.InfoFormat("Your Billing Memo Record: {0} is found", rejectionMemoRecord.YourBillingMemoNumber);
                      yourBillingMemoRecord = yourBillingMemoRecordList.FirstOrDefault();
                      
                      //SCP219674 - Billing Memos with 6A & 6B can be rejected
                      if (yourBillingMemoRecord.ReasonCode == "6A" || yourBillingMemoRecord.ReasonCode == "6B")
                      {
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                                                exceptionDetailsList.Count() + 1,
                                                                                                                fileSubmissionDate,
                                                                                                                "Your Billing Memo Number",
                                                                                                                rejectionMemoRecord.YourBillingMemoNumber,
                                                                                                                invoice,
                                                                                                                fileName,
                                                                                                                ErrorLevels.ErrorLevelRejectionMemo,
                                                                                                                ErrorCodes.BMWithReasonCode6A6BcannotRejected,
                                                                                                                ErrorStatus.X,
                                                                                                                rejectionMemoRecord.BillingCode,
                                                                                                                rejectionMemoRecord,
                                                                                                                islinkingError: true);
                        exceptionDetailsList.Add(validationExceptionDetail);
                        isValid = false;
                      }
                      else
                      {

                        IsBmCmRmFound = true;
                        //CMP#459:Validate Amounts
                        isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts,
                                                                    prevInvExRate,
                                                                    currInvExRate,
                                                                    rejectionMemoRecord,
                                                                    exceptionDetailsList,
                                                                    invoice,
                                                                    yourInvoice,
                                                                    null,
                                                                    null,
                                                                    fileName,
                                                                    fileSubmissionDate);
                      }
                    }
                  }
                //CMP#650
                  if (yourBillingMemoRecordList.Count > 0)
                  {
                      string errorMessage = ValidateCargoReasonCode(rejectionMemoRecord, yourBillingMemoRecord.ReasonCode, false, false);

                      if (!string.IsNullOrEmpty(errorMessage))
                      {
                        var splitExceptioncode = errorMessage.Split("||".ToArray(), StringSplitOptions.RemoveEmptyEntries);
                        var exceptionCode = splitExceptioncode[0];
                        var errorDescription = splitExceptioncode[1];
                        var submissionFormat = Path.GetExtension(fileName).ToUpper().Equals(".XML") ? ((int)SubmissionMethod.IsXml).ToString() : ((int)SubmissionMethod.IsIdec).ToString();
 
                        exceptionDetailsList.Add(new IsValidationExceptionDetail
                                                   {
                                                     SerialNo = exceptionDetailsList.Count() + 1,
                                                     BillingEntityCode = invoice.BillingMember != null ? invoice.BillingMember.MemberCodeNumeric : string.Empty,
                                                     BilledEntityCode = invoice.BilledMember != null ? invoice.BilledMember.MemberCodeNumeric : string.Empty,
                                                     ChargeCategoryOrBillingCode = CargoBillingCodeToEnumMap.ContainsKey(rejectionMemoRecord.BillingCode) ? 
                                                     CargoBillingCodeToEnumMap[rejectionMemoRecord.BillingCode] : string.Empty,
                                                     CategoryOfBilling = invoice.BillingCategoryId.ToString(),
                                                     SubmissionFormat = submissionFormat,
                                                     ErrorStatus = ((int) ErrorStatus.X).ToString(),
                                                     ClearanceMonth = invoice.BillingYear + invoice.BillingMonth.ToString().PadLeft(2, '0'), PeriodNumber = invoice.BillingPeriod,
                                                     BillingFileSubmissionDate = fileSubmissionDate.ToString("yyyyMMdd"),
                                                     LinkedDocNo = null,
                                                     ErrorDescription = errorDescription,
                                                     FieldName = "Reason Code",
                                                     FieldValue = rejectionMemoRecord.ReasonCode,
                                                     BatchUpdateAllowed = false,
                                                     InvoiceNumber = invoice.InvoiceNumber,
                                                     DocumentNo = rejectionMemoRecord.RejectionMemoNumber,
                                                     SourceCodeId = string.Empty,
                                                     ErrorLevel = ErrorLevels.ErrorLevelRejectionMemo,
                                                     ExceptionCode = exceptionCode,
                                                     FileName = Path.GetFileName(fileName),
                                                     LineItemOrBatchNo = rejectionMemoRecord.BatchSequenceNumber,
                                                     LineItemDetailOrSequenceNo = rejectionMemoRecord.RecordSequenceWithinBatch,
                                                     Id = Guid.NewGuid(),
                                                     PkReferenceId = rejectionMemoRecord.Id.Value()
                                                   });
                          rejectionMemoRecord.TransactionStatus = TransactionStatus.ErrorNonCorrectable;
                          isValid = false;
                      }
                  }
                }
                else if (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3)
                {
                  var yourRejectionMemoRecordList =
                    yourInvoice.CGORejectionMemo.Where(
                      rejectionRec =>
                      rejectionRec.RejectionMemoNumber == rejectionMemoRecord.YourRejectionNumber && rejectionRec.YourBillingMemoNumber.Trim() == rejectionMemoRecord.YourBillingMemoNumber.Trim()).
                      ToList();

                  if (yourRejectionMemoRecordList.Count() > 1)
                  {
                    Logger.InfoFormat("There are multiple record found for rejection memo - " + rejectionMemoRecord.YourRejectionNumber);
                  }

                  //if your invoice is found then stage 1 or stage 2 Rejection memo should match irrespective of ignoreValidationInMigrationPeriod flag value.
                  if (yourRejectionMemoRecordList.Count() == 0)
                  {
                    Logger.InfoFormat("Your Rejection Memo: {0} not found", rejectionMemoRecord.YourRejectionNumber);
                    var isYourRejectionMemoRecordList = yourInvoice.CGORejectionMemo.Where(rejectionRec => rejectionRec.RejectionMemoNumber == rejectionMemoRecord.YourRejectionNumber).ToList();
                    //if Rejection memo not found raise an error.
                    if (isYourRejectionMemoRecordList.Count() == 0)
                    {
                      var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                           exceptionDetailsList.Count() + 1,
                                                                                           fileSubmissionDate,
                                                                                           "Your Rejection Number",
                                                                                           rejectionMemoRecord.YourRejectionNumber,
                                                                                           invoice,
                                                                                           fileName,
                                                                                           ErrorLevels.ErrorLevelRejectionMemo,
                                                                                           CargoErrorCodes.AuditTrailFailForYourRejectionMemoNumber,
                                                                                           ErrorStatus.C,
                                                                                           rejectionMemoRecord.BillingCode,
                                                                                           rejectionMemoRecord,
                                                                                           islinkingError: true);
                      exceptionDetailsList.Add(validationExceptionDetail);
                      isValid = false;
                    }
                    else
                    {
                      var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                           exceptionDetailsList.Count() + 1,
                                                                                           fileSubmissionDate,
                                                                                           "Fim BM CM Number",
                                                                                           rejectionMemoRecord.YourRejectionNumber,
                                                                                           invoice,
                                                                                           fileName,
                                                                                           ErrorLevels.ErrorLevelRejectionMemo,
                                                                                           CargoErrorCodes.AuditTrailFailForBmNumber,
                                                                                           ErrorStatus.C,
                                                                                           rejectionMemoRecord.BillingCode,
                                                                                           rejectionMemoRecord,
                                                                                           islinkingError: true);
                      exceptionDetailsList.Add(validationExceptionDetail);
                      isValid = false;
                    }
                  }
                    //Validate Rejection memo stage.
                  else if (yourRejectionMemoRecordList.FirstOrDefault() != null && yourRejectionMemoRecordList.FirstOrDefault().RejectionStage != (rejectionMemoRecord.RejectionStage - 1))
                  {
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Rejection Stage",
                                                                                         rejectionMemoRecord.RejectionStage.ToString(),
                                                                                         invoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         CargoErrorCodes.InvalidYourInvoiceRejectionStage,
                                                                                         ErrorStatus.X,
                                                                                         rejectionMemoRecord.BillingCode,
                                                                                         rejectionMemoRecord);
                    exceptionDetailsList.Add(validationExceptionDetail);
                    isValid = false;
                  }

                  if (yourRejectionMemoRecordList.Count() > 0 && yourRejectionMemoRecordList.FirstOrDefault() != null)
                  {
                    Logger.InfoFormat("Your Rejection Memo: {0} is found", rejectionMemoRecord.YourRejectionNumber);
                    yourRejectionMemoRecord = yourRejectionMemoRecordList.FirstOrDefault();
                    IsBmCmRmFound = true;
                    //CMP#459:Validate Amounts
                    isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts,
                                                                prevInvExRate,
                                                                currInvExRate,
                                                                rejectionMemoRecord,
                                                                exceptionDetailsList,
                                                                invoice,
                                                                yourInvoice,
                                                                null,
                                                                null,
                                                                fileName,
                                                                fileSubmissionDate);
                  }
                    // CMP#650
                    if (yourRejectionMemoRecordList.Count() > 0)
                  {
                      string errorMessage = ValidateCargoReasonCode(rejectionMemoRecord, yourRejectionMemoRecord.ReasonCode, false, false);
                      Logger.InfoFormat("Error returned: {0}", errorMessage);
                      if (!string.IsNullOrWhiteSpace(errorMessage))
                      {
                      var splitExceptioncode = errorMessage.Split("||".ToArray(), StringSplitOptions.RemoveEmptyEntries);
                      var exceptionCode = splitExceptioncode[0];
                      var errorDescription = splitExceptioncode[1];
                      var submissionFormat = Path.GetExtension(fileName).ToUpper().Equals(".XML") ? ((int)SubmissionMethod.IsXml).ToString() : ((int)SubmissionMethod.IsIdec).ToString();


                      
                          exceptionDetailsList.Add(new IsValidationExceptionDetail
                          {
                            SerialNo = exceptionDetailsList.Count() + 1,
                            BillingEntityCode = invoice.BillingMember != null ? invoice.BillingMember.MemberCodeNumeric : string.Empty,
                            BilledEntityCode = invoice.BilledMember != null ? invoice.BilledMember.MemberCodeNumeric : string.Empty,
                            ChargeCategoryOrBillingCode = CargoBillingCodeToEnumMap.ContainsKey(rejectionMemoRecord.BillingCode) ? 
                            CargoBillingCodeToEnumMap[rejectionMemoRecord.BillingCode] : string.Empty,
                            CategoryOfBilling = invoice.BillingCategoryId.ToString(),
                            SubmissionFormat = submissionFormat,
                            ErrorStatus = ((int)ErrorStatus.X).ToString(),
                            ClearanceMonth = invoice.BillingYear + invoice.BillingMonth.ToString().PadLeft(2, '0'),
                            PeriodNumber = invoice.BillingPeriod,
                            BillingFileSubmissionDate = fileSubmissionDate.ToString("yyyyMMdd"),
                            LinkedDocNo = null,
                            ErrorDescription = errorDescription,
                            FieldName = "Reason Code",
                            FieldValue = rejectionMemoRecord.ReasonCode,
                            BatchUpdateAllowed = false,
                            InvoiceNumber = invoice.InvoiceNumber,
                            DocumentNo = rejectionMemoRecord.RejectionMemoNumber,
                            SourceCodeId = string.Empty,
                            ErrorLevel = ErrorLevels.ErrorLevelRejectionMemo,
                            ExceptionCode = exceptionCode,
                            FileName = Path.GetFileName(fileName),
                            LineItemOrBatchNo = rejectionMemoRecord.BatchSequenceNumber,
                            LineItemDetailOrSequenceNo = rejectionMemoRecord.RecordSequenceWithinBatch,
                            Id = Guid.NewGuid(),
                            PkReferenceId = rejectionMemoRecord.Id.Value()
                          });
                          rejectionMemoRecord.TransactionStatus = TransactionStatus.ErrorNonCorrectable;

                          isValid = false;
                      }
                  }
                }

              } //if billing memo number not provided raise an error.
              else
              {
                var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                     exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Your Billing Memo Number",
                                                                                     rejectionMemoRecord.YourBillingMemoNumber,
                                                                                     invoice,
                                                                                     fileName,
                                                                                     ErrorLevels.ErrorLevelRejectionMemo,
                                                                                     CargoErrorCodes.InvalidYourBillingMemoNumber,
                                                                                     ErrorStatus.C,
                                                                                     rejectionMemoRecord.BillingCode,
                                                                                     rejectionMemoRecord);
                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;
              }
            }
            // Credit-note Rejection.
              if (rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.CMNumber)
              {
                  if (rejectionMemoRecord.YourBillingMemoNumber != null &&
                      !string.IsNullOrEmpty(rejectionMemoRecord.YourBillingMemoNumber.Trim()))
                  {
                      if (rejectionMemoRecord.RejectionStage == 1)
                      {

                          // Get rejection invoice with RM and RM Coupon for Rejection Stage 2 and 3.
                          yourInvoice = GetInvoiceWithCMCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                                rejectionMemoRecord.YourInvoiceBillingMonth,
                                                                rejectionMemoRecord.YourInvoiceBillingYear,
                                                                rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                                billingMemberId,
                                                                invoice.BillingMemberId);

                          var yourCreditMemoRecordList =
                              yourInvoice.CGOCreditMemo.Where(
                                  creditMemo =>
                                  creditMemo.CreditMemoNumber != null &&
                                  creditMemo.CreditMemoNumber.Trim().ToUpper() ==
                                  rejectionMemoRecord.YourBillingMemoNumber.Trim().ToUpper()).ToList();
                          if (yourCreditMemoRecordList.Count() != 1)
                          {
                              //Logger.InfoFormat("Your Credit Memo Record: {0} is not found",rejectionMemoRecord.YourBillingMemoNumber);
                              var validationExceptionDetail =
                                  CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                       exceptionDetailsList.Count() + 1,
                                                                       fileSubmissionDate,
                                                                       "Your Credit Memo Number",
                                                                       rejectionMemoRecord.YourBillingMemoNumber,
                                                                       invoice,
                                                                       fileName,
                                                                       ErrorLevels.ErrorLevelRejectionMemo,
                                                                       CargoErrorCodes.
                                                                           AuditTrailFailForYourCreditMemoNumber,
                                                                       ErrorStatus.C,
                                                                       rejectionMemoRecord.BillingCode,
                                                                       rejectionMemoRecord,
                                                                       islinkingError: true);
                              exceptionDetailsList.Add(validationExceptionDetail);
                              isValid = false;
                          }
                          else
                          {
                              if (yourCreditMemoRecordList.FirstOrDefault() != null)
                              {
                                  yourCreditMemoRecord = yourCreditMemoRecordList.FirstOrDefault();
                                  //Logger.InfoFormat("Your Credit Memo: {0} is found",rejectionMemoRecord.YourBillingMemoNumber);
                                  IsBmCmRmFound = true;
                                  //CMP#459:Validate Amounts
                                  //All amounts of the rejected Stage 1 RM from the rejected invoice should match with the RM level amounts of the rejecting RM
                                  
                                  isValid =
                                      ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts,
                                                                        prevInvExRate,
                                                                        currInvExRate,
                                                                        rejectionMemoRecord,
                                                                        exceptionDetailsList,
                                                                        invoice,
                                                                        yourInvoice,
                                                                        null,
                                                                        null,
                                                                        fileName,
                                                                        fileSubmissionDate);
                              }
                          }
                      }
                      else if (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3)
                      {

                          if (string.IsNullOrWhiteSpace(rejectionMemoRecord.YourRejectionNumber))
                          {
                              var validationExceptionDetail =
                                  CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                       exceptionDetailsList.Count() + 1,
                                                                       fileSubmissionDate,
                                                                       "Your Rejection Memo Number",
                                                                       rejectionMemoRecord.YourRejectionNumber,
                                                                       invoice,
                                                                       fileName,
                                                                       ErrorLevels.ErrorLevelRejectionMemo,
                                                                       CargoErrorCodes.
                                                                           AuditTrailFailForYourRejectionMemoNumber,
                                                                       ErrorStatus.C,
                                                                       rejectionMemoRecord.BillingCode,
                                                                       rejectionMemoRecord);
                              exceptionDetailsList.Add(validationExceptionDetail);
                              isValid = false;
                          }
                          else
                          {
                              var yourRejectionMemoRecordList =
                                  yourInvoice.CGORejectionMemo.Where(
                                      rejectionRec =>
                                      rejectionRec.RejectionMemoNumber == rejectionMemoRecord.YourRejectionNumber &&
                                      rejectionRec.YourBillingMemoNumber.Trim() ==
                                      rejectionMemoRecord.YourBillingMemoNumber.Trim()).ToList
                                      ();

                              if (yourRejectionMemoRecordList.Count() > 1)
                              {
                                  Logger.InfoFormat("There are multiple record found for rejection memo - " +
                                                    rejectionMemoRecord.YourRejectionNumber);
                              }
                              //if Rejection Memo not found then raise an error.
                              if (yourRejectionMemoRecordList.Count() == 0)
                              {
                                  Logger.InfoFormat("Your Rejection Memo: {0} is not found",
                                                    rejectionMemoRecord.YourRejectionNumber);
                                  var isYourRejectionMemoRecordList =
                                      yourInvoice.CGORejectionMemo.Where(
                                          rejectionRec =>
                                          rejectionRec.RejectionMemoNumber == rejectionMemoRecord.YourRejectionNumber).
                                          ToList();

                                  if (isYourRejectionMemoRecordList.Count() == 0)
                                  {
                                      var validationExceptionDetail =
                                          CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                               exceptionDetailsList.Count() + 1,
                                                                               fileSubmissionDate,
                                                                               "Your Rejection Number",
                                                                               rejectionMemoRecord.YourRejectionNumber,
                                                                               invoice,
                                                                               fileName,
                                                                               ErrorLevels.ErrorLevelRejectionMemo,
                                                                               CargoErrorCodes.
                                                                                   AuditTrailFailForYourRejectionMemoNumber,
                                                                               ErrorStatus.C,
                                                                               rejectionMemoRecord.BillingCode,
                                                                               rejectionMemoRecord,
                                                                               islinkingError: true);
                                      exceptionDetailsList.Add(validationExceptionDetail);
                                      isValid = false;
                                  }
                                  else
                                  {
                                      var validationExceptionDetail =
                                          CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                               exceptionDetailsList.Count() + 1,
                                                                               fileSubmissionDate,
                                                                               "Fim BM CM Number",
                                                                               rejectionMemoRecord.YourRejectionNumber,
                                                                               invoice,
                                                                               fileName,
                                                                               ErrorLevels.ErrorLevelRejectionMemo,
                                                                               CargoErrorCodes.AuditTrailFailForCmNumber,
                                                                               ErrorStatus.C,
                                                                               rejectionMemoRecord.BillingCode,
                                                                               rejectionMemoRecord,
                                                                               islinkingError: true);
                                      exceptionDetailsList.Add(validationExceptionDetail);
                                      isValid = false;
                                  }
                              }
                              else if (yourRejectionMemoRecordList.FirstOrDefault() != null &&
                                       yourRejectionMemoRecordList.FirstOrDefault().RejectionStage !=
                                       (rejectionMemoRecord.RejectionStage - 1))
                              {
                                  var validationExceptionDetail =
                                      CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                           exceptionDetailsList.Count() + 1,
                                                                           fileSubmissionDate,
                                                                           "Rejection Stage",
                                                                           rejectionMemoRecord.RejectionStage.
                                                                               ToString(),
                                                                           invoice,
                                                                           fileName,
                                                                           ErrorLevels.ErrorLevelRejectionMemo,
                                                                           CargoErrorCodes.
                                                                               InvalidYourInvoiceRejectionStage,
                                                                           ErrorStatus.X,
                                                                           rejectionMemoRecord.BillingCode,
                                                                           rejectionMemoRecord);
                                  exceptionDetailsList.Add(validationExceptionDetail);
                                  isValid = false;
                              }

                              if (yourRejectionMemoRecordList.Count() > 0 &&
                                  yourRejectionMemoRecordList.FirstOrDefault() != null)
                              {
                                  yourRejectionMemoRecord = yourRejectionMemoRecordList.FirstOrDefault();
                                  Logger.InfoFormat("Your Rejection Memo: {0} is found",
                                                    rejectionMemoRecord.YourRejectionNumber);
                                  IsBmCmRmFound = true;
                                  //CMP#459:Validate Amounts
                                  //All amounts of the rejected Stage 1 RM from the rejected invoice should match with the RM level amounts of the rejecting RM
                                  
                                  isValid =
                                      ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts,
                                                                        prevInvExRate,
                                                                        currInvExRate,
                                                                        rejectionMemoRecord,
                                                                        exceptionDetailsList,
                                                                        invoice,
                                                                        yourInvoice,
                                                                        null,
                                                                        null,
                                                                        fileName,
                                                                        fileSubmissionDate);
                              }
                          }
                      }
                  }
                  else
                  {
                      var validationExceptionDetail =
                          CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                               exceptionDetailsList.Count() + 1,
                                                               fileSubmissionDate,
                                                               "Your Credit Memo Number",
                                                               rejectionMemoRecord.YourBillingMemoNumber,
                                                               invoice,
                                                               fileName,
                                                               ErrorLevels.ErrorLevelRejectionMemo,
                                                               CargoErrorCodes.InvalidYourCreditMemoNumber,
                                                               ErrorStatus.C,
                                                               rejectionMemoRecord.BillingCode,
                                                               rejectionMemoRecord,
                                                               islinkingError: true);
                      exceptionDetailsList.Add(validationExceptionDetail);
                      isValid = false;
                  }
              }

              //Validate rejection memo record
              if ((rejectionMemoRecord.BMCMIndicatorId == 0 ||
                   rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.None) &&
                  (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3))
              {
                  if (string.IsNullOrWhiteSpace(rejectionMemoRecord.YourRejectionNumber))
                  {
                      var validationExceptionDetail =
                          CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                               exceptionDetailsList.Count() + 1,
                                                               fileSubmissionDate,
                                                               "Your Rejection Memo Number",
                                                               rejectionMemoRecord.YourRejectionNumber,
                                                               invoice,
                                                               fileName,
                                                               ErrorLevels.ErrorLevelRejectionMemo,
                                                               CargoErrorCodes.AuditTrailFailForYourRejectionMemoNumber,
                                                               ErrorStatus.C,
                                                               rejectionMemoRecord.BillingCode,
                                                               rejectionMemoRecord,
                                                               islinkingError: true);
                      exceptionDetailsList.Add(validationExceptionDetail);
                      isValid = false;
                  }
                  else
                  {
                      var yourRejectionMemoRecordList =
                          yourInvoice.CGORejectionMemo.Where(
                              rejectionRec =>
                              rejectionRec.RejectionMemoNumber == rejectionMemoRecord.YourRejectionNumber).ToList();

                      if (yourRejectionMemoRecordList.Count() > 0)
                      {
                        var yourRejMemoRec = yourRejectionMemoRecordList.FirstOrDefault();
                        //CMP#650: For Standlone case.
                        string errorMessage = ValidateCargoReasonCode(rejectionMemoRecord, yourRejMemoRec.ReasonCode, false, false);
                        Logger.InfoFormat("Error returned: {0}", errorMessage);
                        if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                          var splitExceptioncode = errorMessage.Split("||".ToArray(), StringSplitOptions.RemoveEmptyEntries);
                          var exceptionCode = splitExceptioncode[0];
                          var errorDescription = splitExceptioncode[1];
                          var submissionFormat = Path.GetExtension(fileName).ToUpper().Equals(".XML") ? ((int)SubmissionMethod.IsXml).ToString() : ((int)SubmissionMethod.IsIdec).ToString();
                         
                            exceptionDetailsList.Add(new IsValidationExceptionDetail
                            {
                              SerialNo = exceptionDetailsList.Count() + 1,
                              BillingEntityCode = invoice.BillingMember != null ? invoice.BillingMember.MemberCodeNumeric : string.Empty,
                              BilledEntityCode = invoice.BilledMember != null ? invoice.BilledMember.MemberCodeNumeric : string.Empty,
                              ChargeCategoryOrBillingCode = CargoBillingCodeToEnumMap.ContainsKey(rejectionMemoRecord.BillingCode) ?
                              CargoBillingCodeToEnumMap[rejectionMemoRecord.BillingCode] : string.Empty,
                              CategoryOfBilling = invoice.BillingCategoryId.ToString(),
                              SubmissionFormat = submissionFormat,
                              ErrorStatus = ((int)ErrorStatus.X).ToString(),
                              ClearanceMonth = invoice.BillingYear + invoice.BillingMonth.ToString().PadLeft(2, '0'),
                              PeriodNumber = invoice.BillingPeriod,
                              BillingFileSubmissionDate = fileSubmissionDate.ToString("yyyyMMdd"),
                              LinkedDocNo = null,
                              ErrorDescription = errorDescription,
                              FieldName = "Reason Code",
                              FieldValue = rejectionMemoRecord.ReasonCode,
                              BatchUpdateAllowed = false,
                              InvoiceNumber = invoice.InvoiceNumber,
                              DocumentNo = rejectionMemoRecord.RejectionMemoNumber,
                              SourceCodeId = string.Empty,
                              ErrorLevel = ErrorLevels.ErrorLevelRejectionMemo,
                              ExceptionCode = exceptionCode,
                              FileName = Path.GetFileName(fileName),
                              LineItemOrBatchNo = rejectionMemoRecord.BatchSequenceNumber,
                              LineItemDetailOrSequenceNo = rejectionMemoRecord.RecordSequenceWithinBatch,
                              Id = Guid.NewGuid(),
                              PkReferenceId = rejectionMemoRecord.Id.Value()
                            });
                            rejectionMemoRecord.TransactionStatus = TransactionStatus.ErrorNonCorrectable;

                            isValid = false;
                        }
                      }
                      if (yourRejectionMemoRecordList.Count() > 1)
                      {
                          Logger.InfoFormat("There are multiple record found for rejection memo - " +
                                            rejectionMemoRecord.YourRejectionNumber);
                      }

                      if (yourRejectionMemoRecordList.Count() == 0)
                      {
                          Logger.InfoFormat("Your Rejection Memo: {0} is not found",
                                            rejectionMemoRecord.YourRejectionNumber);
                          var validationExceptionDetail =
                              CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                   exceptionDetailsList.Count() + 1,
                                                                   fileSubmissionDate,
                                                                   "Your Rejection Number",
                                                                   rejectionMemoRecord.YourRejectionNumber,
                                                                   invoice,
                                                                   fileName,
                                                                   ErrorLevels.ErrorLevelRejectionMemo,
                                                                   CargoErrorCodes.
                                                                       AuditTrailFailForYourRejectionMemoNumber,
                                                                   ErrorStatus.C,
                                                                   rejectionMemoRecord.BillingCode,
                                                                   rejectionMemoRecord,
                                                                   islinkingError: true);
                          exceptionDetailsList.Add(validationExceptionDetail);
                          isValid = false;
                      }
                      else if (yourRejectionMemoRecordList.FirstOrDefault() != null &&
                               yourRejectionMemoRecordList.FirstOrDefault().RejectionStage !=
                               (rejectionMemoRecord.RejectionStage - 1))
                      {
                          var validationExceptionDetail =
                              CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                   exceptionDetailsList.Count() + 1,
                                                                   fileSubmissionDate,
                                                                   "Rejection Stage",
                                                                   rejectionMemoRecord.RejectionStage.ToString(),
                                                                   invoice,
                                                                   fileName,
                                                                   ErrorLevels.ErrorLevelRejectionMemo,
                                                                   CargoErrorCodes.InvalidYourInvoiceRejectionStage,
                                                                   ErrorStatus.X,
                                                                   rejectionMemoRecord.BillingCode,
                                                                   rejectionMemoRecord);
                          exceptionDetailsList.Add(validationExceptionDetail);
                          isValid = false;
                      }

                      if (yourRejectionMemoRecordList.Count() > 0 &&
                          yourRejectionMemoRecordList.FirstOrDefault() != null)
                      {
                          yourRejectionMemoRecord = yourRejectionMemoRecordList.FirstOrDefault();
                          Logger.InfoFormat("Your Rejection Memo: {0} is found", rejectionMemoRecord.YourRejectionNumber);
                          IsBmCmRmFound = true;
                          //CMP#459:Validate Amounts
                          //All amounts of the rejected Stage 1 RM from the rejected invoice should match with the RM level amounts of the rejecting RM
                          
                          isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts,
                                                                      prevInvExRate,
                                                                      currInvExRate,
                                                                      rejectionMemoRecord,
                                                                      exceptionDetailsList,
                                                                      invoice,
                                                                      yourInvoice,
                                                                      null,
                                                                      null,
                                                                      fileName,
                                                                      fileSubmissionDate);
                      }
                  }
              }
              if ((rejectionMemoRecord.BMCMIndicatorId == 0 ||
                   rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.None) &&
                  (rejectionMemoRecord.RejectionStage == 1))
              {
                  IsBmCmRmFound = true;
              }
          }
      }
        // Memo level VAT breakdown should not be provided when RM/BM/CM has AWB breakdown information.
      if (rejectionMemoRecord.RejectionMemoVat.Count > 0 && rejectionMemoRecord.CouponBreakdownRecord.Count > 0)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "RM Vat Details", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatPresentWhenAWBBreakdownExists, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);

        exceptionDetailsList.Add(validationExceptionDetail);

        isValid = false;
      }// End if

      // Validate RM Vat Breakdowns 
      foreach (var rejectionMemoVat in rejectionMemoRecord.RejectionMemoVat)
      {
        isValid = ValidateParsedCargoVat(rejectionMemoVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelRejectionMemoVat, fileSubmissionDate, rejectionMemoRecord.BatchSequenceNumber, rejectionMemoRecord.RecordSequenceWithinBatch, rejectionMemoRecord.RejectionMemoNumber, rejectionMemoRecord.BillingCode, null, false, true);
      }

      //Validate RM Coupon Breakdown Record
      RMAwb previousBreakdownRecord = null;
      bool isAwbLink = true;
      ExchangeRate prevInvExchangeRate = null;
        if (yourInvoice!=null)
        {
            var prevDate = new DateTime(yourInvoice.BillingYear, yourInvoice.BillingMonth, 1);
            prevInvExchangeRate = exchangeRateRepository.Get(ex => ex.CurrencyId == yourInvoice.ListingCurrencyId && ex.EffectiveFromDate <= prevDate && ex.EffectiveToDate >= prevDate).FirstOrDefault();
        }
        foreach (var rejectionMemoCouponBreakdownRecord in rejectionMemoRecord.CouponBreakdownRecord)
        {
            //Validate serial number
            ValidateRMCouponSerialNumber(rejectionMemoRecord, ref previousBreakdownRecord, rejectionMemoCouponBreakdownRecord, exceptionDetailsList, invoice, fileName, fileSubmissionDate);
            //Validate rejection memo coupon breakdown record
            isValid = ValidateParsedRMAwbBreakdownRecord(rejectionMemoCouponBreakdownRecord,
                                                         exceptionDetailsList,
                                                         rejectionMemoRecord,
                                                         yourRejectionMemoRecord,
                                                         invoice,
                                                         yourInvoice,
                                                         fileName,
                                                         issuingAirline,
                                                         fileSubmissionDate,
                                                         exchangeRate,
                                                         transType,
                                                         transTypeMigration,
                                                         yourBillingMemoRecord,
                                                         yourCreditMemoRecord,
                                                         minAcceptableAmountsP,
                                                         minAcceptableAmountsC,
                                                         prevInvExchangeRate,
                                                         currInvExRate);
          if (!isValid) isAwbLink = isValid;
        }
      Logger.InfoFormat("AWB Breakdowns found : {0} ", isAwbLink);
      //if your invoice and your Fim Rm BM Cm and their coupons are matched then linking is successful
      if (IsBmCmRmFound && isAwbLink)
      {
          rejectionMemoRecord.IsLinkingSuccessful = true;
      }

      //Rejection memo total level validations
      ValidateParsedRejectionMemoTotals(rejectionMemoRecord, exceptionDetailsList, invoice, fileName, invoice.BillingCode, fileSubmissionDate);
      ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
      //// Update expiry date for purging.
      //rejectionMemoRecord.ExpiryDatePeriod = GetRejectionMemoExpiryDate(rejectionMemoRecord.RejectionStage, invoice, billingPeriod);

      // Validate Time Limit
      if (IsTransactionOutSideTimeLimit(rejectionMemoRecord, invoice, billingPeriod))
      {
        rejectionMemoRecord.ISValidationFlag += string.IsNullOrEmpty(rejectionMemoRecord.ISValidationFlag) ? TimeLimitFlag : ValidationFlagDelimeter + TimeLimitFlag;
      }

      // SCP ID : 72923 - BGEN_00007 - TG PAX file PIDECF-2172013010320130125200007.dat
      // Reason Remark Field should be Max 4000 Char

      if (rejectionMemoRecord.ReasonRemarks != null)
      {
          if (rejectionMemoRecord.ReasonRemarks.Length > MaxReasonRemarkCharLength)
          {

              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(),
                                                                                    exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate,
                                                                                     "Reason Remarks",
                                                                                     string.Empty,
                                                                                     invoice,
                                                                                     fileName,
                                                                                     ErrorLevels.ErrorLevelRejectionMemo,
                                                                                     ErrorCodes.MaxReasonRemarkCharLength,
                                                                                     ErrorStatus.X,
                                                                                     rejectionMemoRecord.BillingCode,
                                                                                     rejectionMemoRecord);

              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;

          }
      }
          /* CMP #671: Validation of PAX CGO Stage 2 & 3 Rejection Memo Reason Text */
          /* Check if validation is applicable or not */
      if (rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageTwo || rejectionMemoRecord.RejectionStage == (int)RejectionStage.StageThree)
      {
          /* CMP#671 - Validation Applicable */
          if (!ValidateReasonTextMinLength(cargoRejectionMemoRecord: rejectionMemoRecord, fileName: fileName,
                                           invoice: invoice, exceptionDetailsList: exceptionDetailsList,
                                           fileSubmissionDate: fileSubmissionDate))
          {
              /* Validation has failed - Error is already populated in Exception Details List */
              isValid = false;
          }
      }
        //else
          //{
          //    For Logical Completion - CMP#671 - Validtion is not Applicable
          //}
      

      return isValid;
    }

      

      ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
    ///// <summary>
    ///// Gets the rejection memo expiry date.
    ///// </summary>
    ///// <param name="rejectionStage">The rejection stage.</param>
    ///// <param name="invoice">The invoice.</param>
    ///// <param name="currentBillingPeriod">The current billing period.</param>
    ///// <returns></returns>
    //private DateTime GetRejectionMemoExpiryDate(int rejectionStage, CargoInvoice invoice, BillingPeriod? currentBillingPeriod)
    //{
    //  TransactionType transactionType;

    //  switch (rejectionStage)
    //  {
    //    case 1:
    //      transactionType = TransactionType.CargoRejectionMemoStage2;
    //      break;
    //    case 2:
    //      transactionType = TransactionType.CargoRejectionMemoStage3;
    //      break;
    //    case 3:
    //      transactionType = TransactionType.CargoCorrespondence;
    //      break;
    //    default:
    //      transactionType = TransactionType.CargoRejectionMemoStage2;
    //      break;
    //  }

    //  return ReferenceManager.GetExpiryDatePeriodMethod(transactionType, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, currentBillingPeriod);
    //}

    /// <summary>
    ///  To validate RMAwb record.
    /// </summary>
    /// <param name="awbBreakdownRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="parentMemo"></param>
    /// <param name="yourRejectionMemoRecord"></param>
    /// <param name="invoice"></param>
    /// <param name="yourInvoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exchangeRate"></param>
    /// <param name="transType"></param>
    /// <param name="transTypeMigration"></param>
    /// <param name="yourBillingMemo"></param>
    /// <param name="yourCreditMemo"></param>
    /// <param name="minAcceptableAmountsP"></param>
    /// <param name="minAcceptableAmountsC"></param>
    /// <returns></returns>
    private bool ValidateParsedRMAwbBreakdownRecord(RMAwb awbBreakdownRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoRejectionMemo parentMemo, CargoRejectionMemo yourRejectionMemoRecord, CargoInvoice invoice, CargoInvoice yourInvoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate, ExchangeRate exchangeRate, TransactionType transType, TransactionType transTypeMigration, CargoBillingMemo yourBillingMemo, CargoCreditMemo yourCreditMemo, List<MinAcceptableAmount> minAcceptableAmountsP, List<MinAcceptableAmount> minAcceptableAmountsC, ExchangeRate prevInvExRate = null, ExchangeRate currInvExRate = null)
    {
      var isValid = true;
      List<MinAcceptableAmount> couponMinAcceptableAmounts = null;
      //// Validate ticket issuing airline.
      isValid = ValidateAirWayBillIssuingAirline(awbBreakdownRecord, exceptionDetailsList, parentMemo, invoice, fileName, isValid, ErrorLevels.ErrorLevelRmAirwayBill, issuingAirline, fileSubmissionDate, parentMemo.RejectionMemoNumber, awbBreakdownRecord.AwbBillingCode);

      if (awbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        transType = TransactionType.CargoPrimePrepaid;
        couponMinAcceptableAmounts = minAcceptableAmountsP;
      }
      else if (awbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
        transType = TransactionType.CargoPrimeChargeCollect;
        couponMinAcceptableAmounts = minAcceptableAmountsC;
      }

      // Awb date should be YYMMDD
      if (!string.IsNullOrWhiteSpace(awbBreakdownRecord.AwbDateDisplayText) && Convert.ToInt32(awbBreakdownRecord.AwbDateDisplayText) > 0)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Date", awbBreakdownRecord.AwbDateDisplayText, invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill, CargoErrorCodes.InvalidAwbDate, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;

      }

      // Validate Date of carriage.
      if (!awbBreakdownRecord.TransferDate.HasValue)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Date Of Carriage", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill, CargoErrorCodes.InvalidDateOfCarriage, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      //Your invoice is returned by ValidateRejectionMemo method on the basis of yourInvoiceNumber, yourBillingDate
      //Validate linking of coupons with the database.
      if (yourInvoice != null)
      {
        if (parentMemo.BMCMIndicatorId == (int)BMCMIndicator.BMNumber)
        {
          if (yourBillingMemo != null)
          {
            var yourCouponRecords = yourBillingMemo.AwbBreakdownRecord.Where(awbRecord => awbRecord.AwbIssueingAirline == awbBreakdownRecord.AwbIssueingAirline && awbRecord.AwbSerialNumber == awbBreakdownRecord.AwbSerialNumber);

            if (yourCouponRecords.Count() == 0)
            {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "AWB Serial Number", Convert.ToString(awbBreakdownRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                CargoErrorCodes.AuditTrailFailForCouponNumber, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }
        else if (parentMemo.BMCMIndicatorId == (int)BMCMIndicator.CMNumber)
        {
          if (yourCreditMemo != null)
          {
            var yourCouponRecords = yourCreditMemo.AWBBreakdownRecord.Where(awbRecord => awbRecord.AwbIssueingAirline == awbBreakdownRecord.AwbIssueingAirline && awbRecord.AwbSerialNumber == awbBreakdownRecord.AwbSerialNumber);

            if (yourCouponRecords.Count() == 0)
            {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "AWB Serial Number", Convert.ToString(awbBreakdownRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                CargoErrorCodes.AuditTrailFailForCouponNumber, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }

        if (parentMemo.RejectionStage == 2 || parentMemo.RejectionStage == 3)
        {
            // CMP501: Stage 1 RM is found, i.e. linking succeeds at an RM to RM level And Stage 1 RM does not contain any Coupons then additional Coupons can be added
            if (yourRejectionMemoRecord != null && yourRejectionMemoRecord.CouponBreakdownRecord.Count > 0)
            {
                var yourCouponRecords =
                    yourRejectionMemoRecord.CouponBreakdownRecord.Where(
                        awbRecord => awbRecord.AwbIssueingAirline == awbBreakdownRecord.AwbIssueingAirline && awbRecord.AwbSerialNumber == awbBreakdownRecord.AwbSerialNumber);

                if (yourCouponRecords.Count() == 0)
                {
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "AWB Serial Number",
                                                                                         Convert.ToString(awbBreakdownRecord.AwbSerialNumber),
                                                                                         invoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRmAirwayBill,
                                                                                         CargoErrorCodes.AuditTrailFailForCouponNumber,
                                                                                         ErrorStatus.X,
                                                                                         awbBreakdownRecord.AwbBillingCode,
                                                                                         parentMemo,
                                                                                         false,
                                                                                         string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
                    exceptionDetailsList.Add(validationExceptionDetail);
                    isValid = false;
                }
            }
        }
        else if ((parentMemo.BMCMIndicatorId == 0 ||parentMemo.BMCMIndicatorId == (int)BMCMIndicator.None) && parentMemo.RejectionStage == 1)
        {
          var yourCouponRecords = yourInvoice.AwbDataRecord.Where(awbRecord => awbRecord.AwbIssueingAirline == awbBreakdownRecord.AwbIssueingAirline && awbRecord.AwbSerialNumber == awbBreakdownRecord.AwbSerialNumber);

          if (yourCouponRecords.Count() == 0)
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "AWB Serial Number", Convert.ToString(awbBreakdownRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                CargoErrorCodes.AuditTrailFailForCouponNumber, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          else
          {
              //CMP#459:Validate Amounts
              bool outcomeOfMismatchOnRmBilledOrAllowedAmounts = ValidationCache.Instance.CgoRmBilledAllowedAmount; 
              isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts, prevInvExRate, currInvExRate, parentMemo, exceptionDetailsList, invoice, yourInvoice, awbBreakdownRecord, yourCouponRecords.ToList(), fileName, fileSubmissionDate);
          }
        }
      }


      // Validate IscAmount 
      if ((int)awbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
        var iscAllowedCalulatedAmount = awbBreakdownRecord.AllowedAmtSubToIsc * (awbBreakdownRecord.AllowedIscPercentage/100);

        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.AllowedIscAmount, iscAllowedCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "ISC Amount Allowed", Convert.ToString(awbBreakdownRecord.AllowedIscAmount), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidIscAllowedAmountForChargeCollect, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber), iscAllowedCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        var iscAcceptedCalulatedAmount = awbBreakdownRecord.AcceptedAmtSubToIsc * (awbBreakdownRecord.AcceptedIscPercentage / 100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.AcceptedIscAmount, iscAcceptedCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "ISC Amount Accepted", Convert.ToString(awbBreakdownRecord.AcceptedIscAmount), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidIscAcceptedAmountForChargeCollect, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber), iscAcceptedCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }
      else if ((int)awbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
          var iscAllowedCalulatedAmount = ((awbBreakdownRecord.BilledWeightCharge.HasValue ? awbBreakdownRecord.BilledWeightCharge.Value : 0) + (awbBreakdownRecord.BilledValuationCharge.HasValue ? awbBreakdownRecord.BilledValuationCharge.Value : 0)) * (awbBreakdownRecord.AllowedIscPercentage / 100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.AllowedIscAmount, iscAllowedCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "ISC Amount Allowed", Convert.ToString(awbBreakdownRecord.AllowedIscAmount), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidIscAllowedAmountForPrepaid, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber), iscAllowedCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        var iscAcceptedCalulatedAmount = ((awbBreakdownRecord.AcceptedWeightCharge.HasValue ? awbBreakdownRecord.AcceptedWeightCharge.Value : 0) + (awbBreakdownRecord.AcceptedValuationCharge.HasValue ? awbBreakdownRecord.AcceptedValuationCharge.Value : 0)) * (awbBreakdownRecord.AcceptedIscPercentage/100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.AcceptedIscAmount, iscAcceptedCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "ISC Amount Accepted", Convert.ToString(awbBreakdownRecord.AcceptedIscAmount), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidIscAcceptedAmountForPrepaid, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber), iscAcceptedCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }

      // Validate Awb serialNo
      if (awbBreakdownRecord.AwbSerialNumber.Equals(0))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Airway Bill Serial Number", Convert.ToString(awbBreakdownRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidAwbSerialNo, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (!ValidateAwbSerialNumber(awbBreakdownRecord.AwbSerialNumber, awbBreakdownRecord.AwbCheckDigit) || awbBreakdownRecord.AwbCheckDigit == 9)
      {
        awbBreakdownRecord.ISValidationFlag += string.IsNullOrEmpty(awbBreakdownRecord.ISValidationFlag) ? CheckDigitValidationFlag : ValidationFlagDelimeter + CheckDigitValidationFlag;
      }

      // Validate Awb CheckDigit.
      if ((awbBreakdownRecord.AwbCheckDigit < 0) || (awbBreakdownRecord.AwbCheckDigit > 6 && awbBreakdownRecord.AwbCheckDigit != 9))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Airway Bill Check Digit", Convert.ToString(awbBreakdownRecord.AwbCheckDigit), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidAwbCheckDigit, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      var isValidOrigin = true;
      var isValidDestination = true;

      //Validate Origin Awb
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
      Date: 08/07/2013
      Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
            is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (!IsValidCityAirportCode(awbBreakdownRecord.ConsignmentOriginId))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "RM Awb Origin", Convert.ToString(awbBreakdownRecord.ConsignmentOriginId), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.OriginofAwbIsInvalid, ErrorStatus.C, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidOrigin = false;
      }
      
      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(awbBreakdownRecord.ConsignmentOriginId) && string.IsNullOrWhiteSpace(awbBreakdownRecord.ConsignmentOriginId))
      {
          awbBreakdownRecord.ConsignmentOriginId = awbBreakdownRecord.ConsignmentOriginId.Trim();
      }

      //Validate Destination Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
              is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (!IsValidCityAirportCode(awbBreakdownRecord.ConsignmentDestinationId))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "RM Awb Destination", Convert.ToString(awbBreakdownRecord.ConsignmentDestinationId), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.DestinationofAwbIsInvalid, ErrorStatus.C, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidDestination = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(awbBreakdownRecord.ConsignmentDestinationId) && string.IsNullOrWhiteSpace(awbBreakdownRecord.ConsignmentDestinationId))
      {
          awbBreakdownRecord.ConsignmentDestinationId = awbBreakdownRecord.ConsignmentDestinationId.Trim();
      }

      //Origin of awb and Destination of awb should not be same.
      if (awbBreakdownRecord.ConsignmentOriginId != null && awbBreakdownRecord.ConsignmentDestinationId != null && isValidOrigin && isValidDestination)
      {
        if (!string.IsNullOrEmpty(awbBreakdownRecord.ConsignmentOriginId.Trim()) && !string.IsNullOrEmpty(awbBreakdownRecord.ConsignmentDestinationId.Trim()))
        {
          if (String.Equals(awbBreakdownRecord.ConsignmentOriginId.ToUpper(), awbBreakdownRecord.ConsignmentDestinationId.ToUpper()))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "RM Awb Origin", Convert.ToString(awbBreakdownRecord.ConsignmentOriginId), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.OriginofAwbAndDestinationOfAwbShouldNotBeSame, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      var isValidFrom = true;
      var isValidTo = true;
      //Validate Origin Awb 
      /*  SCP# 125085: [CA-999] QUESTION ABOUT THE CXMLT FILE DOWNLOAD FROM IS-WEB.
          Desc : CarriageFromId and CarriageToId both are required fields and it should not be null. corrected the conditional check.
          Date : 23-May-2013
        */
      if (String.IsNullOrWhiteSpace(awbBreakdownRecord.CarriageFromId) || !IsValidCityAirportCode(awbBreakdownRecord.CarriageFromId))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Airway Bill Carriage From", Convert.ToString(awbBreakdownRecord.CarriageFromId), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.FromofAwbIsInvalid, ErrorStatus.C, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidFrom = false;
      }

      //Validate Destination Awb 
      if (String.IsNullOrWhiteSpace(awbBreakdownRecord.CarriageToId) || !IsValidCityAirportCode(awbBreakdownRecord.CarriageToId))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Airway Bill Carriage To", Convert.ToString(awbBreakdownRecord.CarriageToId), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.ToofAwbIsInvalid, ErrorStatus.C, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidTo = false;
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for RM AWB Prepaid.
      if (awbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        if (awbBreakdownRecord.CarriageFromId != null && awbBreakdownRecord.CarriageToId != null && isValidFrom && isValidTo)
        {
          if (!string.IsNullOrEmpty(awbBreakdownRecord.CarriageFromId.Trim()) && !string.IsNullOrEmpty(awbBreakdownRecord.CarriageToId.Trim()))
          {
            if (String.Equals(awbBreakdownRecord.CarriageFromId.ToUpper(), awbBreakdownRecord.CarriageToId.ToUpper()))
            {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1,
                                                                                   fileSubmissionDate, "Airway Bill Carriage From",
                                                                                   Convert.ToString(awbBreakdownRecord.CarriageFromId), invoice,
                                                                                   fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                                                                                   CargoErrorCodes.FromofAwbAndToOfAwbShouldNotBeSame, ErrorStatus.X,
                                                                                   awbBreakdownRecord.AwbBillingCode, parentMemo,
                                                                                   false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline,
                                                                                   awbBreakdownRecord.AwbSerialNumber));
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            } // End if
          } // End if
        } // End if
      } // End if

      // Validate CurrencyAdjustmentIndicator 
      if (!string.IsNullOrWhiteSpace(awbBreakdownRecord.CurrencyAdjustmentIndicator) && !ReferenceManager.IsValidCurrencyCode(invoice, awbBreakdownRecord.CurrencyAdjustmentIndicator))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Currency Adjustment Indicator", Convert.ToString(awbBreakdownRecord.CurrencyAdjustmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidCurrencyAdjustmentInd, ErrorStatus.C, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate ProvisionalReqSpa 
      if (!string.IsNullOrWhiteSpace(awbBreakdownRecord.ProvisionalReqSpa))
      {
        if (!(awbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaP) || awbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaR) || awbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaS)))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "ProvisoOrReqOrSPA", Convert.ToString(awbBreakdownRecord.ProvisionalReqSpa), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidProvisoReqSpa, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else
        {
          if (awbBreakdownRecord.ProratePercentage != null && awbBreakdownRecord.ProratePercentage.HasValue && awbBreakdownRecord.ProratePercentage.Value != 0)
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
              "Prorate percentage", Convert.ToString(awbBreakdownRecord.ProratePercentage.HasValue ? awbBreakdownRecord.ProratePercentage.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
              CargoErrorCodes.InvalidProratePer2, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Validation for PartShipMentIndicator.
      if (!string.IsNullOrWhiteSpace(awbBreakdownRecord.PartShipmentIndicator))
      {
        if (!(awbBreakdownRecord.PartShipmentIndicator.ToUpper().Equals(PartShipMentIndicatorP)))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "PartShipment Indicator", Convert.ToString(awbBreakdownRecord.PartShipmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidPartShipMentIndicator, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate KgLbIndicator 
      if (awbBreakdownRecord.BilledWeight.HasValue && awbBreakdownRecord.BilledWeight > 0)
      {
        if (string.IsNullOrWhiteSpace(awbBreakdownRecord.KgLbIndicator) || (!awbBreakdownRecord.KgLbIndicator.Equals(KgLbIndicatorK) && !awbBreakdownRecord.KgLbIndicator.Equals(KgLbIndicatorL)))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "KGLB Indicator", Convert.ToString(awbBreakdownRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.C, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(awbBreakdownRecord.KgLbIndicator))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "KGLB Indicator", Convert.ToString(awbBreakdownRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      //Rejection memo coupon total validations
      ValidateParsedRMAwbBreakdownTotal(awbBreakdownRecord, exceptionDetailsList, parentMemo, invoice, fileName, fileSubmissionDate);

      //Validate Net Reject Amount
      if (exchangeRate != null && couponMinAcceptableAmounts != null && !ReferenceManager.IsValidNetAmount(Convert.ToDouble(awbBreakdownRecord.NetRejectAmount), transType, invoice.ListingCurrencyId, invoice, exchangeRate, false, true, couponMinAcceptableAmounts.SingleOrDefault(), ApplicableMinimumField.TotalNetRejectAmount))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Net Reject Amount", Convert.ToString(awbBreakdownRecord.NetRejectAmount), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
          CargoErrorCodes.InvalidRMAwbNetRejectAmount, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      var awbIsuingAirline = awbBreakdownRecord.AwbIssueingAirline;

      // Validate AwbVat Breakdowns 
      foreach (var awbRecordVat in awbBreakdownRecord.AwbVat)
      {
        isValid = ValidateParsedCargoVat(awbRecordVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBillVat, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.RejectionMemoNumber, awbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, awbBreakdownRecord.AwbSerialNumber), false, true);
      }

      // Validate OC Breakdowns 
      foreach (var awbRecordOc in awbBreakdownRecord.OtherCharge)
      {
        isValid = ValidateParsedCargoOc(awbRecordOc, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBillOtherCharge, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.RejectionMemoNumber, awbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, awbBreakdownRecord.AwbSerialNumber), false, true, true);
      }

      // Validate Prorate Ladder Breakdown

      // Validation for Currency of Prorate Calculation. Indicator.
      if (awbBreakdownRecord.ProrateCalCurrencyId != null && !ReferenceManager.IsValidCurrencyCode(invoice, awbBreakdownRecord.ProrateCalCurrencyId))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Currency Prorate Calulation", Convert.ToString(awbBreakdownRecord.ProrateCalCurrencyId), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBillProrateLadder, CargoErrorCodes.InvalidCurrencyProrateCalculation, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      foreach (var awbLadder in awbBreakdownRecord.ProrateLadder)
      {
        isValid = ValidateParsedCargoProRateLadder(awbLadder, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBillProrateLadder, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.RejectionMemoNumber, awbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, awbBreakdownRecord.AwbSerialNumber));
      }

      return isValid;
    }

    /// <summary>
    /// To Validate RmAwb Total
    /// </summary>
    /// <param name="awbBreakdownRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="parentMemo"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    private bool ValidateParsedRMAwbBreakdownTotal(RMAwb awbBreakdownRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoRejectionMemo parentMemo, CargoInvoice invoice, string fileName, DateTime fileSubmissionDate)
    {

      var isValid = true;

      if (parentMemo.RejectionStage == 1 || parentMemo.RejectionStage == 3)
      {
        //Total Weight Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.WeightChargeDiff.HasValue ? awbBreakdownRecord.WeightChargeDiff.Value : 0, (awbBreakdownRecord.BilledWeightCharge.HasValue ? awbBreakdownRecord.BilledWeightCharge.Value : 0) - (awbBreakdownRecord.AcceptedWeightCharge.HasValue ? awbBreakdownRecord.AcceptedWeightCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Weight Charges Difference", awbBreakdownRecord.WeightChargeDiff.HasValue ? awbBreakdownRecord.WeightChargeDiff.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.WeightChargeDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total Valuation Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.ValuationChargeDiff.HasValue ? awbBreakdownRecord.ValuationChargeDiff.Value : 0, (awbBreakdownRecord.BilledValuationCharge.HasValue ? awbBreakdownRecord.BilledValuationCharge.Value : 0) - (awbBreakdownRecord.AcceptedValuationCharge.HasValue ? awbBreakdownRecord.AcceptedValuationCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Valuation Charges Difference", awbBreakdownRecord.ValuationChargeDiff.HasValue ? awbBreakdownRecord.ValuationChargeDiff.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.ValuationChargeDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total other Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.OtherChargeDiff, (awbBreakdownRecord.BilledOtherCharge) - (awbBreakdownRecord.AcceptedOtherCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Other Charges Difference", awbBreakdownRecord.OtherChargeDiff.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.OtherChargeDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total ISC Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.IscAmountDifference, (awbBreakdownRecord.AllowedIscAmount) - (awbBreakdownRecord.AcceptedIscAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "ISC Amount Difference", awbBreakdownRecord.IscAmountDifference.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.IscAmountDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total VAT Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value : 0, (awbBreakdownRecord.BilledVatAmount.HasValue ? awbBreakdownRecord.BilledVatAmount.Value : 0) - (awbBreakdownRecord.AcceptedVatAmount.HasValue ? awbBreakdownRecord.AcceptedVatAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {

          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "VAT Amount Difference", awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.VatAmountDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        //Total Weight Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.WeightChargeDiff.HasValue ? awbBreakdownRecord.WeightChargeDiff.Value : 0, (awbBreakdownRecord.AcceptedWeightCharge.HasValue ? awbBreakdownRecord.AcceptedWeightCharge.Value : 0) - (awbBreakdownRecord.BilledWeightCharge.HasValue ? awbBreakdownRecord.BilledWeightCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Weight Charges Difference", awbBreakdownRecord.WeightChargeDiff.HasValue ? awbBreakdownRecord.WeightChargeDiff.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.WeightChargeDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total Valuation Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.ValuationChargeDiff.HasValue ? awbBreakdownRecord.ValuationChargeDiff.Value : 0, (awbBreakdownRecord.AcceptedValuationCharge.HasValue ? awbBreakdownRecord.AcceptedValuationCharge.Value : 0) - (awbBreakdownRecord.BilledValuationCharge.HasValue ? awbBreakdownRecord.BilledValuationCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Valuation Charges Difference", awbBreakdownRecord.ValuationChargeDiff.HasValue ? awbBreakdownRecord.ValuationChargeDiff.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.ValuationChargeDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total other Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.OtherChargeDiff, (awbBreakdownRecord.AcceptedOtherCharge) - (awbBreakdownRecord.BilledOtherCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Other Charges Difference", awbBreakdownRecord.OtherChargeDiff.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.OtherChargeDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total ISC Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.IscAmountDifference, (awbBreakdownRecord.AcceptedIscAmount) - (awbBreakdownRecord.AllowedIscAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "ISC Amount Difference", awbBreakdownRecord.IscAmountDifference.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                CargoErrorCodes.IscAmountDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total VAT Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value : 0, (awbBreakdownRecord.AcceptedVatAmount.HasValue ? awbBreakdownRecord.AcceptedVatAmount.Value : 0) - (awbBreakdownRecord.BilledVatAmount.HasValue ? awbBreakdownRecord.BilledVatAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "VAT Amount Difference", awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
                  CargoErrorCodes.VatAmountDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Awb Vat records should be present if VatAmount > 0.
      if (awbBreakdownRecord.VatAmountDifference.HasValue && awbBreakdownRecord.VatAmountDifference.Value > 0 && awbBreakdownRecord.AwbVat.Count == 0 && awbBreakdownRecord.OtherCharge.Count == 0)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Vat Amount Difference", Convert.ToString(awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference : 0), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.ZeroCouponVatRecordsForAwbVatAmount, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      // Total of Vat amount in all the Vat and OC records.
      double totalVat = 0;
      if (awbBreakdownRecord.AwbVat != null)
      {
        totalVat = awbBreakdownRecord.AwbVat.Sum(vatRecord => vatRecord.VatCalculatedAmount);
      }
      if (awbBreakdownRecord.OtherCharge != null)
      {
        totalVat += awbBreakdownRecord.OtherCharge.Sum(ocRecord => ocRecord.OtherChargeVatCalculatedAmount.HasValue ? ocRecord.OtherChargeVatCalculatedAmount.Value : 0);
      }

      if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value : 0, totalVat, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Vat Amount Difference", Convert.ToString(awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidAwbVatBreakdownAmount, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber), totalVat.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Total of OC amount in all the Tax records.
      if (awbBreakdownRecord.OtherCharge != null && awbBreakdownRecord.OtherCharge.Count > 0)
      {
        double totalOc = awbBreakdownRecord.OtherCharge.Sum(ocRecord => ocRecord.OtherChargeCodeValue.HasValue ? ocRecord.OtherChargeCodeValue.Value : 0);

        if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.OtherChargeDiff, totalOc, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Other Charge Amount Difference", Convert.ToString(awbBreakdownRecord.OtherChargeDiff), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidAwbOcBreakdownAmount, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      //Total net reject amount

      double totalNetRejectAmount = (awbBreakdownRecord.WeightChargeDiff.HasValue ? awbBreakdownRecord.WeightChargeDiff.Value : 0) + (awbBreakdownRecord.ValuationChargeDiff.HasValue ? awbBreakdownRecord.ValuationChargeDiff.Value : 0) +
        awbBreakdownRecord.IscAmountDifference + awbBreakdownRecord.OtherChargeDiff + (awbBreakdownRecord.VatAmountDifference.HasValue ? awbBreakdownRecord.VatAmountDifference.Value : 0);

      if (invoice.Tolerance != null && !CompareUtil.Compare(awbBreakdownRecord.NetRejectAmount, totalNetRejectAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
              "Net Reject Amount", awbBreakdownRecord.NetRejectAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill, CargoErrorCodes.TotalNetRejectAmountIsNotMatchingWithSumOfBreakdowns,
              ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, null, totalNetRejectAmount.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      //Total net reject amount
      if (Convert.ToDouble(awbBreakdownRecord.NetRejectAmount) < 0)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(awbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Net Reject Amount", Convert.ToString(awbBreakdownRecord.NetRejectAmount), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.RMAwbNetRejectAmountShouldNotBeNegative, ErrorStatus.X, awbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbBreakdownRecord.AwbIssueingAirline, awbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      return isValid;
    }


    /// <summary>
    /// 
    /// </summary>
    /// <param name="rejectionMemoRecord"></param>
    /// <param name="previousBreakdownRecord"></param>
    /// <param name="rejectionMemoCouponBreakdownRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    private void ValidateRMCouponSerialNumber(CargoRejectionMemo rejectionMemoRecord, ref RMAwb previousBreakdownRecord, RMAwb rejectionMemoCouponBreakdownRecord, IList<IsValidationExceptionDetail> exceptionDetailsList,
                                                             CargoInvoice invoice, string fileName, DateTime fileSubmissionDate)
    {
      if (previousBreakdownRecord != null && rejectionMemoCouponBreakdownRecord.BdSerialNumber != previousBreakdownRecord.BdSerialNumber + 1)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoCouponBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Serial No", Convert.ToString(rejectionMemoCouponBreakdownRecord.BdSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidSerialNumberSequence, ErrorStatus.X, rejectionMemoCouponBreakdownRecord.AwbBillingCode, rejectionMemoRecord, false, string.Format("{0}-{1}", rejectionMemoCouponBreakdownRecord.AwbIssueingAirline, rejectionMemoCouponBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
      }
      else if (previousBreakdownRecord == null && rejectionMemoCouponBreakdownRecord.BdSerialNumber != 1)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoCouponBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Serial No", Convert.ToString(rejectionMemoCouponBreakdownRecord.BdSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelRmAirwayBill,
            CargoErrorCodes.InvalidSerialNumberSequence, ErrorStatus.X, rejectionMemoCouponBreakdownRecord.AwbBillingCode, rejectionMemoRecord, false, string.Format("{0}-{1}", rejectionMemoCouponBreakdownRecord.AwbIssueingAirline, rejectionMemoCouponBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
      }
      previousBreakdownRecord = rejectionMemoCouponBreakdownRecord;
    }

    /// <summary>
    /// Gets the invoice with RM coupons.
    /// </summary>
    /// <param name="invoiceNumber"></param>
    /// <param name="billingMonth"></param>
    /// <param name="billingYear"></param>
    /// <param name="billingPeriod"></param>
    /// <param name="billingMemberId"></param>
    /// <param name="billedMemberId"></param>
    /// <param name="billingCode"></param>
    /// <param name="couponSearchCriteriaString"></param>
    /// <returns></returns>
    public CargoInvoice GetInvoiceWithRMCoupons(string invoiceNumber, int billingMonth, int billingYear, int billingPeriod, int billingMemberId, int billedMemberId, int? billingCode = null, string couponSearchCriteriaString = null)
    {
      var entities = new[] { LoadStrategy.CargoEntities.RejectionMemo, LoadStrategy.CargoEntities.RmAwb };

      var invoices = CargoInvoiceRepository.GetInvoiceLS(new LoadStrategy(string.Join(",", entities)), invoiceNumber, billingMonth, billingYear, billingPeriod, billingMemberId, billedMemberId, billingCode, invoiceStatusIds: ((int)InvoiceStatusType.Presented).ToString(), couponSearchCriteriaString: couponSearchCriteriaString);

      CargoInvoice invoice = null;
      if (invoices.Count > 0)
      {
        // TODO: throw exception if invoice count > 1
        invoice = invoices[0];
      }
      return invoice;
    }

    /// <summary>
    /// Validation of rejection memo totals with child coupon records
    /// </summary>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <param name="exceptionDetailsList">The exception details list.</param>
    /// <param name="invoice">The invoice.</param>
    /// <param name="fileName">Name of the file.</param>
    /// <param name="billingCode">The billing code.</param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    public bool ValidateParsedRejectionMemoTotals(CargoRejectionMemo rejectionMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, int billingCode, DateTime fileSubmissionDate)
    {

      bool isValid = true;

      if (rejectionMemoRecord.RejectionStage == 1 || rejectionMemoRecord.RejectionStage == 3)
      {
        //Total Weight Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value : 0, (rejectionMemoRecord.BilledTotalWeightCharge.HasValue ? rejectionMemoRecord.BilledTotalWeightCharge.Value : 0) - (rejectionMemoRecord.AcceptedTotalWeightCharge.HasValue ? rejectionMemoRecord.AcceptedTotalWeightCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Weight Charges Difference", rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.WeightChargeDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total Valuation Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value : 0, (rejectionMemoRecord.BilledTotalValuationCharge.HasValue ? rejectionMemoRecord.BilledTotalValuationCharge.Value : 0) - (rejectionMemoRecord.AcceptedTotalValuationCharge.HasValue ? rejectionMemoRecord.AcceptedTotalValuationCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Valuation Charges Difference", rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ValuationChargeDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total other Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(Convert.ToDecimal(rejectionMemoRecord.TotalOtherChargeDifference.HasValue ? rejectionMemoRecord.TotalOtherChargeDifference.Value : 0), (rejectionMemoRecord.BilledTotalOtherChargeAmount.HasValue ? rejectionMemoRecord.BilledTotalOtherChargeAmount.Value : 0) - (rejectionMemoRecord.AcceptedTotalOtherChargeAmount.HasValue ? rejectionMemoRecord.AcceptedTotalOtherChargeAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Other Charges Difference", rejectionMemoRecord.TotalOtherChargeDifference.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.OtherChargeDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total ISC Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(Convert.ToDecimal(rejectionMemoRecord.TotalIscAmountDifference.HasValue ? rejectionMemoRecord.TotalIscAmountDifference.Value : 0), (rejectionMemoRecord.AllowedTotalIscAmount.HasValue ? rejectionMemoRecord.AllowedTotalIscAmount.Value : 0) - (rejectionMemoRecord.AcceptedTotalIscAmount.HasValue ? rejectionMemoRecord.AcceptedTotalIscAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Difference", rejectionMemoRecord.TotalIscAmountDifference.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.IscAmountDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total VAT Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(Convert.ToDecimal(rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value : 0), (rejectionMemoRecord.BilledTotalVatAmount.HasValue ? rejectionMemoRecord.BilledTotalVatAmount.Value : 0) - (rejectionMemoRecord.AcceptedTotalVatAmount.HasValue ? rejectionMemoRecord.AcceptedTotalVatAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total VAT Difference", rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatAmountDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        //Total Weight Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value : 0, (rejectionMemoRecord.AcceptedTotalWeightCharge.HasValue ? rejectionMemoRecord.AcceptedTotalWeightCharge.Value : 0) - (rejectionMemoRecord.BilledTotalWeightCharge.HasValue ? rejectionMemoRecord.BilledTotalWeightCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Weight Charges Difference", rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.WeightChargeDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total Valuation Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value : 0, (rejectionMemoRecord.AcceptedTotalValuationCharge.HasValue ? rejectionMemoRecord.AcceptedTotalValuationCharge.Value : 0) - (rejectionMemoRecord.BilledTotalValuationCharge.HasValue ? rejectionMemoRecord.BilledTotalValuationCharge.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Valuation Charges Difference", rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ValuationChargeDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total other Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(rejectionMemoRecord.TotalOtherChargeDifference.HasValue ? rejectionMemoRecord.TotalOtherChargeDifference.Value : 0, (rejectionMemoRecord.AcceptedTotalOtherChargeAmount.HasValue ? rejectionMemoRecord.AcceptedTotalOtherChargeAmount.Value : 0) - (rejectionMemoRecord.BilledTotalOtherChargeAmount.HasValue ? rejectionMemoRecord.BilledTotalOtherChargeAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Other Charges Difference", rejectionMemoRecord.TotalOtherChargeDifference.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.OtherChargeDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total ISC Charges Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(rejectionMemoRecord.TotalIscAmountDifference.HasValue ? rejectionMemoRecord.TotalIscAmountDifference.Value : 0, (rejectionMemoRecord.AcceptedTotalIscAmount.HasValue ? rejectionMemoRecord.AcceptedTotalIscAmount.Value : 0) - (rejectionMemoRecord.AllowedTotalIscAmount.HasValue ? rejectionMemoRecord.AllowedTotalIscAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Difference", rejectionMemoRecord.TotalIscAmountDifference.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.IscAmountDifferenceShouldMatchWithAcceptedMinusBilled, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total VAT Difference
        if (invoice.Tolerance != null && !CompareUtil.Compare(Convert.ToDecimal(rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value : 0), (rejectionMemoRecord.AcceptedTotalVatAmount.HasValue ? rejectionMemoRecord.AcceptedTotalVatAmount.Value : 0) - (rejectionMemoRecord.BilledTotalVatAmount.HasValue ? rejectionMemoRecord.BilledTotalVatAmount.Value : 0), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total VAT Difference", rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatAmountDifferenceShouldMatchWithBilledMinusAccepted, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      //If vat amount is > 0 and vat breakdowns is 0
      if (rejectionMemoRecord.RejectionMemoVat != null && rejectionMemoRecord.CouponBreakdownRecord.Count == 0 && Convert.ToDouble(rejectionMemoRecord.TotalVatAmountDifference) > 0 && rejectionMemoRecord.RejectionMemoVat.Count() == 0)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total VAT Difference", rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ZeroVatBreakdownRecords, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (rejectionMemoRecord.CouponBreakdownRecord.Count > 0)
      {
        double rejectionMemoWeightChargeBilled = 0, rejectionMemoWeightChargeAccepted = 0, rejectionMemoWeightChargeDifference = 0;
        double rejectionMemoValuationChargeBilled = 0, rejectionMemoValuationChargeAccepted = 0, rejectionMemoValuationChargeDifference = 0;
        double rejectionMemoOtherChargeAmountAllowed = 0, rejectionMemoOtherChargeAmountAccepted = 0, rejectionMemoOtherChargeAmountDifference = 0;
        double rejectionMemoIscAmountAllowed = 0, rejectionMemoIscAmountAccepted = 0, rejectionMemoIscAmountDifference = 0;
        double rejectionMemoVatAmountBilled = 0, rejectionMemoVatAmountAccepted = 0, rejectionMemoVatAmountDifference = 0;
        double netRejectAmount = 0;

        foreach (var currentRecord in rejectionMemoRecord.CouponBreakdownRecord)
        {
          //Weight Charge
          rejectionMemoWeightChargeBilled += (currentRecord.BilledWeightCharge.HasValue ? currentRecord.BilledWeightCharge.Value : 0);
          rejectionMemoWeightChargeAccepted += currentRecord.AcceptedWeightCharge.HasValue ? currentRecord.AcceptedWeightCharge.Value : 0;
          rejectionMemoWeightChargeDifference += currentRecord.WeightChargeDiff.HasValue ? currentRecord.WeightChargeDiff.Value : 0;
          //Valuation Charge
          rejectionMemoValuationChargeBilled += currentRecord.BilledValuationCharge.HasValue ? currentRecord.BilledValuationCharge.Value : 0;
          rejectionMemoValuationChargeAccepted += currentRecord.AcceptedValuationCharge.HasValue ? currentRecord.AcceptedValuationCharge.Value : 0;
          rejectionMemoValuationChargeDifference += currentRecord.ValuationChargeDiff.HasValue ? currentRecord.ValuationChargeDiff.Value : 0;
          //Vat amount
          rejectionMemoVatAmountBilled += currentRecord.BilledVatAmount.HasValue ? currentRecord.BilledVatAmount.Value : 0;
          rejectionMemoVatAmountAccepted += currentRecord.AcceptedVatAmount.HasValue ? currentRecord.AcceptedVatAmount.Value : 0;
          rejectionMemoVatAmountDifference += currentRecord.VatAmountDifference.HasValue ? currentRecord.VatAmountDifference.Value : 0;
          //Other Charge amount          
          rejectionMemoOtherChargeAmountAllowed += currentRecord.BilledOtherCharge;
          rejectionMemoOtherChargeAmountAccepted += currentRecord.AcceptedOtherCharge;
          rejectionMemoOtherChargeAmountDifference += currentRecord.OtherChargeDiff;
          //ISC amount
          rejectionMemoIscAmountAllowed += currentRecord.AllowedIscAmount;
          rejectionMemoIscAmountAccepted += currentRecord.AcceptedIscAmount;
          rejectionMemoIscAmountDifference += currentRecord.IscAmountDifference;
          netRejectAmount += currentRecord.NetRejectAmount;
        }

        if (invoice.Tolerance != null)
        {
          //Total weight charges
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoWeightChargeBilled), rejectionMemoRecord.BilledTotalWeightCharge.HasValue ? rejectionMemoRecord.BilledTotalWeightCharge.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
              "Total Weight Charge Billed", rejectionMemoRecord.BilledTotalWeightCharge.HasValue ? rejectionMemoRecord.BilledTotalWeightCharge.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.WeightChargeBilledIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoWeightChargeBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoWeightChargeAccepted), rejectionMemoRecord.AcceptedTotalWeightCharge.HasValue ? rejectionMemoRecord.AcceptedTotalWeightCharge.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
              "Total Weight Charge Accepted", rejectionMemoRecord.AcceptedTotalWeightCharge.HasValue ? rejectionMemoRecord.AcceptedTotalWeightCharge.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.WeightChargeAcceptedIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoWeightChargeAccepted.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoWeightChargeDifference), rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
              "Total Weight Charge Difference", rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.WeightChargeDifferenceIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoWeightChargeDifference.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          //Total valuation charges
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoValuationChargeBilled), rejectionMemoRecord.BilledTotalValuationCharge.HasValue ? rejectionMemoRecord.BilledTotalValuationCharge.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total Valuation Charge Billed", rejectionMemoRecord.BilledTotalValuationCharge.HasValue ? rejectionMemoRecord.BilledTotalValuationCharge.Value.ToString() : "0", invoice, fileName,
                  ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ValuationChargeBilledIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoValuationChargeBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoValuationChargeAccepted), rejectionMemoRecord.AcceptedTotalValuationCharge.HasValue ? rejectionMemoRecord.AcceptedTotalValuationCharge.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total Valuation Charge Accepted", rejectionMemoRecord.AcceptedTotalValuationCharge.HasValue ? rejectionMemoRecord.AcceptedTotalValuationCharge.Value.ToString() : "0", invoice, fileName,
                  ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ValuationChargeAcceptedIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoValuationChargeAccepted.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoValuationChargeDifference), rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Total Valuation Charge Difference", rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value.ToString() : "0",
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ValuationChargeDifferenceIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoValuationChargeDifference.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          //Total other charges
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoOtherChargeAmountAllowed), rejectionMemoRecord.BilledTotalOtherChargeAmount.HasValue ? rejectionMemoRecord.BilledTotalOtherChargeAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total Other Charge Billed", rejectionMemoRecord.BilledTotalOtherChargeAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo,
                  CargoErrorCodes.OtherChargeBilledIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoOtherChargeAmountAllowed.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoOtherChargeAmountAccepted), rejectionMemoRecord.AcceptedTotalOtherChargeAmount.HasValue ? rejectionMemoRecord.AcceptedTotalOtherChargeAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total Other Charge Accepted", rejectionMemoRecord.AcceptedTotalOtherChargeAmount.ToString(),
                  invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.OtherChargeAmountAcceptedIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoOtherChargeAmountAccepted.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoOtherChargeAmountDifference), rejectionMemoRecord.TotalOtherChargeDifference.HasValue ? rejectionMemoRecord.TotalOtherChargeDifference.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Total Other Charge Difference", rejectionMemoRecord.TotalOtherChargeDifference.ToString(),
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.OtherChargeAmountDifferenceIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoOtherChargeAmountDifference.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          //Total ISC Amount
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoIscAmountAllowed), rejectionMemoRecord.AllowedTotalIscAmount.HasValue ? rejectionMemoRecord.AllowedTotalIscAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total ISC Amount Billed", rejectionMemoRecord.AllowedTotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.IscAmountBilledIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoIscAmountAllowed.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoIscAmountAccepted), rejectionMemoRecord.AcceptedTotalIscAmount.HasValue ? rejectionMemoRecord.AcceptedTotalIscAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total ISC Amount Accepted", rejectionMemoRecord.AcceptedTotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.IscAmountAcceptedIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoIscAmountAccepted.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoIscAmountDifference), rejectionMemoRecord.TotalIscAmountDifference.HasValue ? rejectionMemoRecord.TotalIscAmountDifference.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Total ISC Amount Difference", rejectionMemoRecord.TotalIscAmountDifference.ToString(),
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.IscAmountDifferenceIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoIscAmountDifference.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          //Total Vat Amount
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoVatAmountBilled), rejectionMemoRecord.BilledTotalVatAmount.HasValue ? rejectionMemoRecord.BilledTotalVatAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total Vat Amount Billed", rejectionMemoRecord.BilledTotalVatAmount.HasValue ? rejectionMemoRecord.BilledTotalVatAmount.Value.ToString() : "0", invoice, fileName,
                  ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatAmountBilledIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoVatAmountBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoVatAmountAccepted), rejectionMemoRecord.AcceptedTotalVatAmount.HasValue ? rejectionMemoRecord.AcceptedTotalVatAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                  "Total Vat Amount Accepted", rejectionMemoRecord.AcceptedTotalVatAmount.HasValue ? rejectionMemoRecord.AcceptedTotalVatAmount.Value.ToString() : "0", invoice, fileName,
                  ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatAmountAcceptedIsNotMatchingWithSumOfBreakdowns, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoVatAmountAccepted.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoVatAmountDifference), rejectionMemoRecord.TotalVatAmountDifference.HasValue ? Convert.ToDecimal(rejectionMemoRecord.TotalVatAmountDifference.Value) : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Total Vat Amount Difference", rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value.ToString() : "0",
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatAmountDifferenceIsNotMatchingWithSumOfBreakdowns,
                ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, rejectionMemoVatAmountDifference.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          if (!CompareUtil.Compare(Convert.ToDecimal(netRejectAmount), rejectionMemoRecord.TotalNetRejectAmount.HasValue ? Convert.ToDecimal(rejectionMemoRecord.TotalNetRejectAmount.Value) : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Net Reject Amount", rejectionMemoRecord.TotalNetRejectAmount.HasValue ? rejectionMemoRecord.TotalNetRejectAmount.Value.ToString() : "0",
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.TotalNetRejectAmountIsNotMatchingWithSumOfBreakdowns,
                ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, netRejectAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

        }
      }
      else
      {
        //If vat amount is > 0 and vat breakdowns is 0
        if (rejectionMemoRecord.RejectionMemoVat != null && Convert.ToDouble(rejectionMemoRecord.TotalVatAmountDifference) > 0)
        {
          if (rejectionMemoRecord.RejectionMemoVat.Count() == 0)
          {
            var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Total Vat Amount Difference", rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value.ToString() : "0",
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.ZeroVatBreakdownRecords,
                ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          else
          {
            decimal vatBreakdownTotal = Convert.ToDecimal(rejectionMemoRecord.RejectionMemoVat.Aggregate(0.0, (current, vat) => current + Convert.ToDouble(vat.VatCalculatedAmount)));

            if (invoice.Tolerance != null && !CompareUtil.Compare(Convert.ToDecimal(rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value : 0),
                                 vatBreakdownTotal, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Vat Amount Difference",
                rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value.ToString() : "0", invoice,
                fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.VatTotalAmountMismatch, ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, vatBreakdownTotal.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }
      }

      //Total net reject amount
      if (invoice.Tolerance != null)
      {
        decimal totalNetRejectAmount = (rejectionMemoRecord.TotalWeightChargeDifference.HasValue ? rejectionMemoRecord.TotalWeightChargeDifference.Value : 0) + (rejectionMemoRecord.TotalValuationChargeDifference.HasValue ? rejectionMemoRecord.TotalValuationChargeDifference.Value : 0) + (rejectionMemoRecord.TotalIscAmountDifference.HasValue ? rejectionMemoRecord.TotalIscAmountDifference.Value : 0) + (rejectionMemoRecord.TotalOtherChargeDifference.HasValue ? rejectionMemoRecord.TotalOtherChargeDifference.Value : 0) + Convert.ToDecimal(rejectionMemoRecord.TotalVatAmountDifference.HasValue ? rejectionMemoRecord.TotalVatAmountDifference.Value : 0);

        if (!CompareUtil.Compare(Convert.ToDecimal(rejectionMemoRecord.TotalNetRejectAmount.HasValue ? rejectionMemoRecord.TotalNetRejectAmount.Value : 0),
                                 totalNetRejectAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Net Reject Amount", rejectionMemoRecord.TotalNetRejectAmount.HasValue ? rejectionMemoRecord.TotalNetRejectAmount.Value.ToString() : "0",
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.TotalNetRejectAmountIsNotMatchingWithSumOfBreakdowns,
                ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord, false, null, totalNetRejectAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      //Total net reject amount should not be 0 or negative
      if (Convert.ToDouble(rejectionMemoRecord.TotalNetRejectAmount.HasValue ? rejectionMemoRecord.TotalNetRejectAmount.Value : 0) < 0)
      {
        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(rejectionMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
                "Net Reject Amount", rejectionMemoRecord.TotalNetRejectAmount.HasValue ? rejectionMemoRecord.TotalNetRejectAmount.Value.ToString() : "0",
                invoice, fileName, ErrorLevels.ErrorLevelRejectionMemo, CargoErrorCodes.RejectionMemoNetTotalAmountShouldNotBeNegative,
                ErrorStatus.X, rejectionMemoRecord.BillingCode, rejectionMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      return isValid;
    }

    #region Cargo BillingMemo Parsing Validation

    /// <summary>
    /// To Validate Cargo BillingMemo record.
    /// </summary>
    /// <param name="billingMemoRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedBillingMemoRecord(CargoBillingMemo billingMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate)
    {
        var isValid = true;

        var billingMemoNumber = string.Empty;

        if (billingMemoRecord.BillingMemoNumber != null)
        {
            billingMemoNumber = billingMemoRecord.BillingMemoNumber;
        }

        // Validate BillingCode
        if (!billingMemoRecord.BillingCode.Equals((int)BillingCode.BillingMemo))
        {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code", Convert.ToString(billingMemoRecord.BillingCode), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidBillingCode, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

        //// Billing period should be 01,02,03,04
        //if (billingMemoRecord.YourInvoiceBillingPeriod < 0 || billingMemoRecord.YourInvoiceBillingPeriod > 4)
        //{
        //  var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Your Invoice Billing Period", billingMemoRecord.YourInvoiceBillingPeriod.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidYourInvoiceBillingPeriod, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
        //  exceptionDetailsList.Add(validationExceptionDetail);
        //  isValid = false;
        //}
        //SCP122624:
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml)
        {

            DateTime yourInvoiceBillingDate;
            //To avoid converting year 30 into year 1930
            var cultureInfo = new CultureInfo("en-US");
            cultureInfo.Calendar.TwoDigitYearMax = 2099;
            var yourInvoiceDateString = string.Format("{2}{1}{0}",
                                           Convert.ToString(billingMemoRecord.YourInvoiceBillingPeriod).PadLeft(2, '0'),
                                           Convert.ToString(billingMemoRecord.YourInvoiceBillingMonth).PadLeft(2, '0'),
                                           Convert.ToString(billingMemoRecord.YourInvoiceBillingYear).PadLeft(4, '0'));
            var yourInvoiceDateStringErr = yourInvoiceDateString.Substring(2, yourInvoiceDateString.Length - 2);
            if ((!String.IsNullOrEmpty(yourInvoiceDateString) && (Convert.ToInt32(yourInvoiceDateString) != 0) && string.IsNullOrWhiteSpace(billingMemoRecord.YourInvoiceNumber)) || (Convert.ToInt32(yourInvoiceDateString) == 0 && !string.IsNullOrWhiteSpace(billingMemoRecord.YourInvoiceNumber)))
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Your Invoice Number", yourInvoiceDateString, invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, ErrorCodes.MandatoryYourInvoiceNumberAndYourBillingDate, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;
            }
            if (!String.IsNullOrEmpty(yourInvoiceDateString) && (Convert.ToInt32(yourInvoiceDateString) != 0))
            {
                if (DateTime.TryParseExact(yourInvoiceDateString, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out yourInvoiceBillingDate))
                {
                    if (yourInvoiceBillingDate.Day < 1 || yourInvoiceBillingDate.Day > 4)
                    {
                        //Raise NonCorrectable error for invalid your invoice Date.
                        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Your Invoice Billing Date",
                                                                                             yourInvoiceDateStringErr,
                                                                                             invoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelBillingMemo,
                                                                                             ErrorCodes.InvalidYourInvoiceBillingDatePeriod,
                                                                                             ErrorStatus.X,
                                                                                             billingMemoRecord.BillingCode,
                                                                                             billingMemoRecord);
                        exceptionDetailsList.Add(validationExceptionDetail);
                        isValid = false;
                    }
                }
                else
                {
                    //Raise NonCorrectable error for invalid your invoice Date.
                    var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Your Invoice Billing Date",
                                                                                         yourInvoiceDateStringErr,
                                                                                         invoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelBillingMemo,
                                                                                         ErrorCodes.InvalidYourInvoiceBillingDatePeriod,
                                                                                         ErrorStatus.X,
                                                                                         billingMemoRecord.BillingCode,
                                                                                         billingMemoRecord);
                    exceptionDetailsList.Add(validationExceptionDetail);
                    isValid = false;
                }
            }
        }

        //SCPID:122022 -Valid Batch & Sequence number.
        if (billingMemoRecord.RecordSequenceWithinBatch <= 0 || billingMemoRecord.BatchSequenceNumber <= 0)
        {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Batch Sequence Number - Record Sequence Number", string.Format("{0}-{1}", billingMemoRecord.BatchSequenceNumber, billingMemoRecord.RecordSequenceWithinBatch), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.BatchRecordSequenceNoReq,
            ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

        // Duplicate check in current invoice - Billing memo number
        if (invoice.CGOBillingMemo.Where(memoRecord => memoRecord.BillingMemoNumber != null && memoRecord.BillingMemoNumber.Trim().ToUpper() == billingMemoRecord.BillingMemoNumber.Trim().ToUpper()).Count() > 1)
        {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Memo Number", billingMemoRecord.BillingMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.DuplicateBillingMemoFound, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }
        // Validate Memo Number
        else if (IsDuplicateBillingMemo(null, billingMemoRecord, false, invoice))
        {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Memo Number", billingMemoRecord.BillingMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.DuplicateBillingMemoFound, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

        if (billingMemoRecord.ReasonCode != null)
        {
            var transactionTypeId = billingMemoRecord.ReasonCode.Trim().ToUpper().Equals(ReasonCode6A) ? (int)TransactionType.CargoBillingMemoDueToAuthorityToBill :
                                 billingMemoRecord.ReasonCode.Trim().ToUpper().Equals(ReasonCode6B) ? (int)TransactionType.CargoBillingMemoDueToExpiry :
                                 (int)TransactionType.CargoBillingMemo;

            // validate reason code 
            if (!ReferenceManager.IsValidReasonCode(invoice, billingMemoRecord.ReasonCode, transactionTypeId))
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Reason Code", billingMemoRecord.ReasonCode, invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.CgoInvalidReasonCode, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, true);
                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;
            }

            // Validation check wheather BMAWB breakdown is mandatory or not.
            var isCouponBreakdownMandatory = ReasonCodeRepository.GetCount(reasonCode => reasonCode.Code.ToUpper() == billingMemoRecord.ReasonCode.ToUpper() && reasonCode.TransactionTypeId == (int)TransactionType.CargoBillingMemo && reasonCode.CouponAwbBreakdownMandatory) > 0;
            if (isCouponBreakdownMandatory && billingMemoRecord.AwbBreakdownRecord.Count == 0)
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Memo Record", Convert.ToString(billingMemoRecord.ReasonCode), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.MandatoryCouponBreakdownRecord, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;
            }

            if (billingMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6A) || billingMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6B))
            {
                // Correspondence Ref Number should be populated for Reason Code “6A” or “6B”.
                if (billingMemoRecord.CorrespondenceReferenceNumber == 0)
                {
                    var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Correspondence Ref Number", Convert.ToString(billingMemoRecord.CorrespondenceReferenceNumber), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidCorrespondenceRefNumber, ErrorStatus.C, billingMemoRecord.BillingCode, billingMemoRecord);
                    exceptionDetailsList.Add(validationExceptionDetail);
                    isValid = false;
                }
                else
                {
                  var correspondenceManager =
                    Ioc.Resolve<ICargoCorrespondenceManager>(typeof (ICargoCorrespondenceManager));
                  var lastCorrespondence =
                    correspondenceManager.GetRecentCorrespondenceDetailWithClosedStatus(
                      billingMemoRecord.CorrespondenceReferenceNumber);

                  if (lastCorrespondence != null &&
                      lastCorrespondence.CorrespondenceSubStatusId !=
                      (int)CorrespondenceSubStatus.AcceptedByCorrespondenceInitiator)
                  {

                      // CMP#624 : 2.8-New Validation #8 - SMI Match Check for PAX/CGO 6A/6B BMs

                       var yourInvoice = CargoInvoiceRepository.Single(id: lastCorrespondence.InvoiceId);

                      if (yourInvoice != null && !ValidateSmiAfterLinking(invoice.SettlementMethodId, yourInvoice.SettlementMethodId))
                      {
                          /* CMP #624: ICH Rewrite-New SMI X 
                          * Description: Code Fixed regarding CMP 624: ISWEB -  BM saved without checking the SMI of lined rejection invoice.
                          * Showing SMI related specific error message. */
                          string errorCode = "";
                          if (yourInvoice.SettlementMethodId == (int)SMI.IchSpecialAgreement)
                          {
                              /* Old invoice is X and new is not. FRS Reference: 2.14,  New Validation #7 */
                              errorCode = ErrorCodes.PaxNsStandaloneBmInvLinkCheckForSmiX;
                          }
                          else
                          {
                              /* New invoice is X but old is not. FRS Reference: 2.14,  New Validation #6 */
                              errorCode = ErrorCodes.PaxNSBmInvoiceLinkingCheckForSmiX;
                          }

                          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                                                          exceptionDetailsList.Count() +
                                                                                          1,
                                                                                          fileSubmissionDate,
                                                                                          "Correspondence Ref Number",
                                                                                          Convert.ToString(
                                                                                              billingMemoRecord.
                                                                                                  CorrespondenceReferenceNumber),
                                                                                          invoice,
                                                                                          fileName,
                                                                                          ErrorLevels.
                                                                                              ErrorLevelBillingMemo,
                                                                                          errorCode,
                                                                                          ErrorStatus.X,
                                                                                          billingMemoRecord.BillingCode,
                                                                                          billingMemoRecord,
                                                                                          islinkingError: true);
                          exceptionDetailsList.Add(validationExceptionDetail);
                          isValid = false;
                      }

                      TransactionType transactionType;
                      if (billingMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6A))
                      {
                          if (
                              !(lastCorrespondence.FromMemberId == invoice.BilledMemberId &&
                                lastCorrespondence.ToMemberId == invoice.BillingMemberId &&
                                lastCorrespondence.AuthorityToBill &&
                                lastCorrespondence.CorrespondenceStatusId == (int) CorrespondenceStatus.Open))
                          {
                              var validationExceptionDetail =
                                  CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                                       exceptionDetailsList.Count() + 1,
                                                                       fileSubmissionDate, "Correspondence Ref Number",
                                                                       Convert.ToString(
                                                                           billingMemoRecord.
                                                                               CorrespondenceReferenceNumber), invoice,
                                                                       fileName, ErrorLevels.ErrorLevelBillingMemo,
                                                                       CargoErrorCodes.
                                                                           BillingMemoReferenceCorrespondenceDoesNotExist,
                                                                       ErrorStatus.C, billingMemoRecord.BillingCode,
                                                                       billingMemoRecord, islinkingError: true);
                              exceptionDetailsList.Add(validationExceptionDetail);
                          }
                          transactionType = TransactionType.CargoBillingMemoDueToAuthorityToBill;
                          isValid = ValidateTimeLimit(billingMemoRecord, invoice, exceptionDetailsList,
                                                      fileSubmissionDate, fileName, lastCorrespondence, transactionType);
                      }
                      else if (billingMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6B))
                      {
                          if (
                              !(lastCorrespondence.FromMemberId == invoice.BillingMemberId &&
                                lastCorrespondence.ToMemberId == invoice.BilledMemberId &&
                                lastCorrespondence.CorrespondenceStatusId == (int) CorrespondenceStatus.Expired))
                          {
                              var validationExceptionDetail =
                                  CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                                       exceptionDetailsList.Count() + 1,
                                                                       fileSubmissionDate, "Correspondence Ref Number",
                                                                       Convert.ToString(
                                                                           billingMemoRecord.
                                                                               CorrespondenceReferenceNumber), invoice,
                                                                       fileName, ErrorLevels.ErrorLevelBillingMemo,
                                                                       CargoErrorCodes.
                                                                           BillingMemoReferenceCorrespondenceDoesNotExist,
                                                                       ErrorStatus.C, billingMemoRecord.BillingCode,
                                                                       billingMemoRecord, islinkingError: true);
                              exceptionDetailsList.Add(validationExceptionDetail);
                          }

                          transactionType = TransactionType.CargoBillingMemoDueToExpiry;
                          isValid = ValidateTimeLimit(billingMemoRecord, invoice, exceptionDetailsList,
                                                      fileSubmissionDate, fileName, lastCorrespondence, transactionType);
                      }


                      //SCP219674 : InvalidAmountToBeSettled Validation

                      #region Old Code For Validatation of CorrespondenceAmounttobeSettled : To be remove

                      /* if (!ReferenceManager.IsSmiLikeBilateral(invoice.SettlementMethodId) &&
                        invoice.BillingCurrencyId != null && lastCorrespondence.CurrencyId != null &&
                        invoice.ListingCurrencyId != null)
                    {
                      double exchangeRate;

                      var toleranceValue = invoice.Tolerance != null ? invoice.Tolerance.RoundingTolerance : 0;
                      if (lastCorrespondence.CurrencyId == invoice.BillingCurrencyId)
                      {
                        exchangeRate = ReferenceManager.GetExchangeRate(invoice.ListingCurrencyId.Value,
                                                                        (BillingCurrency)
                                                                        lastCorrespondence.CurrencyId.Value,
                                                                        invoice.BillingYear, invoice.BillingMonth);
                      }
                      else
                      {
                        exchangeRate = ReferenceManager.GetExchangeRate(invoice.BillingCurrencyId.Value,
                                                                        (BillingCurrency)
                                                                        lastCorrespondence.CurrencyId.Value,
                                                                        invoice.BillingYear, invoice.BillingMonth);
                        Tolerance tolerance = CompareUtil.GetTolerance(BillingCategoryType.Cgo,
                                                                       invoice.BillingCurrencyId.Value, invoice,
                                                                       Constants.CgoDecimalPlaces);
                        toleranceValue = tolerance != null ? tolerance.RoundingTolerance : 0;
                      }

                      var amountToBeSettled = exchangeRate > 0
                                                ? lastCorrespondence.AmountToBeSettled*
                                                  Convert.ToDecimal(exchangeRate)
                                                : lastCorrespondence.AmountToBeSettled;

                      if (invoice.Tolerance != null && billingMemoRecord.NetBilledAmount.HasValue &&
                          !CompareUtil.Compare(billingMemoRecord.NetBilledAmount.Value, amountToBeSettled,
                                               toleranceValue, Constants.CgoDecimalPlaces))
                      {
                        var validationExceptionDetail =
                          CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                               exceptionDetailsList.Count() + 1,
                                                               fileSubmissionDate, "Net Billed Amount",
                                                               Convert.ToString(
                                                                 billingMemoRecord.NetBilledAmount.Value),
                                                               invoice, fileName,
                                                               ErrorLevels.ErrorLevelBillingMemo,
                                                               CargoErrorCodes.InvalidAmountToBeSettled,
                                                               ErrorStatus.X, billingMemoRecord.BillingCode,
                                                               billingMemoRecord, false, null,
                                                               Convert.ToString(amountToBeSettled));
                        exceptionDetailsList.Add(validationExceptionDetail);
                        isValid = false;
                      }
                            } */

                      #endregion

                      #region New Code for Validatation of CorrespondenceAmounttobeSettled

                      if (lastCorrespondence.CurrencyId != null)
                      {
                          decimal netBilledAmount = billingMemoRecord.NetBilledAmount.HasValue
                                                        ? billingMemoRecord.NetBilledAmount.Value
                                                        : 0;
                          isValid = ReferenceManager.ValidateCorrespondenceAmounttobeSettled(invoice,
                                                                                             ref netBilledAmount,
                                                                                             lastCorrespondence.
                                                                                                 CurrencyId.Value,
                                                                                             lastCorrespondence.
                                                                                                 AmountToBeSettled, yourInvoice);
                          if (!isValid)
                          {
                              var validationExceptionDetail =
                                  CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                                       exceptionDetailsList.Count() + 1,
                                                                       fileSubmissionDate, "Net Billed Amount",
                                                                       Convert.ToString(
                                                                           billingMemoRecord.NetBilledAmount.Value),
                                                                       invoice, fileName,
                                                                       ErrorLevels.ErrorLevelBillingMemo,
                                                                       CargoErrorCodes.InvalidAmountToBeSettled,
                                                                       ErrorStatus.X, billingMemoRecord.BillingCode,
                                                                       billingMemoRecord, false, null);
                              exceptionDetailsList.Add(validationExceptionDetail);
                          }
                      }

                      #endregion
                  }
                      //Fix bug no: 8881 for CMP 527.
                  else if (lastCorrespondence != null &&
                           lastCorrespondence.CorrespondenceSubStatusId ==
                           (int)CorrespondenceSubStatus.AcceptedByCorrespondenceInitiator)
                  {
                      var validationExceptionDetail =
                        CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                             exceptionDetailsList.Count() + 1, fileSubmissionDate,
                                                             "Correspondence Ref Number",
                                                             Convert.ToString(
                                                               billingMemoRecord.CorrespondenceReferenceNumber),
                                                             invoice, fileName, ErrorLevels.ErrorLevelBillingMemo,
                                                             CargoErrorCodes.CgoCorrespondenceStatusIsClosed,
                                                             ErrorStatus.C, billingMemoRecord.BillingCode,
                                                             billingMemoRecord, islinkingError: true);
                      exceptionDetailsList.Add(validationExceptionDetail);
                      isValid = false;
                  }
                  else
                  {
                      var validationExceptionDetail =
                        CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(),
                                                             exceptionDetailsList.Count() + 1, fileSubmissionDate,
                                                             "Correspondence Ref Number",
                                                             Convert.ToString(
                                                               billingMemoRecord.CorrespondenceReferenceNumber),
                                                             invoice, fileName, ErrorLevels.ErrorLevelBillingMemo,
                                                             CargoErrorCodes.
                                                               CorrespondenceDoesNotExistsInTheDatabase,
                                                             ErrorStatus.C, billingMemoRecord.BillingCode,
                                                             billingMemoRecord, islinkingError: true);
                      exceptionDetailsList.Add(validationExceptionDetail);
                      isValid = false;
                  }
                } //end of if (billingMemoRecord.CorrespondenceReferenceNumber == 0)
            } //end of if (billingMemo.ReasonCode.ToUpper() == ReasonCode6A || billingMemo.ReasonCode.ToUpper() == ReasonCode6B)
            
            // CMP#673: Validation on Correspondence Reference Number in PAX/CGO Billing Memos
            if (!billingMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6A) && !billingMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6B) && billingMemoRecord.CorrespondenceReferenceNumber >= 0)
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1,
                                                                                     fileSubmissionDate, "Correspondence Ref Number",
                                                                                     Convert.ToString(billingMemoRecord.CorrespondenceReferenceNumber),
                                                                                     invoice, fileName, ErrorLevels.ErrorLevelBillingMemo,
                                                                                     CargoErrorCodes.CorrRefNumberCannotBeProvidedForNon6Aor6BbmReasonCode,
                                                                                     ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);

                validationExceptionDetail.ErrorDescription = string.Format(validationExceptionDetail.ErrorDescription, billingMemoRecord.ReasonCode);

                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;
            }
        }

        // Memo level VAT breakdown should not be provided when RM/BM/CM has AWB breakdown information.
        if (billingMemoRecord.BillingMemoVat.Count > 0 && billingMemoRecord.AwbBreakdownRecord.Count > 0)
        {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BM Vat Details", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.VatPresentWhenAWBBreakdownExists, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);

            exceptionDetailsList.Add(validationExceptionDetail);

            isValid = false;
        }// End if

        // Validate BM Vat Breakdowns 
        foreach (var billingMemoVat in billingMemoRecord.BillingMemoVat)
        {
            isValid = ValidateParsedCargoVat(billingMemoVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelBillingMemoVat, fileSubmissionDate, billingMemoRecord.BatchSequenceNumber, billingMemoRecord.RecordSequenceWithinBatch, billingMemoNumber, billingMemoRecord.BillingCode, null, false, true);
        }

        // Validate billing memo total 
        ValidateParsedBillingMemoTotals(billingMemoRecord, exceptionDetailsList, invoice, fileName, fileSubmissionDate);

        // Validate BillingMemoAWB BreakdownRecord
        AWBBase previousBreakdownRecord = null;

        foreach (var billingMemoAwbBreakdownRecord in billingMemoRecord.AwbBreakdownRecord)
        {
            // Validate BD serial No.
            if (previousBreakdownRecord != null && billingMemoAwbBreakdownRecord.BdSerialNumber != previousBreakdownRecord.BdSerialNumber + 1)
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BD Serial No", Convert.ToString(billingMemoAwbBreakdownRecord.BdSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidBdSerialNumberSequence, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, billingMemoRecord, false, string.Format("{0}-{1}", billingMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty, billingMemoAwbBreakdownRecord.AwbSerialNumber));
                exceptionDetailsList.Add(validationExceptionDetail);
            }
            else if (previousBreakdownRecord == null && billingMemoAwbBreakdownRecord.BdSerialNumber != 1)
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BD Serial No", Convert.ToString(billingMemoAwbBreakdownRecord.BdSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidBdSerialNumberSequence, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, billingMemoRecord, false, string.Format("{0}-{1}", billingMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty, billingMemoAwbBreakdownRecord.AwbSerialNumber));
                exceptionDetailsList.Add(validationExceptionDetail);
            }
            previousBreakdownRecord = billingMemoAwbBreakdownRecord;

            isValid = ValidateParsedBMAwbBreakdownRecord(billingMemoAwbBreakdownRecord, exceptionDetailsList, billingMemoRecord, invoice, fileName, issuingAirline, fileSubmissionDate);
        }
        ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
        //// Update expiry date for purging.
        //billingMemoRecord.ExpiryDatePeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

        // SCP ID : 72923 - BGEN_00007 - TG PAX file PIDECF-2172013010320130125200007.dat
        // Reason Remark Field should be Max 4000 Char

        if (billingMemoRecord.ReasonRemarks != null)
        {
            if (billingMemoRecord.ReasonRemarks.Length > MaxReasonRemarkCharLength)
            {
                var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1,
                                                                                      fileSubmissionDate, "Reason Remarks",
                                                                                      string.Empty,
                                                                                      invoice,
                                                                                      fileName,
                                                                                      ErrorLevels.ErrorLevelBillingMemo,
                                                                                      ErrorCodes.MaxReasonRemarkCharLength,
                                                                                      ErrorStatus.X,
                                                                                      billingMemoRecord.BillingCode,
                                                                                      billingMemoRecord);

                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;

            }

        }

        return isValid;
    }


    /// <summary>
    /// To Validate TimeLimit Expiry of Corrospondence ref no.
    /// </summary>
    /// <param name="billingMemoRecord"></param>
    /// <param name="invoice"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="fileName"></param>
    /// <param name="lastCorrespondence"></param>
    /// <param name="transactionType"></param>
    /// <returns></returns>
    private bool ValidateTimeLimit(CargoBillingMemo billingMemoRecord, CargoInvoice invoice, IList<IsValidationExceptionDetail> exceptionDetailsList, DateTime fileSubmissionDate, string fileName, CargoCorrespondence lastCorrespondence, TransactionType transactionType)
    {
      var isValid = true;
      //CMP#624 : 2.10 - Change#6 : Time Limits
      /* CMP #624: ICH Rewrite-New SMI X, Here SMI X is expected to behave like ICH */
      bool isOutSideTimeLimit = lastCorrespondence.BMExpiryPeriod.HasValue
                                  ? new DateTime(invoice.BillingYear, invoice.BillingMonth, invoice.BillingPeriod) >
                                    lastCorrespondence.BMExpiryPeriod
                                  : (!ReferenceManager.IsSmiLikeBilateral(invoice.SettlementMethodId, false))
                                      ? !(ReferenceManager.IsTransactionInTimeLimitMethodD(transactionType,
                                                                                           invoice.SettlementMethodId,
                                                                                           lastCorrespondence.
                                                                                             CorrespondenceDate))
                                      : !(ReferenceManager.IsTransactionInTimeLimitMethodD1(transactionType,
                                                                                            Convert.ToInt32(
                                                                                              SMI.Bilateral),
                                                                                            lastCorrespondence.
                                                                                              CorrespondenceDate));

      if (isOutSideTimeLimit)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Correspondence Ref Number", Convert.ToString(billingMemoRecord.CorrespondenceReferenceNumber), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.TimeLimitExpiryForCorrespondence, ErrorStatus.C, billingMemoRecord.BillingCode, billingMemoRecord, islinkingError: true);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      return isValid;
    }

    /// <summary>
    /// To Validate Billing Memo Totals.
    /// </summary>
    /// <param name="billingMemoRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    public bool ValidateParsedBillingMemoTotals(CargoBillingMemo billingMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, DateTime fileSubmissionDate)
    {
      var isValid = true;

      double totalWeightChargeBilled = 0, totalValuationChargeBilled = 0, totalOtherChargeBilled = 0, totalVatAmountBilled = 0, totalIscAmountBilled = 0, netBilledAmount = 0;

      if (billingMemoRecord.AwbBreakdownRecord.Count == 0)
      {
        double totalVatAmount = 0;
        // If vat amount is > 0 and vat breakdowns is 0
        if (billingMemoRecord.BilledTotalVatAmount.HasValue)
        {
          if (billingMemoRecord.BillingMemoVat != null && Convert.ToDouble(billingMemoRecord.BilledTotalVatAmount.Value) > 0 && billingMemoRecord.BillingMemoVat.Count() == 0)
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Amount", billingMemoRecord.BilledTotalVatAmount.Value.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.ZeroVatBreakdownRecords, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        if (billingMemoRecord.BillingMemoVat != null)
        {
          totalVatAmount = billingMemoRecord.BillingMemoVat.Sum(currentRecord => currentRecord.VatCalculatedAmount);
        }
        if (invoice.Tolerance != null)
        {
          if (!CompareUtil.Compare(billingMemoRecord.BilledTotalVatAmount.HasValue ? billingMemoRecord.BilledTotalVatAmount.Value : 0, Convert.ToDecimal(totalVatAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Amount", billingMemoRecord.BilledTotalVatAmount.HasValue ? billingMemoRecord.BilledTotalVatAmount.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidTotalVatBreakdownAmounts, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, totalVatAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          // Total net amount billed
          var netAmountBilled = (billingMemoRecord.BilledTotalWeightCharge.HasValue ? billingMemoRecord.BilledTotalWeightCharge.Value : 0) +
                                (billingMemoRecord.BilledTotalValuationAmount.HasValue ? billingMemoRecord.BilledTotalValuationAmount.Value : 0) + billingMemoRecord.BilledTotalOtherChargeAmount +
                                billingMemoRecord.BilledTotalIscAmount + (billingMemoRecord.BilledTotalVatAmount.HasValue ? billingMemoRecord.BilledTotalVatAmount.Value : 0);

          if (!CompareUtil.Compare(billingMemoRecord.NetBilledAmount.HasValue ? billingMemoRecord.NetBilledAmount.Value : 0, netAmountBilled, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Net Amount", billingMemoRecord.NetBilledAmount.HasValue ? billingMemoRecord.NetBilledAmount.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.NetBilledAmountDoesNotMatchWithSumOfAllAmounts, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, netAmountBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }
      else
      {
        foreach (var currentRecord in billingMemoRecord.AwbBreakdownRecord)
        {
          totalWeightChargeBilled += currentRecord.BilledWeightCharge.HasValue ? currentRecord.BilledWeightCharge.Value : 0;
          totalValuationChargeBilled += currentRecord.BilledValuationCharge.HasValue ? currentRecord.BilledValuationCharge.Value : 0;
          totalOtherChargeBilled += currentRecord.BilledOtherCharge;
          totalIscAmountBilled += currentRecord.BilledIscAmount;
          totalVatAmountBilled += currentRecord.BilledVatAmount.HasValue ? currentRecord.BilledVatAmount.Value : 0;
          netBilledAmount += currentRecord.TotalAmount;
        }
        if (invoice.Tolerance != null)
        {
          // Total Weight Charge Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalWeightChargeBilled), billingMemoRecord.BilledTotalWeightCharge.HasValue ? billingMemoRecord.BilledTotalWeightCharge.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Weight Charge", billingMemoRecord.BilledTotalWeightCharge.HasValue ? billingMemoRecord.BilledTotalWeightCharge.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidTotalWeightCharge, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, totalWeightChargeBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          // Total Valuation Charge Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalValuationChargeBilled), billingMemoRecord.BilledTotalValuationAmount.HasValue ? billingMemoRecord.BilledTotalValuationAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Valuation Amount", billingMemoRecord.BilledTotalValuationAmount.HasValue ? billingMemoRecord.BilledTotalValuationAmount.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidTotalValuationCharge, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, totalValuationChargeBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          // Total Other Charge Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalOtherChargeBilled), billingMemoRecord.BilledTotalOtherChargeAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Other Charge", Convert.ToString(billingMemoRecord.BilledTotalOtherChargeAmount), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidTotalOtherCharge, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, totalOtherChargeBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          // Total ISC Amount Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalIscAmountBilled), billingMemoRecord.BilledTotalIscAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Amount", Convert.ToString(billingMemoRecord.BilledTotalIscAmount), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidTotalIscAmount, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, totalIscAmountBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          // Total VAT Amount Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalVatAmountBilled), billingMemoRecord.BilledTotalVatAmount.HasValue ? billingMemoRecord.BilledTotalVatAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total VAT Amount", billingMemoRecord.BilledTotalVatAmount.HasValue ? billingMemoRecord.BilledTotalVatAmount.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, totalVatAmountBilled.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          // Total Net Amount Billed Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(netBilledAmount), billingMemoRecord.NetBilledAmount.HasValue ? billingMemoRecord.NetBilledAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Net Billed Amount", billingMemoRecord.NetBilledAmount.HasValue ? billingMemoRecord.NetBilledAmount.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.InvalidNetBilledAmount, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord, false, null, netBilledAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }
      // Billing memo net total amount should not be negative.
      if (billingMemoRecord.NetBilledAmount.HasValue && billingMemoRecord.NetBilledAmount < 0)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Net Billed Amount", Convert.ToString(billingMemoRecord.NetBilledAmount.Value), invoice, fileName, ErrorLevels.ErrorLevelBillingMemo, CargoErrorCodes.BillingMemoNetTotalAmountShouldNotBeNegative, ErrorStatus.X, billingMemoRecord.BillingCode, billingMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      return isValid;
    }

    /// <summary>
    /// To validate BMAWb record.
    /// </summary>
    /// <param name="billingMemoAwbBreakdownRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="parentMemo"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedBMAwbBreakdownRecord(CargoBillingMemoAwb billingMemoAwbBreakdownRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoBillingMemo parentMemo, CargoInvoice invoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate)
    {
      var isValid = true;
      var awbIsuingAirline = billingMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty;

      TransactionType transType = 0;

      if (billingMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        transType = TransactionType.CargoPrimePrepaid;
      }
      else if (billingMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
        transType = TransactionType.CargoPrimeChargeCollect;
      }

      // Validate BillingCode 
      if (transType.Equals(TransactionType.None))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code", billingMemoAwbBreakdownRecord.AwbBillingCode.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidBillingCode, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Awb date should be YYMMDD
      if (!string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.AwbDateDisplayText) && Convert.ToInt32(billingMemoAwbBreakdownRecord.AwbDateDisplayText) > 0)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Date", billingMemoAwbBreakdownRecord.AwbDateDisplayText, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidAwbDate, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;

      }

      // Validate Date of carriage.
      if (!billingMemoAwbBreakdownRecord.TransferDate.HasValue)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Date Of Carriage", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidDateOfCarriage, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate BM Awb serialNo
      if (billingMemoAwbBreakdownRecord.AwbSerialNumber.Equals(0))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Serial number", Convert.ToString(billingMemoAwbBreakdownRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidAwbSerialNo, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      if (!ValidateAwbSerialNumber(billingMemoAwbBreakdownRecord.AwbSerialNumber, billingMemoAwbBreakdownRecord.AwbCheckDigit) || billingMemoAwbBreakdownRecord.AwbCheckDigit == 9)
      {
        billingMemoAwbBreakdownRecord.ISValidationFlag += string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.ISValidationFlag) ? CheckDigitValidationFlag : ValidationFlagDelimeter + CheckDigitValidationFlag;
      }


      // validation for AwbCheckdigit
      if ((billingMemoAwbBreakdownRecord.AwbCheckDigit < 0) || (billingMemoAwbBreakdownRecord.AwbCheckDigit > 6 && billingMemoAwbBreakdownRecord.AwbCheckDigit != 9))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb CheckDigit", Convert.ToString(billingMemoAwbBreakdownRecord.AwbCheckDigit), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidAwbCheckDigit, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", billingMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }



      var isValidOrigin = true;
      var isValidDestination = true;
      // Validate Origin Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
              is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (!IsValidCityAirportCode(billingMemoAwbBreakdownRecord.ConsignmentOriginId))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BM Awb Origin", billingMemoAwbBreakdownRecord.ConsignmentOriginId, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.OriginofAwbIsInvalid, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidOrigin = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.ConsignmentOriginId) && string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.ConsignmentOriginId))
      {
          billingMemoAwbBreakdownRecord.ConsignmentOriginId = billingMemoAwbBreakdownRecord.ConsignmentOriginId.Trim();
      }

      // Validate Destination Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
            is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (!IsValidCityAirportCode(billingMemoAwbBreakdownRecord.ConsignmentDestinationId))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BM Awb Destination", billingMemoAwbBreakdownRecord.ConsignmentDestinationId, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.DestinationofAwbIsInvalid, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidDestination = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.ConsignmentDestinationId) && string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.ConsignmentDestinationId))
      {
          billingMemoAwbBreakdownRecord.ConsignmentDestinationId = billingMemoAwbBreakdownRecord.ConsignmentDestinationId.Trim();
      }

      // Origin of awb and Destination of awb should not be same.
      if (billingMemoAwbBreakdownRecord.ConsignmentOriginId != null && billingMemoAwbBreakdownRecord.ConsignmentDestinationId != null && isValidOrigin && isValidDestination)
      {
        if (!string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.ConsignmentOriginId.Trim()) && !string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.ConsignmentDestinationId.Trim()))
        {
          if (String.Equals(billingMemoAwbBreakdownRecord.ConsignmentOriginId.ToUpper(), billingMemoAwbBreakdownRecord.ConsignmentDestinationId.ToUpper()))
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BM Awb Origin", billingMemoAwbBreakdownRecord.ConsignmentOriginId, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.OriginofAwbAndDestinationOfAwbShouldNotBeSame, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }


      var isValidFrom = true;
      var isValidTo = true;

        /*SCP# 125085: [CA-999] QUESTION ABOUT THE CXMLT FILE DOWNLOAD FROM IS-WEB.
            Desc : CarriageFromId and CarriageToId both are required fields and it should not be null. corrected the conditional check.
            Date : 17-May-2013
        */
      // Validate Origin Awb 
      if (string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.CarriageFromId) || !IsValidCityAirportCode(billingMemoAwbBreakdownRecord.CarriageFromId))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BM Awb CarriageFrom", billingMemoAwbBreakdownRecord.CarriageFromId, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.FromofAwbIsInvalid, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidFrom = false;
      }
      // Validate Destination Awb 
      if (string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.CarriageToId) || !IsValidCityAirportCode(billingMemoAwbBreakdownRecord.CarriageToId))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BM Awb CarriageTo", billingMemoAwbBreakdownRecord.CarriageToId, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.ToofAwbIsInvalid, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidTo = false;
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for BM AWB Prepaid.
      if (billingMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        if (billingMemoAwbBreakdownRecord.CarriageFromId != null && billingMemoAwbBreakdownRecord.CarriageToId != null && isValidFrom && isValidTo)
        {
          if (!string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.CarriageFromId.Trim()) && !string.IsNullOrEmpty(billingMemoAwbBreakdownRecord.CarriageToId.Trim()))
          {
            if (String.Equals(billingMemoAwbBreakdownRecord.CarriageFromId.ToUpper(), billingMemoAwbBreakdownRecord.CarriageToId.ToUpper()))
            {
              var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1,
                                                                                   fileSubmissionDate, "BM Awb Carriage From",
                                                                                   billingMemoAwbBreakdownRecord.CarriageFromId, invoice,
                                                                                   fileName, ErrorLevels.ErrorLevelBmAirwayBill,
                                                                                   CargoErrorCodes.FromofAwbAndToOfAwbShouldNotBeSame, ErrorStatus.X,
                                                                                   billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo,
                                                                                   false, string.Format("{0}-{1}", awbIsuingAirline,
                                                                                   billingMemoAwbBreakdownRecord.AwbSerialNumber));
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            } // End if
          } // End if
        } // End if
      } // End if


      // Validate Awb issuing airline using local caching.
      isValid = ValidateAirWayBillIssuingAirline(billingMemoAwbBreakdownRecord, exceptionDetailsList, parentMemo, invoice, fileName, isValid, ErrorLevels.ErrorLevelBmAirwayBill, issuingAirline, fileSubmissionDate, parentMemo.BillingMemoNumber, billingMemoAwbBreakdownRecord.AwbBillingCode);

      // Validation for CurrencyAdjustment Indicator.
      if (!string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.CurrencyAdjustmentIndicator) && !ReferenceManager.IsValidCurrencyCode(invoice, billingMemoAwbBreakdownRecord.CurrencyAdjustmentIndicator))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Currency Adjustment Indicator", Convert.ToString(billingMemoAwbBreakdownRecord.CurrencyAdjustmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidCurrencyAdjustmentInd, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate ProvisoReqSpa 
      if (!string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.ProvisionalReqSpa))
      {
        if (!(billingMemoAwbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaP) || billingMemoAwbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaR) || billingMemoAwbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaS)))
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Proviso/Req./SPA", Convert.ToString(billingMemoAwbBreakdownRecord.ProvisionalReqSpa), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidProvisoReqSpa, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else
        {
          if (billingMemoAwbBreakdownRecord.PrpratePercentage != null && billingMemoAwbBreakdownRecord.PrpratePercentage.HasValue && billingMemoAwbBreakdownRecord.PrpratePercentage.Value != 0)
          {
            var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
            "Prorate percentage", billingMemoAwbBreakdownRecord.PrpratePercentage.HasValue ? billingMemoAwbBreakdownRecord.PrpratePercentage.Value.ToString() : "0",
            invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidProratePer2, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo,
            true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Validation for PartShipMentIndicator.
      if (!string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.PartShipmentIndicator))
      {
        if (!(billingMemoAwbBreakdownRecord.PartShipmentIndicator.ToUpper().Equals(PartShipMentIndicatorP)))
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "PartShipment Indicator", Convert.ToString(billingMemoAwbBreakdownRecord.PartShipmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidPartShipMentIndicator, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate KgLbIndicator 
      if (billingMemoAwbBreakdownRecord.BilledWeight.HasValue && billingMemoAwbBreakdownRecord.BilledWeight > 0)
      {
        if (string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.KgLbIndicator) || (!billingMemoAwbBreakdownRecord.KgLbIndicator.Equals(KgLbIndicatorK) && !billingMemoAwbBreakdownRecord.KgLbIndicator.Equals(KgLbIndicatorL)))
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "KgLb Indicator", Convert.ToString(billingMemoAwbBreakdownRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.C, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(billingMemoAwbBreakdownRecord.KgLbIndicator))
        {
          // Robin : Billed Weight (Element No 25) is not present and populated. This error is NonCorrectable
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "KgLb Indicator", Convert.ToString(billingMemoAwbBreakdownRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Awb Vat records should be present if VatAmount > 0.
      if (billingMemoAwbBreakdownRecord.BilledVatAmount.HasValue && billingMemoAwbBreakdownRecord.BilledVatAmount.Value > 0 && billingMemoAwbBreakdownRecord.AwbVat.Count == 0 && billingMemoAwbBreakdownRecord.OtherCharges.Count == 0)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Vat Amount", Convert.ToString(billingMemoAwbBreakdownRecord.BilledVatAmount.HasValue ? billingMemoAwbBreakdownRecord.BilledVatAmount.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.ZeroCouponVatRecordsForAwbVatAmount, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      // Total of Vat amount in all the Vat and OC records.
      double totalVat = 0;
      if (billingMemoAwbBreakdownRecord.AwbVat != null)
      {
        totalVat = billingMemoAwbBreakdownRecord.AwbVat.Sum(vatRecord => vatRecord.VatCalculatedAmount);
      }
      if (billingMemoAwbBreakdownRecord.OtherCharges != null)
      {
        totalVat += billingMemoAwbBreakdownRecord.OtherCharges.Sum(ocRecord => ocRecord.OtherChargeVatCalculatedAmount.HasValue ? ocRecord.OtherChargeVatCalculatedAmount.Value : 0);
      }

      if (invoice.Tolerance != null && !CompareUtil.Compare(billingMemoAwbBreakdownRecord.BilledVatAmount.HasValue ? billingMemoAwbBreakdownRecord.BilledVatAmount.Value : 0, totalVat, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb vAT Amount", Convert.ToString(billingMemoAwbBreakdownRecord.BilledVatAmount.HasValue ? billingMemoAwbBreakdownRecord.BilledVatAmount.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidAwbVatBreakdownAmount, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), totalVat.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Total of OC amount in all the Tax records.
      if (billingMemoAwbBreakdownRecord.OtherCharges != null && billingMemoAwbBreakdownRecord.OtherCharges.Count > 0)
      {
        double totalOc = billingMemoAwbBreakdownRecord.OtherCharges.Sum(ocRecord => ocRecord.OtherChargeCodeValue.HasValue ? ocRecord.OtherChargeCodeValue.Value : 0);

        if (invoice.Tolerance != null && !CompareUtil.Compare(billingMemoAwbBreakdownRecord.BilledOtherCharge, totalOc, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb OtherCharge Amount", billingMemoAwbBreakdownRecord.BilledOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidAwbOcBreakdownAmount, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), totalOc.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate IscAmount 
      if ((int)billingMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
        var iscPCalulatedAmount = billingMemoAwbBreakdownRecord.BilledAmtSubToIsc * (billingMemoAwbBreakdownRecord.BilledIscPercentage/100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(billingMemoAwbBreakdownRecord.BilledIscAmount, iscPCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "ISC Amount", billingMemoAwbBreakdownRecord.BilledIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidCcIscAmount, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), iscPCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      if ((int)billingMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        var iscCCalulatedAmount = ((billingMemoAwbBreakdownRecord.BilledWeightCharge.HasValue ? billingMemoAwbBreakdownRecord.BilledWeightCharge.Value : 0) + (billingMemoAwbBreakdownRecord.BilledValuationCharge.HasValue ? billingMemoAwbBreakdownRecord.BilledValuationCharge.Value : 0)) * (billingMemoAwbBreakdownRecord.BilledIscPercentage/100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(billingMemoAwbBreakdownRecord.BilledIscAmount, iscCCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "ISC Amount", billingMemoAwbBreakdownRecord.BilledIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidPIscAmount, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), iscCCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Total Amount Validation.
      var totalAmount = (billingMemoAwbBreakdownRecord.BilledWeightCharge.HasValue ? billingMemoAwbBreakdownRecord.BilledWeightCharge.Value : 0) +
                        (billingMemoAwbBreakdownRecord.BilledValuationCharge.HasValue ? billingMemoAwbBreakdownRecord.BilledValuationCharge.Value : 0) + billingMemoAwbBreakdownRecord.BilledOtherCharge +
                        billingMemoAwbBreakdownRecord.BilledIscAmount + (billingMemoAwbBreakdownRecord.BilledVatAmount.HasValue ? billingMemoAwbBreakdownRecord.BilledVatAmount.Value : 0);

      if (totalAmount == 0)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Amounts in awb", totalAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.AllAmountFieldsZeroInAwbRecord, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      if (billingMemoAwbBreakdownRecord.TotalAmount < 0)
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "TotalAmount in awb", billingMemoAwbBreakdownRecord.TotalAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.TotalAmountInAwbCanNotBeNegative, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      if (invoice.Tolerance != null && !CompareUtil.Compare(billingMemoAwbBreakdownRecord.TotalAmount, totalAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "TotalAmount in awb", billingMemoAwbBreakdownRecord.TotalAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBill, CargoErrorCodes.InvalidtotalAmountInAwb, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), totalAmount.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate AwbVat Breakdowns 
      foreach (var awbRecordVat in billingMemoAwbBreakdownRecord.AwbVat)
      {
        isValid = ValidateParsedCargoVat(awbRecordVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBillVat, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.BillingMemoNumber, billingMemoAwbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), false, true);
      }

      // Validate OC Breakdowns 
      foreach (var awbRecordOc in billingMemoAwbBreakdownRecord.OtherCharges)
      {
        isValid = ValidateParsedCargoOc(awbRecordOc, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBillOtherCharge, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.BillingMemoNumber, billingMemoAwbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber), false, true);
      }

      // Validate Prorate Ladder Breakdown

      // Validation for Currency of Prorate Calculation. Indicator.
      if (billingMemoAwbBreakdownRecord.ProrateCalCurrencyId != null && !ReferenceManager.IsValidCurrencyCode(invoice, billingMemoAwbBreakdownRecord.ProrateCalCurrencyId))
      {
        var validationExceptionDetail = CreateCgoBMValidationExceptionDetail(billingMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Currency Prorate Calulation", Convert.ToString(billingMemoAwbBreakdownRecord.ProrateCalCurrencyId), invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBillProrateLadder, CargoErrorCodes.InvalidCurrencyProrateCalculation, ErrorStatus.X, billingMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      foreach (var awbLadder in billingMemoAwbBreakdownRecord.ProrateLadder)
      {
        isValid = ValidateParsedCargoProRateLadder(awbLadder, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelBmAirwayBillProrateLadder, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.BillingMemoNumber, billingMemoAwbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, billingMemoAwbBreakdownRecord.AwbSerialNumber));
      }

      return isValid;
    }

    #endregion

    #region Cargo CreditMemo Parsing Validation

    /// <summary>
    /// To Validate Cargo Credit memo.
    /// </summary>
    /// <param name="creditMemoRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exchangeRate"></param>
    /// <param name="maxAcceptableAmount"></param>
    /// <returns></returns>
    private bool ValidateParsedCreditMemoRecord(CargoCreditMemo creditMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate, ExchangeRate exchangeRate, MaxAcceptableAmount maxAcceptableAmount)
    {
      var isValid = true;

      var creditMemoNumber = string.Empty;

      if (creditMemoRecord.CreditMemoNumber != null)
      {
        creditMemoNumber = creditMemoRecord.CreditMemoNumber;
      }

      ////Billing period should be 01,02,03,04
      //if (creditMemoRecord.YourInvoiceBillingPeriod < 0 || creditMemoRecord.YourInvoiceBillingPeriod > 4)
      //{
      //  var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Your Invoice Billing Period", string.Format("{0}{1}{2}", creditMemoRecord.YourInvoiceBillingYear, creditMemoRecord.YourInvoiceBillingMonth, creditMemoRecord.YourInvoiceBillingPeriod), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidYourInvoiceBillingPeriod, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
      //  exceptionDetailsList.Add(validationExceptionDetail);
      //  isValid = false;
      //}

      // Validate BillingCode
      if (!creditMemoRecord.BillingCode.Equals((int)BillingCode.CreditNote))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code", Convert.ToString(creditMemoRecord.BillingCode), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidBillingCode, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      //SCPID:122022 -Valid Batch & Sequence number.
      if (creditMemoRecord.RecordSequenceWithinBatch <= 0 || creditMemoRecord.BatchSequenceNumber <= 0)
      {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Batch Sequence Number - Record Sequence Number", string.Format("{0}-{1}", creditMemoRecord.BatchSequenceNumber, creditMemoRecord.RecordSequenceWithinBatch), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.BatchRecordSequenceNoReq,
          ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }
      // Duplicate check in current invoice - credit memo number
      if (invoice.CGOCreditMemo.Where(memoRecord => memoRecord.CreditMemoNumber != null && memoRecord.CreditMemoNumber.Trim().ToUpper() == creditMemoRecord.CreditMemoNumber.Trim().ToUpper()).Count() > 1)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Credit Memo Number", creditMemoRecord.CreditMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.CgoDuplicateCreditMemoFound, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      // Duplicate check in other invoices - credit memo number
      else if (IsDuplicateCreditMemo(null, creditMemoRecord, false, invoice))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Credit Memo Number", creditMemoRecord.CreditMemoNumber, invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.CgoDuplicateCreditMemoFound, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      //SCP122624:
      if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml)
      {

        DateTime yourInvoiceBillingDate;
        //To avoid converting year 30 into year 1930
        var cultureInfo = new CultureInfo("en-US");
        cultureInfo.Calendar.TwoDigitYearMax = 2099;
        var yourInvoiceDateString = string.Format("{2}{1}{0}",
                                       Convert.ToString(creditMemoRecord.YourInvoiceBillingPeriod).PadLeft(2, '0'),
                                       Convert.ToString(creditMemoRecord.YourInvoiceBillingMonth).PadLeft(2, '0'),
                                       Convert.ToString(creditMemoRecord.YourInvoiceBillingYear).PadLeft(4, '0'));
        var yourInvoiceDateStringErr = yourInvoiceDateString.Substring(2, yourInvoiceDateString.Length-2);
        if ((!String.IsNullOrEmpty(yourInvoiceDateString) && (Convert.ToInt32(yourInvoiceDateString) != 0) && string.IsNullOrWhiteSpace(creditMemoRecord.YourInvoiceNumber)) || (Convert.ToInt32(yourInvoiceDateString) == 0 && !string.IsNullOrWhiteSpace(creditMemoRecord.YourInvoiceNumber)))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Your Invoice Number", yourInvoiceDateString, invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, ErrorCodes.MandatoryYourInvoiceNumberAndYourBillingDate, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        if (!String.IsNullOrEmpty(yourInvoiceDateString) && (Convert.ToInt32(yourInvoiceDateString) != 0))
        {
          if (DateTime.TryParseExact(yourInvoiceDateString, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out yourInvoiceBillingDate))
          {
            if (yourInvoiceBillingDate.Day < 1 || yourInvoiceBillingDate.Day > 4)
            {
              //Raise NonCorrectable error for invalid your invoice Date.
              var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(),
                                                                                   exceptionDetailsList.Count() + 1,
                                                                                   fileSubmissionDate,
                                                                                   "Your Invoice Billing Date",
                                                                                   yourInvoiceDateStringErr,
                                                                                   invoice,
                                                                                   fileName,
                                                                                   ErrorLevels.ErrorLevelCreditMemo,
                                                                                   ErrorCodes.InvalidYourInvoiceBillingDatePeriod,
                                                                                   ErrorStatus.X,
                                                                                   creditMemoRecord.BillingCode,
                                                                                   creditMemoRecord);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
          else
          {
            //Raise NonCorrectable error for invalid your invoice Date.
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(),
                                                                                 exceptionDetailsList.Count() + 1,
                                                                                 fileSubmissionDate,
                                                                                 "Your Invoice Billing Date",
                                                                                 yourInvoiceDateStringErr,
                                                                                 invoice,
                                                                                 fileName,
                                                                                 ErrorLevels.ErrorLevelCreditMemo,
                                                                                 ErrorCodes.InvalidYourInvoiceBillingDatePeriod,
                                                                                 ErrorStatus.X,
                                                                                 creditMemoRecord.BillingCode,
                                                                                 creditMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }
      //Validate Correspondence reference Number
      if (creditMemoRecord.ReasonCode != null)
      {
        // validate reason code 
        if (!ReferenceManager.IsValidReasonCode(invoice, creditMemoRecord.ReasonCode, (int)TransactionType.CargoCreditMemo))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Reason Code", creditMemoRecord.ReasonCode, invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.CgoInvalidReasonCode, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, true);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        var isCouponBreakdownMandatory = ReasonCodeRepository.GetCount(reasonCode => reasonCode.Code.ToUpper() == creditMemoRecord.ReasonCode.ToUpper() && reasonCode.TransactionTypeId == (int)TransactionType.CargoCreditMemo && reasonCode.CouponAwbBreakdownMandatory) > 0;
        if (isCouponBreakdownMandatory && creditMemoRecord.AWBBreakdownRecord.Count == 0)
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Memo Record", Convert.ToString(creditMemoRecord.ReasonCode), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.MandatoryCouponBreakdownRecord, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        // Validation for Reason Code 6A and 6B.
        if (creditMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6A) || creditMemoRecord.ReasonCode.ToUpper().Equals(ReasonCode6B))
        {
          // Correspondence Ref Number should be populated for Reason Code “6A” or “6B”.
          if (creditMemoRecord.CorrespondenceRefNumber == 0)
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Correspondence Ref Number", Convert.ToString(creditMemoRecord.CorrespondenceRefNumber), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidCorrespondenceRefNumber, ErrorStatus.C, creditMemoRecord.BillingCode, creditMemoRecord, islinkingError: true);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          else
          {
            var corrBillingToBilled = CorrespondenceRepository.Single(rec => rec.CorrespondenceNumber == creditMemoRecord.CorrespondenceRefNumber && rec.FromMemberId == invoice.BillingMemberId && rec.ToMemberId == invoice.BilledMemberId);
            if (corrBillingToBilled == null)
            {
              var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Correspondence Ref Number", Convert.ToString(creditMemoRecord.CorrespondenceRefNumber), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.BillingMemoReferenceCorrespondenceDoesNotExist, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }
        // Correspondence Ref Number should be populated only for Reason Code “6A” or “6B”.
        else if (creditMemoRecord.CorrespondenceRefNumber != 0)
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Correspondence Ref Number", Convert.ToString(creditMemoRecord.CorrespondenceRefNumber), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidCorrespondenceRefNumber, ErrorStatus.C, creditMemoRecord.BillingCode, creditMemoRecord, islinkingError: true);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate Net Reject Amount
      if (exchangeRate != null && creditMemoRecord.NetAmountCredited.HasValue && maxAcceptableAmount != null && !ReferenceManager.IsValidNetAmount(Convert.ToDouble(creditMemoRecord.NetAmountCredited.Value), TransactionType.CargoCreditMemo, invoice.ListingCurrencyId, invoice, exchangeRate, iMaxAcceptableAmount: maxAcceptableAmount, isCreditNote: true))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Net Credited Amount", Convert.ToString(creditMemoRecord.NetAmountCredited.Value), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidAmountToBeSettled, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate credit memo totals 
      ValidateParsedCreditMemoTotals(creditMemoRecord, exceptionDetailsList, invoice, fileName, fileSubmissionDate);

      // Memo level VAT breakdown should not be provided when RM/BM/CM has AWB breakdown information.
      if (creditMemoRecord.VatBreakdown.Count > 0 && creditMemoRecord.AWBBreakdownRecord.Count > 0)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "CM Vat Details", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.VatPresentWhenAWBBreakdownExists, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);

        exceptionDetailsList.Add(validationExceptionDetail);

        isValid = false;
      }// End if

      // Validate Vat Breakdowns 
      foreach (var creditMemoVat in creditMemoRecord.VatBreakdown)
      {
        isValid = ValidateParsedCargoVat(creditMemoVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelCreditMemoVat, fileSubmissionDate, creditMemoRecord.BatchSequenceNumber, creditMemoRecord.RecordSequenceWithinBatch, creditMemoNumber, creditMemoRecord.BillingCode, null, false, true);
      }

      // Validate CreditMemo Awb BreakdownRecord 
      AWBBase previousBreakdownRecord = null;
      foreach (var creditMemoAwbBreakdownRecord in creditMemoRecord.AWBBreakdownRecord)
      {
        if (previousBreakdownRecord != null && creditMemoAwbBreakdownRecord.BdSerialNumber != previousBreakdownRecord.BdSerialNumber + 1)
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BD Serial No", Convert.ToString(creditMemoAwbBreakdownRecord.BdSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidBdSerialNumberSequence, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, string.Format("{0}-{1}", creditMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty, creditMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
        }
        else if (previousBreakdownRecord == null && creditMemoAwbBreakdownRecord.BdSerialNumber != 1)
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "BD Serial No", Convert.ToString(creditMemoAwbBreakdownRecord.BdSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidBdSerialNumberSequence, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, string.Format("{0}-{1}", creditMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty, creditMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
        }

        previousBreakdownRecord = creditMemoAwbBreakdownRecord;

        isValid = ValidateParsedCMAwbBreakdownRecord(creditMemoAwbBreakdownRecord, exceptionDetailsList, creditMemoRecord, invoice, fileName, issuingAirline, fileSubmissionDate);
      }
      ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
      //// Update expiry period of credit memo for purging.
      //creditMemoRecord.ExpiryDatePeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

      // SCP ID : 72923 - BGEN_00007 - TG PAX file PIDECF-2172013010320130125200007.dat
      // Reason Remark Field should be Max 4000 Char

      if (creditMemoRecord.ReasonRemarks != null)
      {
          if (creditMemoRecord.ReasonRemarks.Length > MaxReasonRemarkCharLength)
          {
              var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(),
                                                                                   exceptionDetailsList.Count() + 1,
                                                                                   fileSubmissionDate,
                                                                                   "Reason Remarks",
                                                                                   string.Empty,
                                                                                   invoice, fileName,
                                                                                   ErrorLevels.ErrorLevelCreditMemo,
                                                                                   ErrorCodes.MaxReasonRemarkCharLength,
                                                                                   ErrorStatus.X,
                                                                                   creditMemoRecord.BillingCode,
                                                                                   creditMemoRecord);

              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;

          }

      }




      return isValid;
    }

    /// <summary>
    /// To validate Credit memo Totals.
    /// </summary>
    /// <param name="creditMemoRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    public bool ValidateParsedCreditMemoTotals(CargoCreditMemo creditMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, DateTime fileSubmissionDate)
    {
      var isValid = true;

      double totalWeightChargeCredited = 0, totalValuationChargeCredited = 0, totalOtherChargeCredited = 0, totalVatAmountCredited = 0, totalIscAmountCredited = 0, netCreditedAmount = 0;

      if (creditMemoRecord.AWBBreakdownRecord.Count == 0)
      {
        // If vat amount is > 0 and vat breakdowns is 0
        if (creditMemoRecord.TotalVatAmountCredited.HasValue)
        {
          if (creditMemoRecord.VatBreakdown != null && Convert.ToDouble(creditMemoRecord.TotalVatAmountCredited.Value) > 0 && creditMemoRecord.VatBreakdown.Count() == 0)
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Amount", creditMemoRecord.TotalVatAmountCredited.Value.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.ZeroVatBreakdownRecords, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        double totalVatAmount = 0;

        if (creditMemoRecord.VatBreakdown != null)
        {
          totalVatAmount = creditMemoRecord.VatBreakdown.Sum(currentRecord => currentRecord.VatCalculatedAmount);
        }

        if (invoice.Tolerance != null)
        {
          if (!CompareUtil.Compare(Convert.ToDecimal(totalVatAmount), creditMemoRecord.TotalVatAmountCredited.HasValue ? creditMemoRecord.TotalVatAmountCredited.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Amount", creditMemoRecord.TotalVatAmountCredited.HasValue ? creditMemoRecord.TotalVatAmountCredited.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidTotalVatBreakdownAmounts, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, totalVatAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var netAmountCredited = (creditMemoRecord.TotalWeightCharges.HasValue ? creditMemoRecord.TotalWeightCharges.Value : 0) +
                                (creditMemoRecord.TotalValuationAmt.HasValue ? creditMemoRecord.TotalValuationAmt.Value : 0) + creditMemoRecord.TotalOtherChargeAmt +
                                creditMemoRecord.TotalIscAmountCredited + (creditMemoRecord.TotalVatAmountCredited.HasValue ? creditMemoRecord.TotalVatAmountCredited.Value : 0);

          // Total net amount credited.
          if (!CompareUtil.Compare(creditMemoRecord.NetAmountCredited.HasValue ? creditMemoRecord.NetAmountCredited.Value : 0, netAmountCredited, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Net Amount", creditMemoRecord.NetAmountCredited.HasValue ? creditMemoRecord.NetAmountCredited.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.NetCreditedAmountDoesNotMatchWithSumOfAllAmounts, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, netAmountCredited.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }
      else
      {
        foreach (var currentRecord in creditMemoRecord.AWBBreakdownRecord)
        {
          totalWeightChargeCredited += currentRecord.CreditedWeightCharge.HasValue ? currentRecord.CreditedWeightCharge.Value : 0;
          totalValuationChargeCredited += currentRecord.CreditedValuationCharge.HasValue ? currentRecord.CreditedValuationCharge.Value : 0;
          totalOtherChargeCredited += currentRecord.CreditedOtherCharge;
          totalIscAmountCredited += currentRecord.CreditedIscAmount;
          totalVatAmountCredited += currentRecord.CreditedVatAmount.HasValue ? currentRecord.CreditedVatAmount.Value : 0;
          netCreditedAmount += currentRecord.TotalAmountCredited;
        }

        if (invoice.Tolerance != null)
        {
          // Total Weight Charge Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalWeightChargeCredited), creditMemoRecord.TotalWeightCharges.HasValue ? creditMemoRecord.TotalWeightCharges.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Weight Charge", creditMemoRecord.TotalWeightCharges.HasValue ? creditMemoRecord.TotalWeightCharges.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidTotalWeightCharge, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, totalWeightChargeCredited.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          // Total Valuation Charge Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalValuationChargeCredited), creditMemoRecord.TotalValuationAmt.HasValue ? creditMemoRecord.TotalValuationAmt.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Valuation Amount", creditMemoRecord.TotalValuationAmt.HasValue ? creditMemoRecord.TotalValuationAmt.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidTotalValuationCharge, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, totalValuationChargeCredited.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          // Total Other Charge Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalOtherChargeCredited), creditMemoRecord.TotalOtherChargeAmt, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Other Charge", Convert.ToString(creditMemoRecord.TotalOtherChargeAmt), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidTotalOtherCharge, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, totalOtherChargeCredited.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          // Total ISC Amount Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalIscAmountCredited), creditMemoRecord.TotalIscAmountCredited, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Amount", Convert.ToString(creditMemoRecord.TotalIscAmountCredited), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidTotalIscAmount, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, totalIscAmountCredited.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          // Total VAT Amount Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(totalVatAmountCredited), creditMemoRecord.TotalVatAmountCredited.HasValue ? creditMemoRecord.TotalVatAmountCredited.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total VAT Amount", creditMemoRecord.TotalVatAmountCredited.HasValue ? creditMemoRecord.TotalVatAmountCredited.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, totalVatAmountCredited.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          // Total Net Amount Billed Validation
          if (!CompareUtil.Compare(Convert.ToDecimal(netCreditedAmount), creditMemoRecord.NetAmountCredited.HasValue ? creditMemoRecord.NetAmountCredited.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Net Credited Amount", creditMemoRecord.NetAmountCredited.HasValue ? creditMemoRecord.NetAmountCredited.Value.ToString() : "0", invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.InvalidNetCreditedAmount, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord, false, null, netCreditedAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }
      // Credit memo net total amount should not be positive.
      if (creditMemoRecord.NetAmountCredited.HasValue && creditMemoRecord.NetAmountCredited.Value > 0)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Net Credited Amount", creditMemoRecord.NetAmountCredited.Value.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCreditMemo, CargoErrorCodes.CreditMemoCouponNetTotalAmountShouldBeNegative, ErrorStatus.X, creditMemoRecord.BillingCode, creditMemoRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      return isValid;
    }

    /// <summary>
    /// To validate credit memo Awb record.
    /// </summary>
    /// <param name="creditMemoAwbBreakdownRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="parentMemo"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedCMAwbBreakdownRecord(CMAirWayBill creditMemoAwbBreakdownRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoCreditMemo parentMemo, CargoInvoice invoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate)
    {
      var isValid = true;

      var awbIsuingAirline = creditMemoAwbBreakdownRecord.AwbIssueingAirline ?? string.Empty;

      TransactionType transType = 0;

      if (creditMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        transType = TransactionType.CargoPrimePrepaid;
      }
      else if (creditMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
        transType = TransactionType.CargoPrimeChargeCollect;
      }

      // Validate BillingCode 
      if (transType.Equals(TransactionType.None))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code", creditMemoAwbBreakdownRecord.AwbBillingCode.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidBillingCode, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate AwbDate of carriage.
      if (!string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.AwbDateDisplayText) && Convert.ToInt32(creditMemoAwbBreakdownRecord.AwbDateDisplayText) > 0)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Date", creditMemoAwbBreakdownRecord.AwbDateDisplayText, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidAwbDate, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate Date of carriage.
      if (!creditMemoAwbBreakdownRecord.TransferDate.HasValue)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Date Of Carriage", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidDateOfCarriage, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate BM Awb serialNo
      if (creditMemoAwbBreakdownRecord.AwbSerialNumber.Equals(0))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Serial number", Convert.ToString(creditMemoAwbBreakdownRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidAwbSerialNo, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      if (!ValidateAwbSerialNumber(creditMemoAwbBreakdownRecord.AwbSerialNumber, creditMemoAwbBreakdownRecord.AwbCheckDigit) || creditMemoAwbBreakdownRecord.AwbCheckDigit == 9)
      {
        creditMemoAwbBreakdownRecord.ISValidationFlag += string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.ISValidationFlag) ? CheckDigitValidationFlag : ValidationFlagDelimeter + CheckDigitValidationFlag;
      }

      // validation for AwbCheckdigit
      if ((creditMemoAwbBreakdownRecord.AwbCheckDigit < 0) || (creditMemoAwbBreakdownRecord.AwbCheckDigit > 6 && creditMemoAwbBreakdownRecord.AwbCheckDigit != 9))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb CheckDigit", Convert.ToString(creditMemoAwbBreakdownRecord.AwbCheckDigit), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidAwbCheckDigit, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      var isValidOrigin = true;
      var isValidDestination = true;
      // Validate Origin Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
              is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (!IsValidCityAirportCode(creditMemoAwbBreakdownRecord.ConsignmentOriginId))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "CM Awb Origin", creditMemoAwbBreakdownRecord.ConsignmentOriginId, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.OriginofAwbIsInvalid, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidOrigin = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.ConsignmentOriginId) && string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.ConsignmentOriginId))
      {
          creditMemoAwbBreakdownRecord.ConsignmentOriginId = creditMemoAwbBreakdownRecord.ConsignmentOriginId.Trim();
      }

      // Validate Destination Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
            is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (!IsValidCityAirportCode(creditMemoAwbBreakdownRecord.ConsignmentDestinationId))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "CM Awb Destination", creditMemoAwbBreakdownRecord.ConsignmentDestinationId, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.DestinationofAwbIsInvalid, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidDestination = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.ConsignmentDestinationId) && string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.ConsignmentDestinationId))
      {
          creditMemoAwbBreakdownRecord.ConsignmentDestinationId = creditMemoAwbBreakdownRecord.ConsignmentDestinationId.Trim();
      }

      // Origin of awb and Destination of awb should not be same.
      if (creditMemoAwbBreakdownRecord.ConsignmentOriginId != null && creditMemoAwbBreakdownRecord.ConsignmentDestinationId != null && isValidOrigin && isValidDestination)
      {
        if (!string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.ConsignmentOriginId.Trim()) && !string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.ConsignmentDestinationId.Trim()))
        {
          if (String.Equals(creditMemoAwbBreakdownRecord.ConsignmentOriginId.ToUpper(), creditMemoAwbBreakdownRecord.ConsignmentDestinationId.ToUpper()))
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "CM Awb Origin", creditMemoAwbBreakdownRecord.ConsignmentOriginId, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.OriginofAwbAndDestinationOfAwbShouldNotBeSame, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      var isValidFrom = true;
      var isValidTo = true;

      // Validate Origin Awb 
      /*  SCP# 125085: [CA-999] QUESTION ABOUT THE CXMLT FILE DOWNLOAD FROM IS-WEB.
          Desc : CarriageFromId and CarriageToId both are required fields and it should not be null. corrected the conditional check.
          Date : 23-May-2013
      */
      if (String.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.CarriageFromId) || !IsValidCityAirportCode(creditMemoAwbBreakdownRecord.CarriageFromId))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "CM Awb CarriageFrom", creditMemoAwbBreakdownRecord.CarriageFromId, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.FromofAwbIsInvalid, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidFrom = false;
      }
      // Validate Destination Awb 
      if (String.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.CarriageToId) || !IsValidCityAirportCode(creditMemoAwbBreakdownRecord.CarriageToId))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "CM Awb CarriageTo", creditMemoAwbBreakdownRecord.CarriageToId, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.ToofAwbIsInvalid, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidTo = false;
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for CM AWB Prepaid.
      if (creditMemoAwbBreakdownRecord.AwbBillingCode == (int)Model.Cargo.Enums.BillingCode.AWBPrepaid)
      {
        if (creditMemoAwbBreakdownRecord.CarriageFromId != null && creditMemoAwbBreakdownRecord.CarriageToId != null && isValidFrom && isValidTo)
        {
          if (!string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.CarriageFromId.Trim()) && !string.IsNullOrEmpty(creditMemoAwbBreakdownRecord.CarriageToId.Trim()))
          {
            if (String.Equals(creditMemoAwbBreakdownRecord.CarriageFromId.ToUpper(), creditMemoAwbBreakdownRecord.CarriageToId.ToUpper()))
            {
              var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1,
                                                                                   fileSubmissionDate, "CM Awb CarriageFrom",
                                                                                   creditMemoAwbBreakdownRecord.CarriageFromId, invoice,
                                                                                   fileName, ErrorLevels.ErrorLevelCmAirwayBill,
                                                                                   CargoErrorCodes.FromofAwbAndToOfAwbShouldNotBeSame, ErrorStatus.X,
                                                                                   creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo,
                                                                                   false, string.Format("{0}-{1}", awbIsuingAirline,
                                                                                   creditMemoAwbBreakdownRecord.AwbSerialNumber));
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            } // End if
          } // End if
        } // End if
      } // End if

      // Validate Awb issuing airline using local caching.
      isValid = ValidateAirWayBillIssuingAirline(creditMemoAwbBreakdownRecord, exceptionDetailsList, parentMemo, invoice, fileName, isValid, ErrorLevels.ErrorLevelBmAirwayBill, issuingAirline, fileSubmissionDate, parentMemo.CreditMemoNumber, creditMemoAwbBreakdownRecord.AwbBillingCode);

      // Validation for CurrencyAdjustment Indicator.
      if (!string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.CurrencyAdjustmentIndicator) && !ReferenceManager.IsValidCurrencyCode(invoice, creditMemoAwbBreakdownRecord.CurrencyAdjustmentIndicator))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Currency Adjustment Indicator", Convert.ToString(creditMemoAwbBreakdownRecord.CurrencyAdjustmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidCurrencyAdjustmentInd, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (!isValid)
      {
        parentMemo.TransactionStatus = TransactionStatus.ErrorNonCorrectable;
      }

      // Validate ProvisoReqSpa 
      if (!string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.ProvisionalReqSpa))
      {
        if (!(creditMemoAwbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaP) || creditMemoAwbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaR) || creditMemoAwbBreakdownRecord.ProvisionalReqSpa.ToUpper().Equals(ProvisoReqSpaS)))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Proviso/Req./SPA", Convert.ToString(creditMemoAwbBreakdownRecord.ProvisionalReqSpa), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidProvisoReqSpa, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else
        {
          if (creditMemoAwbBreakdownRecord.ProratePercentage != null && creditMemoAwbBreakdownRecord.ProratePercentage.HasValue && creditMemoAwbBreakdownRecord.ProratePercentage.Value != 0)
          {
            var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
              "Prorate percentage", creditMemoAwbBreakdownRecord.ProratePercentage.HasValue ? creditMemoAwbBreakdownRecord.ProratePercentage.Value.ToString() : "0", invoice,
              fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidProratePer2, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true,
              string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Validation for PartShipMentIndicator.
      if (!string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.PartShipmentIndicator))
      {
        if (!(creditMemoAwbBreakdownRecord.PartShipmentIndicator.ToUpper().Equals(PartShipMentIndicatorP)))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "PartShipment Indicator", Convert.ToString(creditMemoAwbBreakdownRecord.PartShipmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidPartShipMentIndicator, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate KgLbIndicator 
      if (creditMemoAwbBreakdownRecord.BilledWeight.HasValue && creditMemoAwbBreakdownRecord.BilledWeight > 0)
      {
        if (string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.KgLbIndicator) || (!creditMemoAwbBreakdownRecord.KgLbIndicator.Equals(KgLbIndicatorK) && !creditMemoAwbBreakdownRecord.KgLbIndicator.Equals(KgLbIndicatorL)))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "KgLb Indicator", Convert.ToString(creditMemoAwbBreakdownRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.C, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(creditMemoAwbBreakdownRecord.KgLbIndicator))
        {
          // Robin : Billed Weight (Element No 25) is not present and populated. This error is NonCorrectable
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "KgLb Indicator", Convert.ToString(creditMemoAwbBreakdownRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Awb Vat records should be present if VatAmount > 0.
      if (creditMemoAwbBreakdownRecord.CreditedVatAmount.HasValue && creditMemoAwbBreakdownRecord.CreditedVatAmount.Value > 0 && creditMemoAwbBreakdownRecord.CMAwbVatBreakdown.Count == 0 && creditMemoAwbBreakdownRecord.CMAwbOtherCharges.Count == 0)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Vat Amount", Convert.ToString(creditMemoAwbBreakdownRecord.CreditedVatAmount.HasValue ? creditMemoAwbBreakdownRecord.CreditedVatAmount.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.ZeroCouponVatRecordsForAwbVatAmount, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Total of Vat amount in all the Vat and OC records.
      double totalVat = 0;
      if (creditMemoAwbBreakdownRecord.CMAwbVatBreakdown != null)
      {
        totalVat = creditMemoAwbBreakdownRecord.CMAwbVatBreakdown.Sum(vatRecord => vatRecord.VatCalculatedAmount);
      }
      if (creditMemoAwbBreakdownRecord.CMAwbOtherCharges != null)
      {
        totalVat += creditMemoAwbBreakdownRecord.CMAwbOtherCharges.Sum(ocRecord => ocRecord.OtherChargeVatCalculatedAmount.HasValue ? ocRecord.OtherChargeVatCalculatedAmount.Value : 0);
      }

      if (invoice.Tolerance != null && !CompareUtil.Compare(creditMemoAwbBreakdownRecord.CreditedVatAmount.HasValue ? creditMemoAwbBreakdownRecord.CreditedVatAmount.Value : 0, totalVat, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb vAT Amount", Convert.ToString(creditMemoAwbBreakdownRecord.CreditedVatAmount.HasValue ? creditMemoAwbBreakdownRecord.CreditedVatAmount.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidAwbVatBreakdownAmount, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), totalVat.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Total of OC amount in all the Tax records.
      if (creditMemoAwbBreakdownRecord.CMAwbOtherCharges != null && creditMemoAwbBreakdownRecord.CMAwbOtherCharges.Count > 0)
      {
        double totalOc = creditMemoAwbBreakdownRecord.CMAwbOtherCharges.Sum(ocRecord => ocRecord.OtherChargeCodeValue.HasValue ? ocRecord.OtherChargeCodeValue.Value : 0);

        if (invoice.Tolerance != null && !CompareUtil.Compare(creditMemoAwbBreakdownRecord.CreditedOtherCharge, totalOc, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb OtherCharge Amount", creditMemoAwbBreakdownRecord.CreditedOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidAwbOcBreakdownAmount, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), totalOc.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate IscAmount 
      if ((int)creditMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBChargeCollect)
      {
          var iscPCalulatedAmount = creditMemoAwbBreakdownRecord.CreditedAmtSubToIsc * (creditMemoAwbBreakdownRecord.CreditedIscPercentage / 100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(creditMemoAwbBreakdownRecord.CreditedIscAmount, iscPCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "ISC Amount", creditMemoAwbBreakdownRecord.CreditedIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidCcIscAmount, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), iscPCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      if ((int)creditMemoAwbBreakdownRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
      {
        var iscCCalulatedAmount = ((creditMemoAwbBreakdownRecord.CreditedWeightCharge.HasValue ? creditMemoAwbBreakdownRecord.CreditedWeightCharge.Value : 0) + (creditMemoAwbBreakdownRecord.CreditedValuationCharge.HasValue ? creditMemoAwbBreakdownRecord.CreditedValuationCharge.Value : 0)) * (creditMemoAwbBreakdownRecord.CreditedIscPercentage/100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(creditMemoAwbBreakdownRecord.CreditedIscAmount, iscCCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "ISC Amount", creditMemoAwbBreakdownRecord.CreditedIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidPIscAmount, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), iscCCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Total Amount Validation.
      var totalAmount = (creditMemoAwbBreakdownRecord.CreditedWeightCharge.HasValue ? creditMemoAwbBreakdownRecord.CreditedWeightCharge.Value : 0) +
                        (creditMemoAwbBreakdownRecord.CreditedValuationCharge.HasValue ? creditMemoAwbBreakdownRecord.CreditedValuationCharge.Value : 0) + creditMemoAwbBreakdownRecord.CreditedOtherCharge +
                        creditMemoAwbBreakdownRecord.CreditedIscAmount + (creditMemoAwbBreakdownRecord.CreditedVatAmount.HasValue ? creditMemoAwbBreakdownRecord.CreditedVatAmount.Value : 0);

      if (totalAmount == 0)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Amounts in awb", totalAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.AllAmountFieldsZeroInAwbRecord, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      if (creditMemoAwbBreakdownRecord.TotalAmountCredited > 0)
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "TotalAmount in awb", creditMemoAwbBreakdownRecord.TotalAmountCredited.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.TotalAmountInAwbCanNotBePositive, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (invoice.Tolerance != null && !CompareUtil.Compare(creditMemoAwbBreakdownRecord.TotalAmountCredited, totalAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "TotalAmount in awb", creditMemoAwbBreakdownRecord.TotalAmountCredited.ToString(), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBill, CargoErrorCodes.InvalidtotalAmountInAwb, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, false, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), totalAmount.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate Vat Breakdowns 
      foreach (var awbRecordVat in creditMemoAwbBreakdownRecord.CMAwbVatBreakdown)
      {
        isValid = ValidateParsedCargoVat(awbRecordVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBillVat, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.CreditMemoNumber, creditMemoAwbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), false, true);
      }

      // Validate OC Breakdowns 
      foreach (var awbRecordOc in creditMemoAwbBreakdownRecord.CMAwbOtherCharges)
      {
        isValid = ValidateParsedCargoOc(awbRecordOc, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBillOtherCharge, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.CreditMemoNumber, creditMemoAwbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber), false, true);
      }

      // Validate Prorare Ladder Breakdown

      // Validation for Currency of Prorate Calulation. Indicator.
      if (creditMemoAwbBreakdownRecord.ProrateCalCurrencyId != null && !ReferenceManager.IsValidCurrencyCode(invoice, creditMemoAwbBreakdownRecord.ProrateCalCurrencyId))
      {
        var validationExceptionDetail = CreateCgoCMValidationExceptionDetail(creditMemoAwbBreakdownRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Currency Prorate Calulation", Convert.ToString(creditMemoAwbBreakdownRecord.ProrateCalCurrencyId), invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBillProrateLadder, CargoErrorCodes.InvalidCurrencyProrateCalculation, ErrorStatus.X, creditMemoAwbBreakdownRecord.AwbBillingCode, parentMemo, true, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      foreach (var awbLadder in creditMemoAwbBreakdownRecord.CMAwbProrateLadder)
      {
        isValid = ValidateParsedCargoProRateLadder(awbLadder, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelCmAirwayBillProrateLadder, fileSubmissionDate, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, parentMemo.CreditMemoNumber, creditMemoAwbBreakdownRecord.AwbBillingCode, string.Format("{0}-{1}", awbIsuingAirline, creditMemoAwbBreakdownRecord.AwbSerialNumber));
      }

      return isValid;
    }

    #endregion

    #region InvoiceTotal Parsing Validation

    /// <summary>
    /// TO validate InvoiceTotal and InvoiceTotalVat record.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <returns></returns>
    private bool ValidateParsedInvoiceTotal(CargoInvoice invoice, DateTime fileSubmissionDate, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName)
    {
      var isValid = true;

      if (invoice.CGOInvoiceTotal != null)
      {
        if (invoice.CGOInvoiceTotalVat.Count > 0)
        {
          // Total of vat amount in all the vat records.
          double totalVat = 0;

          totalVat = invoice.CGOInvoiceTotalVat.Sum(vatdata => (vatdata.VatCalculatedAmount ?? 0));

          if (invoice.Tolerance != null && !CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalVatAmount, Convert.ToDecimal(totalVat), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Total Vat Amount", invoice.CGOInvoiceTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, invoice.BillingCode, 00, 99999, 99999, null, false, null, totalVat.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
        else
        {
          if (invoice.CGOInvoiceTotal.TotalVatAmount != 0)
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Invoice Total Vat Amount", invoice.CGOInvoiceTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.VatBreakdownRecordsRequired, ErrorStatus.X, invoice.BillingCode, 00, 99999, 99999);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        if (invoice.CGOBillingCodeSubTotal != null && invoice.CGOBillingCodeSubTotal.Count > 0)
        {
          if (invoice.Tolerance != null)
          {
            var totalWeightCharges = invoice.CGOBillingCodeSubTotal.Sum(record => record.TotalWeightCharge);
            // Validation for Total Weight Charges.
            if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && !CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalWeightCharge, totalWeightCharges, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total WeightCharge", invoice.CGOInvoiceTotal.TotalWeightCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalWeightChargeOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalWeightCharges.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            var totalValuationCharges = invoice.CGOBillingCodeSubTotal.Sum(record => record.TotalValuationCharge);
            // Validation for Total Valuation Charges.
            if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && !CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalValuationCharge, totalValuationCharges, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ValuationCharge", invoice.CGOInvoiceTotal.TotalValuationCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalValuationChargeOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalValuationCharges.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml)
            {
              //In XML file there is no node for valuation charge and weight charge, so we need to assign total valuation charge of billing code sub total to invoice total, same for weight charge
              invoice.CGOInvoiceTotal.TotalValuationCharge = totalValuationCharges;
              invoice.CGOInvoiceTotal.TotalWeightCharge = totalWeightCharges;

              var totalLineItemAmount = totalWeightCharges + totalValuationCharges;

              // Validation for Total Valuation Charges.
              if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalLineItemAmount, totalLineItemAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
              {
                var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Line Item Amount", string.Format("{0} + {1}", invoice.CGOInvoiceTotal.TotalValuationCharge, invoice.CGOInvoiceTotal.TotalWeightCharge), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalLineItemAmount, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalLineItemAmount.ToString());
                exceptionDetailsList.Add(validationExceptionDetail);
                isValid = false;
              }
            }

            var totalOtherCharges = invoice.CGOBillingCodeSubTotal.Sum(record => record.TotalOtherCharge);
            // Validation for Total Other Charges.
            if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalOtherCharge, totalOtherCharges, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total OtherCharge", invoice.CGOInvoiceTotal.TotalOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalOtherChargeOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalOtherCharges.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            var totalIscAmount = invoice.CGOBillingCodeSubTotal.Sum(record => record.TotalIscAmount);
            // Validation for Total ISC Charges.
            if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalIscAmount, totalIscAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total IscAmount", invoice.CGOInvoiceTotal.TotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalIscChargeOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalIscAmount.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            var totalNetAmount = invoice.CGOBillingCodeSubTotal.Sum(record => record.BillingCodeSbTotal);
            // Validation for NetTotal Amount.
            if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.NetTotal, totalNetAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "NetTotal Amount", invoice.CGOInvoiceTotal.NetTotal.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidNetTotalOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalNetAmount.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            //CMP#648: Clearance Information in MISC Invoice PDFs. Desc: Convert Exchange Rate into nullable field.
            var netBillingAmount = (invoice.ExchangeRate.HasValue && invoice.ExchangeRate.Value != 0) ? (invoice.CGOInvoiceTotal.NetTotal / invoice.ExchangeRate.Value) : 0;

            //CMP#648: Clearance Information in MISC Invoice PDFs. Desc: Convert Exchange Rate into nullable field.
            var netAmount = (invoice.ExchangeRate.HasValue && invoice.ExchangeRate.Value != 0) ? (invoice.CGOInvoiceTotal.NetBillingAmount * invoice.ExchangeRate.Value) : 0;

            // Net Billing Amount should be equal to Net Total / Listing to Billing Rate rounded to three decimal places
            //SCP#296856:  Issue in CGO Invoice Total field 'Net Invoice Billing Total'
            if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.NetBillingAmount, netBillingAmount, invoice.Tolerance.RoundingTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Net Invoice Billing Total", invoice.CGOInvoiceTotal.NetBillingAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidNetBillingTotalOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, netBillingAmount.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            // Validation for NoOfBillingRecords.
            var numberOfBillingRecords = invoice.CGOBillingCodeSubTotal.Sum(record => record.NumberOfBillingRecords);
            if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && invoice.CGOInvoiceTotal.NoOfBillingRecords != numberOfBillingRecords)
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total number of billing records", invoice.CGOInvoiceTotal.NoOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalNoOfBillingRecordsOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, numberOfBillingRecords.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            var totalVatAmount = invoice.CGOBillingCodeSubTotal.Sum(record => record.TotalVatAmount);
            // Validation for Total VAT Amount.
            if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalVatAmount, totalVatAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total VatAmount", invoice.CGOInvoiceTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalVatAmountOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalVatAmount.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            // Validation for Total NoOfRecords

            var totalNumberOfRecords = (invoice.CGOBillingCodeSubTotal.Sum(record => record.TotalNumberOfRecords) + invoice.NumberOfChildRecords + 1);

            if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && invoice.CGOInvoiceTotal.TotalNoOfRecords != totalNumberOfRecords)
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Number of Records", invoice.CGOInvoiceTotal.TotalNoOfRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalNoOfRecordsOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalNumberOfRecords.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }

            // Validation for Total VAT Amount.
            var totalCalulatedNetAmountWothoutVat = invoice.CGOInvoiceTotal.NetTotal - invoice.CGOInvoiceTotal.TotalVatAmount;
            if (!CompareUtil.Compare(invoice.CGOInvoiceTotal.TotalNetAmountWithoutVat, totalCalulatedNetAmountWothoutVat, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
            {
              var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total NetAmount WithoutVat", invoice.CGOInvoiceTotal.TotalNetAmountWithoutVat.ToString(), invoice, fileName, ErrorLevels.ErrorLevelInvoiceTotal, CargoErrorCodes.InvalidTotalNetAmountWithoutVatOfInvoiceTotal, ErrorStatus.X, invoice.BillingCode, 0, 99999, 99999, null, false, null, totalCalulatedNetAmountWothoutVat.ToString());
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            }
          }
        }
      }

      // Validate Vat Breakdowns 
      foreach (var invoiceVat in invoice.CGOInvoiceTotalVat)
      {
        if (invoiceVat.VatIdentifierId == 0)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Identifier", invoiceVat.Identifier, invoice, fileName, ErrorLevels.ErrorLevelInvoiceVat, CargoErrorCodes.InvalidCgoVatIdentifier, ErrorStatus.X, invoice.BillingCode);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        if (string.IsNullOrWhiteSpace(invoiceVat.VatText))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Text", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelInvoiceVat, CargoErrorCodes.InvalidCgoVatText, ErrorStatus.X, invoice.BillingCode);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        //CMP464
        else if (invoiceVat.VatText.Length>50)
        {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(invoice.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Text", invoiceVat.VatText, invoice, fileName, ErrorLevels.ErrorLevelInvoiceVat, CargoErrorCodes.InvalidCgoVatTextLenght, ErrorStatus.X, invoice.BillingCode);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }

      }

      return isValid;
    }

    #endregion

    #region BillingCodeSubTotal Parsing Validation

    /// <summary>
    /// To Validate BillingCodeSubtotal record.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <returns></returns>
    private bool ValidateParsedBillingCodeSubTotalTotal(CargoInvoice invoice, DateTime fileSubmissionDate, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName)
    {
      var isValid = true;
      var billingCodeId = 0;

      //Validate source code totals
      foreach (var billingCodeSubTotal in invoice.CGOBillingCodeSubTotal)
      {
        billingCodeId = billingCodeSubTotal.BillingCode;
        if (!billingCodeId.Equals((int)BillingCode.AWBPrepaid) && !billingCodeId.Equals((int)BillingCode.AWBChargeCollect) && !billingCodeId.Equals((int)BillingCode.BillingMemo) && !billingCodeId.Equals((int)BillingCode.RejectionMemo) && !billingCodeId.Equals((int)BillingCode.CreditNote))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeSubTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code", Convert.ToString(billingCodeId), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidBillingCode, ErrorStatus.X, billingCodeSubTotal.BillingCode);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else
        {
          // Billing code total for AwbRecord.
          if (billingCodeId.Equals((int)BillingCode.AWBPrepaid) || billingCodeId.Equals((int)BillingCode.AWBChargeCollect))
          {
            if (invoice.AwbDataRecord != null)
            {
              //For the source code
              isValid = ValidateParsedBillingCodeSubTotalForAwbRecords(invoice, billingCodeSubTotal, billingCodeId, exceptionDetailsList, fileName, fileSubmissionDate);
            }
          }
          // Billing code total for rejection
          else if (billingCodeId.Equals((int)BillingCode.RejectionMemo))
          {
            if (invoice.CGORejectionMemo != null)
            {
              //For the source code
              isValid = ValidateParsedBillingCodeSubTotalForRmRecords(invoice, billingCodeSubTotal, billingCodeId, exceptionDetailsList, fileName, fileSubmissionDate);
            }
          }
          // Billing code total for billing memo
          else if (billingCodeId.Equals((int)BillingCode.BillingMemo))
          {
            if (invoice.CGOBillingMemo != null)
            {
              //For the source code
              isValid = ValidateParsedBillingCodeTotalForBillingMemoRecords(invoice, billingCodeSubTotal, billingCodeId, exceptionDetailsList, fileName, fileSubmissionDate);
            }
          }
          // Billing code total for credit memo
          else if (billingCodeId.Equals((int)BillingCode.CreditNote))
          {
            if (invoice.CGOCreditMemo != null)
            {
              //For the source code
              isValid = ValidateParsedBillingCodeTotalForCreditMemoRecords(invoice, billingCodeSubTotal, billingCodeId, exceptionDetailsList, fileName, fileSubmissionDate);
            }
          }
        }

        //Validate Vat Breakdowns 
        foreach (var billingCodeVat in billingCodeSubTotal.CGOBillingCodeSubTotalVat)
        {
          isValid = ValidateParsedCargoVat(billingCodeVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotalVat, fileSubmissionDate, 0, 0, string.Empty, billingCodeSubTotal.BillingCode, null, false, true);
        }

      }

      return isValid;
    }

    /// <summary>
    /// To validate AwbBillingCodeTotalRecord.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="billingCodeTotal"></param>
    /// <param name="billingCode"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedBillingCodeSubTotalForAwbRecords(CargoInvoice invoice, BillingCodeSubTotal billingCodeTotal, int billingCode, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName, DateTime fileSubmissionDate)
    {
      var isValid = true;

      if (billingCodeTotal.CGOBillingCodeSubTotalVat.Count > 0)
      {
        // Total of vat amount in all the vat records.
        double totalVat = 0;

        totalVat = billingCodeTotal.CGOBillingCodeSubTotalVat.Sum(vatdata => (vatdata.VatCalculatedAmount));

        if (invoice.Tolerance != null && !CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVat), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVat.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (billingCodeTotal.TotalVatAmount != 0)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.VatBreakdownRecordsRequired, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      List<AwbRecord> awbBillingCodeRecords = null;
      awbBillingCodeRecords = invoice.AwbDataRecord.Where(awbr => awbr.BillingCodeId == billingCode).ToList();
      
      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      // Billing Code Sub Total Record was found  but no transactions for this Billing Code were found

      if (awbBillingCodeRecords.Count == 0)
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(),
                                                                           exceptionDetailsList.Count() + 1,
                                                                           fileSubmissionDate, "Billing Code SubTotal",
                                                                           billingCode == 1 ? Convert.ToString(BillingCode.AWBPrepaid) : Convert.ToString(BillingCode.AWBChargeCollect),
                                                                           invoice, fileName,
                                                                           ErrorLevels.ErrorLevelBillingCodeSubTotal,
                                                                           CargoErrorCodes.BillingCodeSubTotalfoundButNoTrans,
                                                                           ErrorStatus.X, billingCode, 0, 99999, 99999);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        
      }




      if (awbBillingCodeRecords.Count > 0)
      {
        if (invoice.Tolerance != null)
        {
          var totalWeightCharge = awbBillingCodeRecords.Sum(awbrecord => awbrecord.WeightCharges.HasValue ? awbrecord.WeightCharges.Value : 0);
          // To validate TotalWeightCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalWeightCharge, Convert.ToDecimal(totalWeightCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total WeightCharge", billingCodeTotal.TotalWeightCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidWeightChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalWeightCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalOtherCharge = awbBillingCodeRecords.Sum(awbrecord => awbrecord.OtherCharges);
          // To validate TotalOtherCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalOtherCharge, Convert.ToDecimal(totalOtherCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total OtherCharge", billingCodeTotal.TotalOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidOtherChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalOtherCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalIscAmount = awbBillingCodeRecords.Sum(awbrecord => awbrecord.IscAmount);
          // To validate TotalIscAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalIscAmount, Convert.ToDecimal(totalIscAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Amount", billingCodeTotal.TotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidIscAmountOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalIscAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalAwbAmount = awbBillingCodeRecords.Sum(awbrecord => awbrecord.AwbTotalAmount.HasValue ? awbrecord.AwbTotalAmount.Value : 0);
          // To validate BillingCodeSbTotal
          if (!CompareUtil.Compare(billingCodeTotal.BillingCodeSbTotal, Convert.ToDecimal(totalAwbAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Subtotal", billingCodeTotal.BillingCodeSbTotal.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidSubtotalOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalAwbAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalValuationCharge = awbBillingCodeRecords.Sum(awbrecord => awbrecord.ValuationCharges.HasValue ? awbrecord.ValuationCharges.Value : 0);
          // To validate TotalValuationCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalValuationCharge, Convert.ToDecimal(totalValuationCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ValuationCharges", billingCodeTotal.TotalValuationCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidValuationChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalValuationCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalVatAmount = awbBillingCodeRecords.Sum(awbrecord => awbrecord.VatAmount.HasValue ? awbrecord.VatAmount.Value : 0);
          // To validate TotalVatAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVatAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidVatAmoluntOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVatAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.NumberOfBillingRecords != awbBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Number of billing records", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidNumberOfBillingRecordsOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && billingCodeTotal.NumberOfBillingRecords != awbBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Detail Count", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidDetailCount, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        long totalNumberOfRecords = (awbBillingCodeRecords.Count + awbBillingCodeRecords.Sum(record => record.NumberOfChildRecords) + billingCodeTotal.NumberOfChildRecords + 1);
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.TotalNumberOfRecords != totalNumberOfRecords)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Number of Records", billingCodeTotal.TotalNumberOfRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalNumberOfRecords, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, Convert.ToString(totalNumberOfRecords));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }
       
      return isValid;

    }

    /// <summary>
    /// To Validate CargoRejectionMemo BillingCodeSubtotal.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="billingCodeTotal"></param>
    /// <param name="billingCode"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedBillingCodeSubTotalForRmRecords(CargoInvoice invoice, BillingCodeSubTotal billingCodeTotal, int billingCode, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName, DateTime fileSubmissionDate)
    {
      var isValid = true;

      if (billingCodeTotal.CGOBillingCodeSubTotalVat.Count > 0)
      {
        // Total of vat amount in all the vat records.
        double totalVat = 0;

        totalVat = billingCodeTotal.CGOBillingCodeSubTotalVat.Sum(vatdata => (vatdata.VatCalculatedAmount));

        if (invoice.Tolerance != null && !CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVat), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVat.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (billingCodeTotal.TotalVatAmount != 0)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.VatBreakdownRecordsRequired, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      List<CargoRejectionMemo> rejectionMemoBillingCodeRecords = null;
      rejectionMemoBillingCodeRecords = invoice.CGORejectionMemo.Where(rejectionMemo => rejectionMemo.BillingCode == billingCode).ToList();

      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      // Billing Code Sub Total Record was found  but no transactions for this Billing Code were found

      if (rejectionMemoBillingCodeRecords.Count == 0)
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(),
                                                                           exceptionDetailsList.Count() + 1,
                                                                           fileSubmissionDate, "Billing Code SubTotal",
                                                                           Convert.ToString(BillingCode.RejectionMemo),
                                                                           invoice, fileName,
                                                                           ErrorLevels.ErrorLevelBillingCodeSubTotal,
                                                                           CargoErrorCodes.BillingCodeSubTotalfoundButNoTrans,
                                                                           ErrorStatus.X, billingCode, 0, 99999, 99999);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;

      }


      if (rejectionMemoBillingCodeRecords.Count > 0)
      {
        if (invoice.Tolerance != null)
        {
          var totalWeightCharge = rejectionMemoBillingCodeRecords.Sum(rmRecord => rmRecord.TotalWeightChargeDifference.HasValue ? rmRecord.TotalWeightChargeDifference.Value : 0);
          // To validate TotalWeightCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalWeightCharge, Convert.ToDecimal(totalWeightCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total WeightCharge", billingCodeTotal.TotalWeightCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidWeightChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalWeightCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalOtherCharge = rejectionMemoBillingCodeRecords.Sum(rmRecord => rmRecord.TotalOtherChargeDifference);
          // To validate TotalOtherCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalOtherCharge, Convert.ToDecimal(totalOtherCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total OtherCharge", billingCodeTotal.TotalOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidOtherChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalOtherCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalIscAmount = rejectionMemoBillingCodeRecords.Sum(rmRecord => rmRecord.TotalIscAmountDifference);
          // To validate TotalIscAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalIscAmount, Convert.ToDecimal(totalIscAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Amount", billingCodeTotal.TotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidIscAmountOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalIscAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalNetRejectAmount = rejectionMemoBillingCodeRecords.Sum(rmRecord => rmRecord.TotalNetRejectAmount.HasValue ? rmRecord.TotalNetRejectAmount.Value : 0);
          // To validate BillingCodeSbTotal
          if (!CompareUtil.Compare(billingCodeTotal.BillingCodeSbTotal, Convert.ToDecimal(totalNetRejectAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Subtotal", billingCodeTotal.BillingCodeSbTotal.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidSubtotalOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalNetRejectAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalValuationCharge = rejectionMemoBillingCodeRecords.Sum(rmRecord => rmRecord.TotalValuationChargeDifference.HasValue ? rmRecord.TotalValuationChargeDifference.Value : 0);
          // To validate TotalValuationCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalValuationCharge, Convert.ToDecimal(totalValuationCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ValuationCharges", billingCodeTotal.TotalValuationCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidValuationChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalValuationCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalVatAmount = rejectionMemoBillingCodeRecords.Sum(rmRecord => rmRecord.TotalVatAmountDifference.HasValue ? rmRecord.TotalVatAmountDifference.Value : 0);
          // To validate TotalVatAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVatAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidVatAmoluntOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVatAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.NumberOfBillingRecords != rejectionMemoBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Number of billing records", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidNumberOfBillingRecordsOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && billingCodeTotal.NumberOfBillingRecords != rejectionMemoBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Detail Count", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidDetailCount, ErrorStatus.X, billingCode, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total number of records validation
        long totalNumberOfRecords = (rejectionMemoBillingCodeRecords.Count + rejectionMemoBillingCodeRecords.Sum(record => record.NumberOfChildRecords) + rejectionMemoBillingCodeRecords.Sum(record => record.CouponBreakdownRecord.Sum(couponRecord => couponRecord.NumberOfChildRecords)) + billingCodeTotal.NumberOfChildRecords + 1);
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.TotalNumberOfRecords != totalNumberOfRecords)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Number of Records", billingCodeTotal.TotalNumberOfRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalNumberOfRecords, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, Convert.ToString(totalNumberOfRecords));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      return isValid;
    }

    /// <summary>
    /// To Validate CargoBillingMemo BillingCodeSubtotal.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="billingCodeTotal"></param>
    /// <param name="billingCode"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedBillingCodeTotalForBillingMemoRecords(CargoInvoice invoice, BillingCodeSubTotal billingCodeTotal, int billingCode, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName, DateTime fileSubmissionDate)
    {
      var isValid = true;

      if (billingCodeTotal.CGOBillingCodeSubTotalVat.Count > 0)
      {
        // Total of vat amount in all the vat records.
        double totalVat = 0;

        totalVat = billingCodeTotal.CGOBillingCodeSubTotalVat.Sum(vatdata => (vatdata.VatCalculatedAmount));

        if (invoice.Tolerance != null && !CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVat), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVat.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (billingCodeTotal.TotalVatAmount != 0)
        {

          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.VatBreakdownRecordsRequired, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      List<CargoBillingMemo> billingMemoBillingCodeRecords = null;
      billingMemoBillingCodeRecords = invoice.CGOBillingMemo.Where(billingMemo => billingMemo.BillingCode == billingCode).ToList();

      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      // Billing Code Sub Total Record was found  but no transactions for this Billing Code were found

      if (billingMemoBillingCodeRecords.Count == 0)
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(),
                                                                           exceptionDetailsList.Count() + 1,
                                                                           fileSubmissionDate, "Billing Code SubTotal",
                                                                           Convert.ToString(BillingCode.BillingMemo),
                                                                           invoice, fileName,
                                                                           ErrorLevels.ErrorLevelBillingCodeSubTotal,
                                                                           CargoErrorCodes.BillingCodeSubTotalfoundButNoTrans,
                                                                           ErrorStatus.X, billingCode, 0, 99999, 99999);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;

      }

      if (billingMemoBillingCodeRecords.Count > 0)
      {
        if (invoice.Tolerance != null)
        {

          var totalWeightCharge = billingMemoBillingCodeRecords.Sum(bmRecord => bmRecord.BilledTotalWeightCharge.HasValue ? bmRecord.BilledTotalWeightCharge.Value : 0);
          // To validate TotalWeightCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalWeightCharge, Convert.ToDecimal(totalWeightCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total WeightCharge", billingCodeTotal.TotalWeightCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidWeightChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalWeightCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalOtherCharge = billingMemoBillingCodeRecords.Sum(bmRecord => bmRecord.BilledTotalOtherChargeAmount);
          // To validate TotalOtherCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalOtherCharge, Convert.ToDecimal(totalOtherCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total OtherCharge", billingCodeTotal.TotalOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidOtherChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalOtherCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalIscAmount = billingMemoBillingCodeRecords.Sum(bmRecord => bmRecord.BilledTotalIscAmount);
          // To validate TotalIscAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalIscAmount, Convert.ToDecimal(totalIscAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Amount", billingCodeTotal.TotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidIscAmountOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalIscAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalAwbAmount = billingMemoBillingCodeRecords.Sum(bmRecord => bmRecord.NetBilledAmount.HasValue ? bmRecord.NetBilledAmount.Value : 0);
          // To validate BillingCodeSbTotal
          if (!CompareUtil.Compare(billingCodeTotal.BillingCodeSbTotal, Convert.ToDecimal(totalAwbAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Subtotal", billingCodeTotal.BillingCodeSbTotal.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidSubtotalOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalAwbAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalValuationCharge = billingMemoBillingCodeRecords.Sum(bmRecord => bmRecord.BilledTotalValuationAmount.HasValue ? bmRecord.BilledTotalValuationAmount.Value : 0);
          // To validate TotalValuationCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalValuationCharge, Convert.ToDecimal(totalValuationCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ValuationCharges", billingCodeTotal.TotalValuationCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidValuationChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalValuationCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalVatAmount = billingMemoBillingCodeRecords.Sum(bmRecord => bmRecord.BilledTotalVatAmount.HasValue ? bmRecord.BilledTotalVatAmount.Value : 0);
          // To validate TotalVatAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVatAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidVatAmoluntOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVatAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.NumberOfBillingRecords != billingMemoBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Number of billing records", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidNumberOfBillingRecordsOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && billingCodeTotal.NumberOfBillingRecords != billingMemoBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Detail Count", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidDetailCount, ErrorStatus.X, billingCode, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total number of records validation
        long totalNumberOfRecords = billingMemoBillingCodeRecords.Count + billingMemoBillingCodeRecords.Sum(record => record.NumberOfChildRecords) + billingMemoBillingCodeRecords.Sum(record => record.AwbBreakdownRecord.Sum(couponRecord => couponRecord.NumberOfChildRecords)) + billingCodeTotal.NumberOfChildRecords + 1;

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.TotalNumberOfRecords != totalNumberOfRecords)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Number of Records", billingCodeTotal.TotalNumberOfRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalNumberOfRecords, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, Convert.ToString(totalNumberOfRecords));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      return isValid;
    }

    /// <summary>
    /// To Validate CargoCreditMemo BillingCodeSubtotal.
    /// </summary>
    /// <param name="invoice"></param>
    /// <param name="billingCodeTotal"></param>
    /// <param name="billingCode"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="fileName"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateParsedBillingCodeTotalForCreditMemoRecords(CargoInvoice invoice, BillingCodeSubTotal billingCodeTotal, int billingCode, IList<IsValidationExceptionDetail> exceptionDetailsList, string fileName, DateTime fileSubmissionDate)
    {
      bool isValid = true;

      if (billingCodeTotal.CGOBillingCodeSubTotalVat.Count > 0)
      {
        // Total of vat amount in all the vat records.
        double totalVat = 0;

        totalVat = billingCodeTotal.CGOBillingCodeSubTotalVat.Sum(vatdata => (vatdata.VatCalculatedAmount));

        if (invoice.Tolerance != null && !CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVat), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalVatAmount, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVat.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (billingCodeTotal.TotalVatAmount != 0)
        {

          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.VatBreakdownRecordsRequired, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      List<CargoCreditMemo> creditMemoBillingCodeRecords = null;
      creditMemoBillingCodeRecords = invoice.CGOCreditMemo.Where(creditMemo => creditMemo.BillingCode == billingCode).ToList();

      // SCP ID : 105301 - Loading error accrued during downloading IS IDEC file for FEB-13/04.
      // Billing Code Sub Total Record was found  but no transactions for this Billing Code were found

      if (creditMemoBillingCodeRecords.Count == 0)
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(),
                                                                           exceptionDetailsList.Count() + 1,
                                                                           fileSubmissionDate, "Billing Code SubTotal",
                                                                           Convert.ToString(BillingCode.CreditNote),
                                                                           invoice, fileName,
                                                                           ErrorLevels.ErrorLevelBillingCodeSubTotal,
                                                                           CargoErrorCodes.BillingCodeSubTotalfoundButNoTrans,
                                                                           ErrorStatus.X, billingCode, 0, 99999, 99999);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;

      }

      if (creditMemoBillingCodeRecords.Count > 0 )
      {
        if (invoice.Tolerance != null)
        {
          var totalWeightCharge = creditMemoBillingCodeRecords.Sum(cmRecord => cmRecord.TotalWeightCharges.HasValue ? cmRecord.TotalWeightCharges.Value : 0);
          // To validate TotalWeightCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalWeightCharge, Convert.ToDecimal(totalWeightCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total WeightCharge", billingCodeTotal.TotalWeightCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidWeightChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalWeightCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalOtherCharge = creditMemoBillingCodeRecords.Sum(cmRecord => cmRecord.TotalOtherChargeAmt);
          // To validate TotalOtherCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalOtherCharge, Convert.ToDecimal(totalOtherCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total OtherCharge", billingCodeTotal.TotalOtherCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidOtherChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalOtherCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalIscAmount = creditMemoBillingCodeRecords.Sum(cmRecord => cmRecord.TotalIscAmountCredited);
          // To validate TotalIscAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalIscAmount, Convert.ToDecimal(totalIscAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ISC Amount", billingCodeTotal.TotalIscAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidIscAmountOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalIscAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalAwbAmount = creditMemoBillingCodeRecords.Sum(cmRecord => cmRecord.NetAmountCredited.HasValue ? cmRecord.NetAmountCredited.Value : 0);
          // To validate BillingCodeSbTotal
          if (!CompareUtil.Compare(billingCodeTotal.BillingCodeSbTotal, Convert.ToDecimal(totalAwbAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code Subtotal", billingCodeTotal.BillingCodeSbTotal.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidSubtotalOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalAwbAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalValuationCharge = creditMemoBillingCodeRecords.Sum(cmRecord => cmRecord.TotalValuationAmt.HasValue ? cmRecord.TotalValuationAmt.Value : 0);
          // To validate TotalValuationCharge
          if (!CompareUtil.Compare(billingCodeTotal.TotalValuationCharge, Convert.ToDecimal(totalValuationCharge), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total ValuationCharges", billingCodeTotal.TotalValuationCharge.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidValuationChargesOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalValuationCharge.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }

          var totalVatAmount = creditMemoBillingCodeRecords.Sum(cmRecord => cmRecord.TotalVatAmountCredited.HasValue ? cmRecord.TotalVatAmountCredited.Value : 0);
          // To validate TotalVatAmount
          if (!CompareUtil.Compare(billingCodeTotal.TotalVatAmount, Convert.ToDecimal(totalVatAmount), invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Vat Amount", billingCodeTotal.TotalVatAmount.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidVatAmoluntOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalVatAmount.ToString());
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }

        //Number of billing records validation
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && billingCodeTotal.NumberOfBillingRecords != creditMemoBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Number of billing records", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidNumberOfBillingRecordsOfBillingCodeTotalRecord, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsXml && billingCodeTotal.NumberOfBillingRecords != creditMemoBillingCodeRecords.Count())
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Detail Count", billingCodeTotal.NumberOfBillingRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidDetailCount, ErrorStatus.X, billingCode, 0, 99999, 99999);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

        //Total number of records validation
        var totalNumberOfRecords = billingCodeTotal.TotalNumberOfRecords != (creditMemoBillingCodeRecords.Count + creditMemoBillingCodeRecords.Sum(record => record.NumberOfChildRecords) + creditMemoBillingCodeRecords.Sum(record => record.AWBBreakdownRecord.Sum(couponRecord => couponRecord.NumberOfChildRecords)) + billingCodeTotal.NumberOfChildRecords + 1);
        if (invoice.SubmissionMethodId == (int)SubmissionMethod.IsIdec && totalNumberOfRecords)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(billingCodeTotal.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Total Number of Records", billingCodeTotal.TotalNumberOfRecords.ToString(), invoice, fileName, ErrorLevels.ErrorLevelBillingCodeSubTotal, CargoErrorCodes.InvalidTotalNumberOfRecords, ErrorStatus.X, billingCode, 0, 99999, 99999, null, false, null, totalNumberOfRecords.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }

      }
      return isValid;
    }

    #endregion

    #region AwbRecord Parsing Validation

    /// <summary>
    /// To validate Cargo AwbRecord.
    /// </summary>
    /// <param name="couponRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="exchangeRate"></param>
    /// <param name="minAcceptableAmountP"></param>
    /// <param name="minAcceptableAmountC"></param>
    /// <returns></returns>
    private bool ValidateParsedAwbRecord(AwbRecord couponRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate, ExchangeRate exchangeRate, IList<MinAcceptableAmount> minAcceptableAmountsP, IList<MinAcceptableAmount> minAcceptableAmountsC)
    {
      var isValid = true;

      TransactionType transType = 0;
      if (couponRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
      {
        transType = TransactionType.CargoPrimePrepaid;
      }
      else if (couponRecord.BillingCodeId == (int)BillingCode.AWBChargeCollect)
      {
        transType = TransactionType.CargoPrimeChargeCollect;
      }

      // Validate BillingCode 
      if (transType.Equals(TransactionType.None))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Billing Code", Convert.ToString(couponRecord.BillingCodeId), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidBillingCode, ErrorStatus.X, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate Awb Date.
      if (couponRecord.AwbDate.HasValue == false)
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Date", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbDate, ErrorStatus.X, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      //SCPID:122022 -Valid Batch & Sequence number.
      if (couponRecord.RecordSequenceWithinBatch <= 0 || couponRecord.BatchSequenceNumber <= 0)
      {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate,
          "Batch Sequence Number - Record Sequence Number", string.Format("{0}-{1}", couponRecord.BatchSequenceNumber, couponRecord.RecordSequenceWithinBatch), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.BatchRecordSequenceNoReq,
          ErrorStatus.X, couponRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
      }

      // Validate Date of carriage.
      if (couponRecord.DateOfCarriage.HasValue == false)
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Date Of Carriage", string.Empty, invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidDateOfCarriage, ErrorStatus.X, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validate Awb serialNo
      if (couponRecord.AwbSerialNumber.Equals(0))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Serial number", Convert.ToString(couponRecord.AwbSerialNumber), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbSerialNo, ErrorStatus.X, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (!ValidateAwbSerialNumber(couponRecord.AwbSerialNumber, couponRecord.AwbCheckDigit) || couponRecord.AwbCheckDigit == 9)
      {
        couponRecord.ISValidationFlag += string.IsNullOrEmpty(couponRecord.ISValidationFlag) ? CheckDigitValidationFlag : ValidationFlagDelimeter + CheckDigitValidationFlag;
      }

      // Validate Awb CheckDigit.
      if ((couponRecord.AwbCheckDigit < 0) || (couponRecord.AwbCheckDigit > 6 && couponRecord.AwbCheckDigit != 9))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Check Digit", Convert.ToString(couponRecord.AwbCheckDigit), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbCheckDigit, ErrorStatus.C, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      var isValidOrigin = true;
      var isValidDestination = true;

      // Validate Origin Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
            is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (string.IsNullOrWhiteSpace(couponRecord.ConsignmentOriginId) || !IsValidCityAirportCode(couponRecord.ConsignmentOriginId))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Origin", Convert.ToString(couponRecord.ConsignmentOriginId), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.OriginofAwbIsInvalid, ErrorStatus.C, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidOrigin = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(couponRecord.ConsignmentOriginId) && string.IsNullOrWhiteSpace(couponRecord.ConsignmentOriginId))
      {
          couponRecord.ConsignmentOriginId = couponRecord.ConsignmentOriginId.Trim();
      }

      // Validate Destination Awb 
      /* SCP 147449: BGEN_00007 - Error uploading invoices in the database, Please contact SIS Operations
        Date: 08/07/2013
        Desc: Conditional check on ConsignmentOriginId (node in file = OriginAirportCode) and ConsignmentDestinationIdCarriageFromId (node in file = DestinationAirportCode) 
            is corrected. In case of AirWaybillDetails both these fields are required, but in case of AirWaybillBreakdown both the fields are optional.*/
      if (string.IsNullOrWhiteSpace(couponRecord.ConsignmentDestinationId) || !IsValidCityAirportCode(couponRecord.ConsignmentDestinationId))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Destination", Convert.ToString(couponRecord.ConsignmentDestinationId), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.DestinationofAwbIsInvalid, ErrorStatus.C, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidDestination = false;
      }

      /* Special case to handle CR LF kind of input values in XML tag. Form more refer SCP# 147449*/
      if (!string.IsNullOrEmpty(couponRecord.ConsignmentDestinationId) && string.IsNullOrWhiteSpace(couponRecord.ConsignmentDestinationId))
      {
          couponRecord.ConsignmentDestinationId = couponRecord.ConsignmentDestinationId.Trim();
      }

      // Origin of awb and Destination of awb should not be same.
      if (couponRecord.ConsignmentOriginId != null && couponRecord.ConsignmentDestinationId != null && isValidOrigin && isValidDestination)
      {
        if (!string.IsNullOrEmpty(couponRecord.ConsignmentOriginId.Trim()) && !string.IsNullOrEmpty(couponRecord.ConsignmentDestinationId.Trim()))
        {
          if (String.Equals(couponRecord.ConsignmentOriginId.ToUpper(), couponRecord.ConsignmentDestinationId.ToUpper()))
          {
            var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb origin", Convert.ToString(couponRecord.ConsignmentOriginId), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.OriginofAwbAndDestinationOfAwbShouldNotBeSame, ErrorStatus.X, couponRecord);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      var isValidFrom = true;
      var isValidTo = true;
      // Validate Origin Awb 
      /*  SCP# 125085: [CA-999] QUESTION ABOUT THE CXMLT FILE DOWNLOAD FROM IS-WEB.
        Desc : CarriageFromId and CarriageToId both are required fields and it should not be null. corrected the conditional check.
        Date : 23-May-2013
      */
      if (string.IsNullOrWhiteSpace(couponRecord.CarriageFromId) || !IsValidCityAirportCode(couponRecord.CarriageFromId))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb CarriageFrom", Convert.ToString(couponRecord.CarriageFromId), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.FromofAwbIsInvalid, ErrorStatus.C, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidFrom = false;
      }

      // Validate Destination Awb
      if (string.IsNullOrWhiteSpace(couponRecord.CarriageToId) || !IsValidCityAirportCode(couponRecord.CarriageToId))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb CarriageTo", Convert.ToString(couponRecord.CarriageToId), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.ToofAwbIsInvalid, ErrorStatus.C, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidTo = false;
      }

      // SCP107981: to/point of transfer population error
      // From and To Point of transfer cannot be same for AWB Prepaid.
      if (couponRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
      {
        if (couponRecord.CarriageFromId != null && couponRecord.CarriageToId != null && isValidFrom && isValidTo)
        {
          if (!string.IsNullOrEmpty(couponRecord.CarriageFromId.Trim()) && !string.IsNullOrEmpty(couponRecord.CarriageToId.Trim()))
          {
            if (String.Equals(couponRecord.CarriageFromId.ToUpper(), couponRecord.CarriageToId.ToUpper()))
            {
              var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1,
                                                                                    fileSubmissionDate, "Awb Carriage From",
                                                                                    Convert.ToString(couponRecord.CarriageToId), invoice,
                                                                                    fileName, ErrorLevels.ErrorLevelAirwayBill,
                                                                                    CargoErrorCodes.FromofAwbAndToOfAwbShouldNotBeSame,ErrorStatus.X,
                                                                                    couponRecord);
              exceptionDetailsList.Add(validationExceptionDetail);
              isValid = false;
            } // End if
          } // End if
        } // End if
      } // End if

      // Validate Awb Issuing Airline
      isValid = ValidateAwbIssuingAirline(couponRecord, exceptionDetailsList, invoice, fileName, isValid, issuingAirline, fileSubmissionDate);

      // Validate CurrencyAdjustmentIndicator 
      if (string.IsNullOrWhiteSpace(couponRecord.CurrencyAdjustmentIndicator) || !ReferenceManager.IsValidCurrencyCode(invoice, couponRecord.CurrencyAdjustmentIndicator))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Currency Adjustment Indicator", Convert.ToString(couponRecord.CurrencyAdjustmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidCurrencyAdjustmentInd, ErrorStatus.C, couponRecord, true);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }


      // Validate ProvisoReqSpa 
      if (!string.IsNullOrWhiteSpace(couponRecord.ProvisoReqSpa))
      {
        if (!(couponRecord.ProvisoReqSpa.ToUpper().Equals(ProvisoReqSpaP) || couponRecord.ProvisoReqSpa.ToUpper().Equals(ProvisoReqSpaR) || couponRecord.ProvisoReqSpa.ToUpper().Equals(ProvisoReqSpaS)))
        {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Proviso/Req./SPA", Convert.ToString(couponRecord.ProvisoReqSpa), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidProvisoReqSpa, ErrorStatus.X, couponRecord, true);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        else
        {
          if (couponRecord.ProratePer != null && couponRecord.ProratePer.HasValue && couponRecord.ProratePer.Value != 0)
          {
            var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Prorate percentage",
              couponRecord.ProratePer.HasValue ? couponRecord.ProratePer.Value.ToString() : "0", invoice, fileName,
              ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidProratePer2, ErrorStatus.X, couponRecord, true);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Validation for PartShipMentIndicator.
      if (!string.IsNullOrWhiteSpace(couponRecord.PartShipmentIndicator))
      {
        if (!(couponRecord.PartShipmentIndicator.ToUpper().Equals(PartShipMentIndicatorP)))
        {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "PartShipment Indicator", Convert.ToString(couponRecord.PartShipmentIndicator), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidPartShipMentIndicator, ErrorStatus.X, couponRecord, true);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate KgLbIndicator 
      if (couponRecord.BilledWeight.HasValue && couponRecord.BilledWeight.Value > 0)
      {
        if (string.IsNullOrWhiteSpace(couponRecord.KgLbIndicator) || (!couponRecord.KgLbIndicator.Equals(KgLbIndicatorK) && !couponRecord.KgLbIndicator.Equals(KgLbIndicatorL)))
        {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "KG/LB Indicator", Convert.ToString(couponRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.C, couponRecord, true);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(couponRecord.KgLbIndicator))
        {
          // Robin : Billed Weight (Element No 25) is not present and populated. This error is NonCorrectable
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "KG/LB Indicator", Convert.ToString(couponRecord.KgLbIndicator), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidKgLbIndicator, ErrorStatus.X, couponRecord, true);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Awb Vat records should be present if VatAmount > 0.
      if (couponRecord.VatAmount.HasValue && couponRecord.VatAmount.Value > 0 && couponRecord.VatBreakdown.Count == 0 && couponRecord.OtherChargeBreakdown.Count == 0)
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Vat Amount", Convert.ToString(couponRecord.VatAmount), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.ZeroCouponVatRecordsForAwbVatAmount, ErrorStatus.X, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      // Total of Vat amount in all the Vat and OC records.
      double totalVat = 0;
      if (couponRecord.VatBreakdown != null)
      {
        totalVat = couponRecord.VatBreakdown.Sum(vatRecord => vatRecord.VatCalculatedAmount);
      }
      if (couponRecord.OtherChargeBreakdown != null)
      {
        totalVat += couponRecord.OtherChargeBreakdown.Sum(ocRecord => ocRecord.OtherChargeVatCalculatedAmount.HasValue ? ocRecord.OtherChargeVatCalculatedAmount.Value : 0);
      }

      if (invoice.Tolerance != null && !CompareUtil.Compare(couponRecord.VatAmount.HasValue ? couponRecord.VatAmount.Value : 0, totalVat, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Vat Amount", Convert.ToString(couponRecord.VatAmount.HasValue ? couponRecord.VatAmount.Value : 0), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbVatBreakdownAmount, ErrorStatus.X, couponRecord, false, null, totalVat.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Total of OC amount in all the Tax records.
      if (couponRecord.OtherChargeBreakdown != null && couponRecord.OtherChargeBreakdown.Count > 0)
      {
        double totalOc = couponRecord.OtherChargeBreakdown.Sum(ocRecord => ocRecord.OtherChargeCodeValue.HasValue ? ocRecord.OtherChargeCodeValue.Value : 0);

        if (invoice.Tolerance != null && !CompareUtil.Compare(couponRecord.OtherCharges, totalOc, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb OC Amount", Convert.ToString(couponRecord.OtherCharges), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbOcBreakdownAmount, ErrorStatus.X, couponRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      // Validate IscAmount 
      if ((int)couponRecord.BillingCodeId == (int)BillingCode.AWBChargeCollect)
      {
        var iscPCalulatedAmount = couponRecord.AmountSubjectToIsc * (couponRecord.IscPer/100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(couponRecord.IscAmount, iscPCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "ISC Amount", Convert.ToString(couponRecord.IscAmount), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidCcIscAmount, ErrorStatus.X, couponRecord, true, null, iscPCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      if ((int)couponRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
      {
        var iscCCalulatedAmount = ((couponRecord.WeightCharges.HasValue ? couponRecord.WeightCharges.Value : 0) + (couponRecord.ValuationCharges.HasValue ? couponRecord.ValuationCharges.Value : 0)) * (couponRecord.IscPer/100);
        if (invoice.Tolerance != null && !CompareUtil.Compare(couponRecord.IscAmount, iscCCalulatedAmount, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "ISC Amount", Convert.ToString(couponRecord.IscAmount), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidPIscAmount, ErrorStatus.X, couponRecord, true, null, iscCCalulatedAmount.ToString());
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

 
      // Validate AwbTotalAmount 
      double awbTAmount = couponRecord.AwbTotalAmount.HasValue ? couponRecord.AwbTotalAmount.Value : 0;
      double? awbTotalCalulatedAmount = (couponRecord.WeightCharges.HasValue ? couponRecord.WeightCharges.Value : 0) + couponRecord.OtherCharges + (couponRecord.VatAmount.HasValue
        ? couponRecord.VatAmount : 0) + couponRecord.IscAmount + (couponRecord.ValuationCharges.HasValue ? couponRecord.ValuationCharges.Value : 0);
      if (invoice.Tolerance != null && !CompareUtil.Compare(awbTAmount, awbTotalCalulatedAmount.HasValue ? awbTotalCalulatedAmount.Value : 0, invoice.Tolerance.SummationTolerance, Constants.CgoDecimalPlaces))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "AWB Total Amount", Convert.ToString(awbTAmount), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.AwbTAmountDoesNotMatchWithSumOfAllAmounts, ErrorStatus.X, couponRecord, true, null, awbTotalCalulatedAmount.ToString());
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (couponRecord.AwbTotalAmount.HasValue && exchangeRate != null && transType != TransactionType.None && !ReferenceManager.IsValidNetAmount(couponRecord.AwbTotalAmount.Value, transType, invoice.ListingCurrencyId, invoice, exchangeRate))
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "AWB Total Amount", Convert.ToString(awbTAmount), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.AwbTAmountIsNotInRangeOfMinMaxAcceptableLimit, ErrorStatus.X, couponRecord, true);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Set main ticket document number as 'TicketIssuingAirline-TicketDocumentNumber-TicketCouponNumber'
      var mainDocumentNumber = string.Format(@"{0}-{1}", couponRecord.AwbIssueingAirline ?? string.Empty, couponRecord.AwbSerialNumber);

      // Validate Vat Breakdowns 
      foreach (var couponRecordVat in couponRecord.VatBreakdown)
      {
        isValid = ValidateParsedCargoVat(couponRecordVat, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelAirwayBillVat, fileSubmissionDate, couponRecord.BatchSequenceNumber, couponRecord.RecordSequenceWithinBatch, mainDocumentNumber, couponRecord.BillingCodeId, null, false, true);
      }

      // Validate OC Breakdowns 
      foreach (var couponRecordOc in couponRecord.OtherChargeBreakdown)
      {
        isValid = ValidateParsedCargoOc(couponRecordOc, exceptionDetailsList, invoice, fileName, ErrorLevels.ErrorLevelAirwayBillOtherCharge, fileSubmissionDate, couponRecord.BatchSequenceNumber, couponRecord.RecordSequenceWithinBatch, mainDocumentNumber, couponRecord.BillingCodeId, null, false, true);
      }
      ////SCP0000: PURGING AND SET EXPIRY DATE (Remove real time set expiry)
      //// Set expiry period of prime AWB.
      //couponRecord.ExpiryDatePeriod = ReferenceManager.GetExpiryDatePeriodMethod(TransactionType.CargoRejectionMemoStage1, invoice, BillingCategoryType.Cgo, Constants.SamplingIndicatorNo, null);

      return isValid;
    }

    /// <summary>
    /// To Validate AwbIssuing Airline.
    /// </summary>
    /// <param name="couponRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="isValid"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <returns></returns>
    private bool ValidateAwbIssuingAirline(AwbRecord couponRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, bool isValid, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate)
    {
      var awbIssuingAirline = couponRecord.AwbIssueingAirline;
      if (!issuingAirline.Keys.Contains(awbIssuingAirline))
      {
        if (MemberManager.IsValidAirlineCode(awbIssuingAirline))
        {
          issuingAirline.Add(awbIssuingAirline, true);
        }
        else
        {
          issuingAirline.Add(awbIssuingAirline, false);
          var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Issuing Airline", Convert.ToString(couponRecord.AwbIssueingAirline), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbIssuingAirline, ErrorStatus.X, couponRecord);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else if (!issuingAirline[awbIssuingAirline])
      {
        var validationExceptionDetail = CreateCgoAwbValidationExceptionDetail(couponRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Issuing Airline", Convert.ToString(couponRecord.AwbIssueingAirline), invoice, fileName, ErrorLevels.ErrorLevelAirwayBill, CargoErrorCodes.InvalidAwbIssuingAirline, ErrorStatus.X, couponRecord);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      return isValid;
    }


    #endregion

    #region Cargo VAT , OC , ProRate Ladder and AwbIssuingAirline Parsing Validation

    /// <summary>
    /// To Validate ProrareLadder record.
    /// </summary>
    /// <param name="pLadderDetail"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="errorLevel"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="batchNo"></param>
    /// <param name="sequenceNo"></param>
    /// <param name="documentNumber"></param>
    /// <param name="billingCode"></param>
    /// <param name="linkedDocNo"></param>
    /// <returns></returns>
    protected bool ValidateParsedCargoProRateLadder(ProrateLadderDetail pLadderDetail, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, string errorLevel, DateTime fileSubmissionDate, int batchNo = 0, int sequenceNo = 0, string documentNumber = null, int billingCode = 0, string linkedDocNo = null)
    {
      var isValid = true;

      # region From and To Sector

      var isValidFromSector = true;
      var isValidToSector = true;

      // Validate FromSector of PLaddder 
      if (!IsValidCityAirportCode(pLadderDetail.FromSector))
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(pLadderDetail.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Prorate LadderDetail From sector", pLadderDetail.FromSector, invoice, fileName, errorLevel, CargoErrorCodes.InvalidFromSector, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidFromSector = false;
      }

      // Validate ToSector of PLaddder 
      if (!IsValidCityAirportCode(pLadderDetail.ToSector))
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(pLadderDetail.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Prorate LadderDetail To sector", pLadderDetail.ToSector, invoice, fileName, errorLevel, CargoErrorCodes.InvalidToSector, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
        isValidToSector = false;
      }

      // FromSector and ToSector of PLadder should not be same.
      if (pLadderDetail.FromSector != null && pLadderDetail.ToSector != null && isValidFromSector && isValidToSector)
      {
        if (!string.IsNullOrEmpty(pLadderDetail.FromSector.Trim()) && !string.IsNullOrEmpty(pLadderDetail.ToSector.Trim()))
        {
          if (String.Equals(pLadderDetail.FromSector.ToUpper(), pLadderDetail.ToSector.ToUpper()))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(pLadderDetail.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Prorate LadderDetail From sector", pLadderDetail.FromSector, invoice, fileName, errorLevel, CargoErrorCodes.FromSectorAndToSectorofPLadderShouldNotBeSame, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      #endregion

      // Validation for CarrierPrefix.
      if (!string.IsNullOrEmpty(pLadderDetail.CarrierPrefix) && !MemberManager.IsValidAirlineCode(pLadderDetail.CarrierPrefix.Trim()))
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(pLadderDetail.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Prorate LadderDetail CarrierPrefix", pLadderDetail.CarrierPrefix, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCarrierPrefix, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      // Validation for ProvisoReqSpa
      if (!string.IsNullOrWhiteSpace(pLadderDetail.ProvisoReqSpa))
      {
        if (!pLadderDetail.ProvisoReqSpa.Equals(ProvisoReqSpaP) && !pLadderDetail.ProvisoReqSpa.Equals(ProvisoReqSpaR) && !pLadderDetail.ProvisoReqSpa.Equals(ProvisoReqSpaS))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(pLadderDetail.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Prorate LadderDetail ProvisoReqSpa", pLadderDetail.ProvisoReqSpa, invoice, fileName, errorLevel, CargoErrorCodes.InvalidProvisoReqSpa, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      return isValid;
    }

    /// <summary>
    /// To Validate OC record.
    /// </summary>
    /// <param name="oCharge"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="errorLevel"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="batchNo"></param>
    /// <param name="sequenceNo"></param>
    /// <param name="documentNumber"></param>
    /// <param name="billingCode"></param>
    /// <param name="isIgnoreValidation"></param>
    /// <param name="isValidateVatLabelAndText"></param>
    /// <returns></returns>
    protected bool ValidateParsedCargoOc(OtherCharge oCharge, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, string errorLevel, DateTime fileSubmissionDate, int batchNo = 0, int sequenceNo = 0, string documentNumber = null, int billingCode = 0, string linkedDocno = null, bool isIgnoreValidation = false, bool isValidateVatLabelAndText = false, bool isRmAwb = false)
    {
      var isValid = true;

      if (!isIgnoreValidation)
      {
        if (oCharge.OtherChargeVatCalculatedAmount != null && (oCharge.OtherChargeVatBaseAmount != null && oCharge.OtherChargeVatPercentage != null))
        {
          if (invoice.Tolerance != null && !CompareUtil.Compare(oCharge.OtherChargeVatCalculatedAmount.Value, (oCharge.OtherChargeVatBaseAmount.Value * oCharge.OtherChargeVatPercentage.Value) / 100, invoice.Tolerance.RoundingTolerance, Constants.CgoDecimalPlaces))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "OC Calculated Amount", Convert.ToString(oCharge.OtherChargeVatCalculatedAmount.Value), invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoCalculatedOcAmount, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocno);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      // Validation for OC codes.
      IDictionary<string, string> ocCodes = null;
      if (ValidationCache.Instance.OtherChargeCodes != null)
      {
        ocCodes = ValidationCache.Instance.OtherChargeCodes;
      }
      else
      {
        // Get the data for OC codes.
        var referenceManager = Ioc.Resolve<IReferenceManager>(typeof(IReferenceManager));
        ocCodes = new Dictionary<string, string>();
        ocCodes = referenceManager.GetMiscCodeString(MiscGroups.CgoOtherChargeCode);
      }

      //SCP ID : 120091 - SRM: ERROR IN VALIDATION
      if (!string.IsNullOrEmpty(oCharge.OtherChargeCode) && oCharge.OtherChargeCode.Length > 2)
      {
        Logger.InfoFormat("Other Charge exceeded its database CGO_AWB_OTHER_CHARGE.Other_Charge_code column length : {0}", oCharge.OtherChargeCode);
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "OC Code", oCharge.OtherChargeCode, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoOcCodeDueToCharLength, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocno);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      else if (!ocCodes.ContainsKey(oCharge.OtherChargeCode))
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "OC Code", oCharge.OtherChargeCode, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoOcCode, ErrorStatus.C, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocno);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (isValidateVatLabelAndText)
      {
        if (!string.IsNullOrWhiteSpace(oCharge.OtherChargeVatLabel) || !string.IsNullOrWhiteSpace(oCharge.OtherChargeVatText) || (oCharge.OtherChargeVatBaseAmount.HasValue ? oCharge.OtherChargeVatBaseAmount.Value : 0) > 0)
        {
          if ((oCharge.OtherChargeVatBaseAmount.HasValue ? oCharge.OtherChargeVatBaseAmount.Value : 0) == 0)
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, " OC Vat Base Amount", (oCharge.OtherChargeVatBaseAmount.HasValue ? oCharge.OtherChargeVatBaseAmount.Value : 0).ToString(), invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoOcVatAmount, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocno);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (string.IsNullOrWhiteSpace(oCharge.OtherChargeVatLabel))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "OC Vat Label", string.Empty, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoOcVatLabel, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocno);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
          if (string.IsNullOrWhiteSpace(oCharge.OtherChargeVatText))
          {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, " OC Vat Text", string.Empty, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoOcVatText, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocno);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
          }
        }
      }

      /* CMP #613: Validation for Cargo Other Charges Breakdown */
      if (invoice.SubmissionMethod == Model.Enums.SubmissionMethod.IsIdec && !string.IsNullOrWhiteSpace(oCharge.OtherChargeCode))
      {
        if (!oCharge.OtherChargeCodeValue.HasValue || oCharge.OtherChargeCodeValue.Value == 0)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(),
                                                                             exceptionDetailsList.Count() + 1,
                                                                             fileSubmissionDate, "OC Breakdown Amount",
                                                                             oCharge.OtherChargeCode, invoice,
                                                                             fileName, errorLevel,
                                                                             CargoErrorCodes.
                                                                                 InvalidOtherChargeBreakdownAmount,
                                                                             ErrorStatus.X, billingCode, 0, batchNo,
                                                                             sequenceNo, documentNumber, false,
                                                                             linkedDocno);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else if (invoice.SubmissionMethod == Model.Enums.SubmissionMethod.IsXml && !string.IsNullOrWhiteSpace(oCharge.OtherChargeCode) && !string.IsNullOrWhiteSpace(oCharge.OtherChargeName) &&
          oCharge.OtherChargeName.Equals(OtherChargesAllowed, StringComparison.CurrentCultureIgnoreCase) && !isRmAwb)//&& AWB, BM AWB, CM AWB
      {
        if (!oCharge.OtherChargeCodeValue.HasValue || oCharge.OtherChargeCodeValue.Value == 0)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(),
                                                                             exceptionDetailsList.Count() + 1,
                                                                             fileSubmissionDate, "OC Breakdown Amount",
                                                                             oCharge.OtherChargeCode, invoice,
                                                                             fileName, errorLevel,
                                                                             CargoErrorCodes.
                                                                                 InvalidOtherChargeBreakdownAmount,
                                                                             ErrorStatus.X, billingCode, 0, batchNo,
                                                                             sequenceNo, documentNumber, false,
                                                                             linkedDocno);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else if (invoice.SubmissionMethod == Model.Enums.SubmissionMethod.IsXml && !string.IsNullOrWhiteSpace(oCharge.OtherChargeCode) && !string.IsNullOrWhiteSpace(oCharge.OtherChargeName) &&
          oCharge.OtherChargeName.Equals(OtherChargesDifference, StringComparison.CurrentCultureIgnoreCase) && isRmAwb) //&& RM AWB
      {
        if (!oCharge.OtherChargeCodeValue.HasValue || oCharge.OtherChargeCodeValue.Value == 0)
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(oCharge.Id.Value(),
                                                                                  exceptionDetailsList.Count() + 1,
                                                                                  fileSubmissionDate, "OC Breakdown Amount",
                                                                                  oCharge.OtherChargeCode, invoice,
                                                                                  fileName, errorLevel,
                                                                                  CargoErrorCodes.
                                                                                      InvalidOtherChargeBreakdownAmount,
                                                                                  ErrorStatus.X, billingCode, 0, batchNo,
                                                                                  sequenceNo, documentNumber, false,
                                                                                  linkedDocno);

          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      return isValid;
    }

    /// <summary>
    /// To validate Cargo Vat.
    /// </summary>
    /// <param name="vat"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="errorLevel"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="batchNo"></param>
    /// <param name="sequenceNo"></param>
    /// <param name="documentNumber"></param>
    /// <param name="billingCode"></param>
    /// <param name="linkedDocNo"></param>
    /// <param name="isIgnoreValidation"></param>
    /// <param name="isValidateVatLabelAndText"></param>
    /// <returns></returns>
    protected bool ValidateParsedCargoVat(Vat vat, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice invoice, string fileName, string errorLevel, DateTime fileSubmissionDate, int batchNo = 0, int sequenceNo = 0, string documentNumber = null, int billingCode = 0, string linkedDocNo = null, bool isIgnoreValidation = false, bool isValidateVatLabelAndText = false)
    {
      var isValid = true;

      if (!isIgnoreValidation)
      {
        if (invoice.Tolerance != null && !CompareUtil.Compare(vat.VatCalculatedAmount, (vat.VatBaseAmount * vat.VatPercentage) / 100, invoice.Tolerance.RoundingTolerance, Constants.CgoDecimalPlaces))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(vat.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Calculated Amount", Convert.ToString(vat.VatCalculatedAmount), invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoCalculatedVatAmount, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }

      if (vat.VatIdentifierId == 0)
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(vat.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Identifier", vat.Identifier, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoVatIdentifier, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }

      if (isValidateVatLabelAndText)
      {
        if (string.IsNullOrWhiteSpace(vat.VatLabel))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(vat.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Label", string.Empty, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoVatLabel, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        if (string.IsNullOrWhiteSpace(vat.VatText))
        {
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(vat.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Text", string.Empty, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoVatText, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
        //CMP464
        else if(vat.VatText.Length>50)
        {
            var validationExceptionDetail = CreateCgoValidationExceptionDetail(vat.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Vat Text", vat.VatText, invoice, fileName, errorLevel, CargoErrorCodes.InvalidCgoVatTextLenght, ErrorStatus.X, billingCode, 0, batchNo, sequenceNo, documentNumber, false, linkedDocNo);
            exceptionDetailsList.Add(validationExceptionDetail);
            isValid = false;
        }
      }

      return isValid;
    }

    /// <summary>
    /// To validate AwbIssuing airline.
    /// </summary>
    /// <param name="awbBaseRecord"></param>
    /// <param name="exceptionDetailsList"></param>
    /// <param name="parentMemo"></param>
    /// <param name="invoice"></param>
    /// <param name="fileName"></param>
    /// <param name="isValid"></param>
    /// <param name="errorLevel"></param>
    /// <param name="issuingAirline"></param>
    /// <param name="fileSubmissionDate"></param>
    /// <param name="documentNo"></param>
    /// <param name="billingCode"></param>
    /// <returns></returns>
    private bool ValidateAirWayBillIssuingAirline(AWBBase awbBaseRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, MemoBase parentMemo, CargoInvoice invoice, string fileName, bool isValid, string errorLevel, IDictionary<string, bool> issuingAirline, DateTime fileSubmissionDate, string documentNo, int billingCode)
    {
      var awbIssuingAirline = awbBaseRecord.AwbIssueingAirline;
      // Check ticket issuing airline is present in dictionary of issuing airlines collection.
      if (!issuingAirline.Keys.Contains(awbIssuingAirline))
      {
        if (MemberManager.IsValidAirlineCode(awbIssuingAirline))
        {
          issuingAirline.Add(awbIssuingAirline, true);
        }
        else
        {
          issuingAirline.Add(awbIssuingAirline, false);
          var validationExceptionDetail = CreateCgoValidationExceptionDetail(awbBaseRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Issuing Airline", awbBaseRecord.AwbIssueingAirline, invoice, fileName, errorLevel, CargoErrorCodes.InvalidAwbIssuingAirline, ErrorStatus.X, billingCode, 0, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, documentNo, false, string.Format("{0}-{1}", awbIssuingAirline ?? string.Empty, awbBaseRecord.AwbSerialNumber));
          exceptionDetailsList.Add(validationExceptionDetail);
          isValid = false;
        }
      }
      else if (!issuingAirline[awbIssuingAirline])
      {
        var validationExceptionDetail = CreateCgoValidationExceptionDetail(awbBaseRecord.Id.Value(), exceptionDetailsList.Count() + 1, fileSubmissionDate, "Awb Issuing Airline", awbBaseRecord.AwbIssueingAirline, invoice, fileName, errorLevel, CargoErrorCodes.InvalidAwbIssuingAirline, ErrorStatus.X, billingCode, 0, parentMemo.BatchSequenceNumber, parentMemo.RecordSequenceWithinBatch, documentNo, false, string.Format("{0}-{1}", awbIssuingAirline ?? string.Empty, awbBaseRecord.AwbSerialNumber));
        exceptionDetailsList.Add(validationExceptionDetail);
        isValid = false;
      }
      return isValid;
    }

    #endregion

    /// <summary>
    /// To populate the default location of the memebr.
    /// </summary>
    /// <param name="memberId"></param>
    /// <param name="memberLocationInformation"></param>
    /// <param name="locationCode"></param>
    /// <param name="invoice"></param>
    /// <returns></returns>
    public static bool PopulateDefaultLocation(int memberId, MemberLocationInformation memberLocationInformation, string locationCode, CargoInvoice invoice = null)
    {

      var locationRepository = Ioc.Resolve<ILocationRepository>(typeof(ILocationRepository));

      // Get location query.
      var locationQuery = locationRepository.Get(memberLocation => memberLocation.MemberId == memberId && memberLocation.LocationCode.ToUpper() == locationCode.ToUpper());

      // Get only required properties of the location.
      var locationList = locationQuery.Select(loc => new
      {
        loc.AdditionalTaxVatRegistrationNumber,
        loc.TaxVatRegistrationNumber,
        loc.LocationCode,
        loc.Country,
        loc.RegistrationId,
        loc.MemberLegalName,
        loc.AddressLine1,
        loc.AddressLine2,
        loc.AddressLine3,
        loc.CityName,
        loc.SubDivisionCode,
        loc.SubDivisionName,
        loc.PostalCode,
        loc.LegalText
      }).ToList();

      if (locationList.Count > 0)
      {
        var location = locationList[0];

        memberLocationInformation.AdditionalTaxVatRegistrationNumber = location.AdditionalTaxVatRegistrationNumber;
        memberLocationInformation.TaxRegistrationId = location.TaxVatRegistrationNumber;
        memberLocationInformation.MemberLocationCode = location.LocationCode;
        memberLocationInformation.CompanyRegistrationId = location.RegistrationId;
        memberLocationInformation.OrganizationName = location.MemberLegalName;
        memberLocationInformation.AddressLine1 = location.AddressLine1;
        memberLocationInformation.AddressLine2 = location.AddressLine2;
        memberLocationInformation.AddressLine3 = location.AddressLine3;
        memberLocationInformation.CityName = location.CityName;
        memberLocationInformation.SubdivisionCode = location.SubDivisionCode;
        memberLocationInformation.SubdivisionName = location.SubDivisionName;


        if (invoice != null && string.IsNullOrEmpty(invoice.LegalText))
        {
          if (string.IsNullOrEmpty(location.LegalText))
          {
            var memberManager = Ioc.Resolve<IMemberManager>(typeof(IMemberManager));
            var eBillingConfig = memberManager.GetEbillingConfig(memberId);
            invoice.LegalText = eBillingConfig != null && eBillingConfig.LegalText != null ? eBillingConfig.LegalText.Trim().Replace("\r", "").Replace("\n", "") : string.Empty;
          }
          else
          {
            invoice.LegalText = location.LegalText.Trim().Replace("\r", "").Replace("\n", "");
          }
        }

        if (invoice != null && !string.IsNullOrEmpty(invoice.LegalText))
        {
          memberLocationInformation.LegalText = invoice.LegalText;
        }

        if (location.Country != null)
        {
          memberLocationInformation.CountryCode = location.Country.Id;
          memberLocationInformation.CountryCodeIcao = location.Country.CountryCodeIcao;
          memberLocationInformation.CountryName = location.Country.Name;
        }
        memberLocationInformation.PostalCode = location.PostalCode;
        return true;
      }

      var memberDetails = Ioc.Resolve<IMemberManager>(typeof(IMemberManager)).GetMemberDetails(memberId);
      if (memberDetails != null)
      {
        memberLocationInformation.OrganizationDesignator = memberDetails.MemberCodeAlpha;
      }
      return false;
    }

    /// <summary>
    /// Gets the invoice with prime for validation of RM coupons.
    /// </summary>
    /// <param name="invoiceNumber"></param>
    /// <param name="billingMonth"></param>
    /// <param name="billingYear"></param>
    /// <param name="billingPeriod"></param>
    /// <param name="billingMemberId"></param>
    /// <param name="billedMemberId"></param>
    /// <param name="billingCode"></param>
    /// <param name="couponSearchCriteriaString"></param>
    /// <returns></returns>
    public CargoInvoice GetInvoiceWithCoupons(string invoiceNumber, int billingMonth, int billingYear, int billingPeriod, int billingMemberId, int billedMemberId, int? billingCode = null, string couponSearchCriteriaString = null)
    {
      var entities = new[] { LoadStrategy.CargoEntities.AwbRecord };

      var invoices = CGOInvoiceRepository.GetInvoiceLS(new LoadStrategy(string.Join(",", entities)), invoiceNumber, billingMonth, billingYear, billingPeriod, billingMemberId, billedMemberId, billingCode, invoiceStatusIds: ((int)InvoiceStatusType.Presented).ToString(), couponSearchCriteriaString: couponSearchCriteriaString);

      CargoInvoice invoice = null;
      if (invoices.Count > 0)
      {
        // TODO: throw exception if invoice count > 1
        invoice = invoices[0];
      }
      return invoice;
    }

    /// <summary>
    /// Following method is executed from CargoBillingHistoryAuditTrail.vm file to return Month name from month number
    /// </summary>
    /// <param name="monthNumber">Month number whose name is to be retireved</param>
    /// <returns>Month name</returns>
    public string GetAbbreviatedMonthName(int monthNumber)
    {
      return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(monthNumber);
    }

    /// <summary>
    /// Following method is used to create VelocityContext for creating AuditTrail.html file, from which we create AuditTrail.pdf file.
    /// </summary>
    /// <param name="auditTrail">AuditTrail details</param>
    /// <returns>AuditTrail.html file</returns>
    public string GenerateCargoBillingHistoryAuditTrailPdf(CargoAuditTrail auditTrail)
    {
      _templatedTextGenerator = Ioc.Resolve<ITemplatedTextGenerator>(typeof(ITemplatedTextGenerator));

      //CMP508:Audit Trail Download with Supporting Documents
      VelocityContext context = GetVelocityContext(auditTrail);

      // Generate Audit trail html string using .vm file and NVelocity context
      var reportContent = _templatedTextGenerator.GenerateEmbeddedTemplatedText(CargoBillingHistoryAuditTrailTemplateResourceName, context);
      // return Audit trail html string
      return reportContent;
    }

    //CMP508:Audit Trail Download with Supporting Documents
    /// <summary>
    /// Returns Html string for audit trail with supporting docs assigned with their folder numbers
    /// </summary>
    /// <param name="auditTrail">audit trail for which html is to be genereated</param>
    /// <param name="suppDocs">out parameter for Supp Docs</param>
    /// <returns>Html for audit trail</returns>
    public string GenerateCargoBillingHistoryAuditTrailPackage(CargoAuditTrail auditTrail, out Dictionary<Attachment, int> suppDocs)
    {
        _templatedTextGenerator = Ioc.Resolve<ITemplatedTextGenerator>(typeof(ITemplatedTextGenerator));

        VelocityContext context = GetVelocityContext(auditTrail, true);
        var reportContent = _templatedTextGenerator.GenerateEmbeddedTemplatedText(CargoBillingHistoryAuditTrailTemplateResourceName, context);
        
        suppDocs = (Dictionary<Attachment, int>)context.Get("suppDocs");

        // return Audit trail html string
        return reportContent;
    }

    //CMP508:Audit Trail Download with Supporting Documents
    /// <summary>
    /// Get velocity context for cargo audit trail
    /// </summary>
    /// <param name="auditTrail">audit trail</param>
    /// <param name="downloadPackage">true if request is for package download</param>
    /// <returns>Velocity context for cargo audit trail</returns>
    private VelocityContext GetVelocityContext(CargoAuditTrail auditTrail, bool downloadPackage = false)
    {
        // Instantiate VelocityContext
        var context = new VelocityContext();
        // Instantiate CargoInvoiceManager
        var cgoInvManager = new CargoInvoiceManager();

        // Add memo list, prime coupon list, credit memo list, billing memo list, form D list in NVelocity context so we can access them in .vm file
        var memoList = new List<CargoRejectionMemo>();

        // Iterate through Audit trail invoices and retrieve rejectionMemo Invoices
        foreach (var invoice in auditTrail.Invoices.Where(invoice => invoice.CGORejectionMemo.Count > 0))
        {
            memoList.AddRange(invoice.CGORejectionMemo);
        }

        // Sort retrieved CargoRejectionMemo invoices in descending order
        memoList = memoList.OrderByDescending(memo => memo.RejectionStage).ToList();

        // Retrieve prime coupon list, credit memo list, billing memo list, form D list from Audit trail invoices
        var billingMemoList = auditTrail.Invoices.Where(cgoInvoice => cgoInvoice.CGOBillingMemo.Count > 0);
        var awbList = auditTrail.Invoices.Where(cgoInvoice => cgoInvoice.AwbDataRecord.Count > 0);
        var creditMemoList = auditTrail.Invoices.Where(cargoInvoice => cargoInvoice.CGOCreditMemo.Count > 0);

        context.Put("cgoInvManager", cgoInvManager);
        context.Put("memoList", memoList);
        context.Put("billingMemoList", billingMemoList);
        context.Put("awbList", awbList);
        context.Put("creditMemoList", creditMemoList);

        //CMP508:Audit Trail Download with Supporting Documents
        context.Put("downloadPackage", downloadPackage);
        Dictionary<Attachment, int> suppDocs = new Dictionary<Attachment, int>();
        context.Put("suppDocs", suppDocs);

        return context;
    }


    /// <summary>
    /// Following method is used to break Reason remarks text int string of 80 characters. Used in Cargo pdf generation 
    /// </summary>
    /// <param name="reasonRemarks">reason remarks text</param>
    /// <returns>String broken into 80 characters</returns>
    public string CreateReasonRemarksString(string reasonRemarks)
    {
      string finalString = string.Empty;
      if (!string.IsNullOrEmpty(reasonRemarks))
      {
        char[] array = reasonRemarks.ToArray();
        int cnt = 0;
        while (true)
        {
          var str = string.Join("", array.Skip(cnt).Take(80).ToArray());
          if (string.IsNullOrEmpty(str))
          {
            break;
          }
          else
          {
            cnt = cnt + 80;
            if (cnt >= array.Length)
              finalString += str;
            else
              finalString += str + "<br />";
          }
        }
      }
      return finalString;
    }

    /// <summary>
    /// This will validate the errors on the error correction screen
    /// </summary>
    /// <param name="entityId"></param>
    /// <param name="newValue"></param>
    /// <param name="exceptionCode"></param>
    /// <returns></returns>
    public int ValidateForErrorCorrection(string newValue, string exceptionCode, string errorLevel, Guid? entityId = null)
    {
      var result = 0;
      exceptionCode = exceptionCode.ToUpper();
      if (string.IsNullOrEmpty(newValue))
        return result;

      //Invalid Awb Date format
      if (exceptionCode.CompareTo(CargoErrorCodes.InvalidAwbDate.ToUpper()) == 0)
      {
        return CheckValidDate(newValue);
      }

      //Invalid awb origin
      if (entityId != null && (exceptionCode.CompareTo(CargoErrorCodes.InvalidAwbOrigin.ToUpper()) == 0 || exceptionCode.CompareTo(CargoErrorCodes.OriginofAwbIsInvalid.ToUpper()) == 0))
      {
        if (IsValidCityAirportCode(newValue))
        {
          if (errorLevel.ToUpper().CompareTo("AWB") == 0)
          {
            var awbRecord = CargoAwbRecordRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(newValue.ToUpper(), awbRecord.ConsignmentDestinationId.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("RMAWB") == 0)
          {
            var awbRecord = RMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(newValue.ToUpper(), awbRecord.ConsignmentDestinationId.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("BMAWB") == 0)
          {
            var awbRecord = BMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(newValue.ToUpper(), awbRecord.ConsignmentDestinationId.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("CMAWB") == 0)
          {
            var awbRecord = CMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(newValue.ToUpper(), awbRecord.ConsignmentDestinationId.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          return 0;
        }
        return 0;
      }

    //Invalid currency Code
      if (entityId != null && (exceptionCode.CompareTo(CargoErrorCodes.InvalidCurrencyAdjustmentInd.ToUpper()) == 0))
      {
         
          if(ReferenceManager.IsValidCurrencyCode(newValue))
          {
              return 1;
          }
          return 0;
      }
        //Invalid awb destination
      if (entityId != null && (exceptionCode.CompareTo(CargoErrorCodes.InvalidAwbDestination.ToUpper()) == 0 || exceptionCode.CompareTo(CargoErrorCodes.DestinationofAwbIsInvalid.ToUpper()) == 0))
      {
        if (IsValidCityAirportCode(newValue))
        {
          if (errorLevel.ToUpper().CompareTo("AWB") == 0)
          {
            var awbRecord = CargoAwbRecordRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(awbRecord.ConsignmentOriginId.ToUpper(), newValue.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("RMAWB") == 0)
          {
            var awbRecord = RMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(awbRecord.ConsignmentOriginId.ToUpper(), newValue.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("BMAWB") == 0)
          {
            var awbRecord = BMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(awbRecord.ConsignmentOriginId.ToUpper(), newValue.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("CMAWB") == 0)
          {
            var awbRecord = CMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              if (string.Equals(awbRecord.ConsignmentOriginId.ToUpper(), newValue.ToUpper()))
              {
                return 3;
              }
              return 1;
            }
          }
          return 0;
        }
        return 0;
      }

      //Invalid awb From
      if (entityId != null && (exceptionCode.CompareTo(CargoErrorCodes.InvalidAwbFrom.ToUpper()) == 0 || exceptionCode.CompareTo(CargoErrorCodes.FromofAwbIsInvalid.ToUpper()) == 0))
      {
        if (IsValidCityAirportCode(newValue))
        {
          if (errorLevel.ToUpper().CompareTo("AWB") == 0)
          {
            var awbRecord = CargoAwbRecordRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for AWB Prepaid.
              if (awbRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
              {
                if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 0;
                }
                // If From Id is equal to To Id return 3, which will be used to display specific validation message
                else if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("RMAWB") == 0)
          {
            var awbRecord = RMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for RM AWB Prepaid.
              if (awbRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
              {
                if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 0;
                }
                // If From Id is equal to To Id return 3, which will be used to display specific validation message
                else if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("BMAWB") == 0)
          {
            var awbRecord = BMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for BM AWB Prepaid.
              if (awbRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
              {
                if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 0;
                }
                // If From Id is equal to To Id return 3, which will be used to display specific validation message
                else if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("CMAWB") == 0)
          {
            var awbRecord = CMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for CM AWB Prepaid.
              if (awbRecord.AwbBillingCode == (int)Model.Cargo.Enums.BillingCode.AWBPrepaid)
              {
                if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 0;
                }
                // If From Id is equal to To Id return 3, which will be used to display specific validation message
                else if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          return 0;
        }
        return 0;
      }

      //Invalid awb To 
      if (entityId != null && (exceptionCode.CompareTo(CargoErrorCodes.InvalidAwbTo.ToUpper()) == 0 || exceptionCode.CompareTo(CargoErrorCodes.ToofAwbIsInvalid.ToUpper()) == 0))
      {
        if (IsValidCityAirportCode(newValue))
        {
          if (errorLevel.ToUpper().CompareTo("AWB") == 0)
          {
            var awbRecord = CargoAwbRecordRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for AWB Prepaid.
              if (awbRecord.BillingCodeId == (int)BillingCode.AWBPrepaid)
              {
                if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 0;
                }
                  // If To Id is equal to From Id return 3, which will be used to display specific validation message
                else if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("RMAWB") == 0)
          {
            var awbRecord = RMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for RM AWB Prepaid.
              if (awbRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
              {
                if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 0;
                }
                // If To Id is equal to From Id return 3, which will be used to display specific validation message
                else if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("BMAWB") == 0)
          {
            var awbRecord = BMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for BM AWB Prepaid.
              if (awbRecord.AwbBillingCode == (int)BillingCode.AWBPrepaid)
              {
                if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 0;
                }
                // If To Id is equal to From Id return 3, which will be used to display specific validation message
                else if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          else if (errorLevel.ToUpper().CompareTo("CMAWB") == 0)
          {
            var awbRecord = CMAwbRepository.First(i => i.Id == entityId);
            if (awbRecord != null)
            {
              // SCP107981: to/point of transfer population error
              // From and To Point of transfer cannot be same for CM AWB Prepaid.
              if (awbRecord.AwbBillingCode == (int)Model.Cargo.Enums.BillingCode.AWBPrepaid)
              {
                if (string.Equals(awbRecord.CarriageToId.ToUpper(), newValue.ToUpper()))
                {
                  return 0;
                }
                // If To Id is equal to From Id return 3, which will be used to display specific validation message
                else if (string.Equals(newValue.ToUpper(), awbRecord.CarriageFromId.ToUpper()))
                {
                  return 4;
                }
              }
              return 1;
            }
          }
          return 0;
        }
        return 0;
      }

      //Invalid Your Billing Date : formate : YYMMPP
      if (exceptionCode.CompareTo(CargoErrorCodes.InvalidYourInvoiceBillingDate.ToUpper()) == 0)
      {
        if (CheckValidDate(newValue) == 1)
        {
          if ((Convert.ToInt32(newValue.Substring(4, 2)) > -1) && (Convert.ToInt32(newValue.Substring(4, 2)) < 5))
            return 1;
        }
        return 0;
      }

      //Invalid awb Date of Carriage
      if (exceptionCode.CompareTo(CargoErrorCodes.InvalidDateOfCarriage.ToUpper()) == 0)
      {
        return CheckValidDate(newValue);
      }

      return result;
    }

    /// <summary>
    /// check date format is yyMMdd
    /// </summary>
    /// <returns></returns>
    private static int CheckValidDate(string newValue)
    {
      var cultureInfo = new CultureInfo("en-US");
      DateTime awbDate;
      if (DateTime.TryParseExact(newValue, "yyMMdd", cultureInfo, DateTimeStyles.None, out awbDate))
      {
        return 1;
      }
      return 0;
    }

    /// <summary>
    /// Following method sorts Correspondence details in descending order depending on stage. Executed from Audit trail pdf .vm file 
    /// </summary>
    /// <param name="rejectionMemo">Rejection memo object</param>
    /// <returns>Rejection memo with correspondence in sorted in descending order</returns>
    public CargoRejectionMemo GetCorrespondenceDetails(CargoRejectionMemo rejectionMemo)
    {
      // Sort Correspondence in descending order on Stage number
      rejectionMemo.Correspondences = rejectionMemo.Correspondences.OrderByDescending(c => c.CorrespondenceStage).ToList();
      // return rejection memo
      return rejectionMemo;
    }

    /// <summary>
    /// Following method retrieves Stage2 CargoRejectionMemo details
    /// </summary>
    /// <param name="memoList">CargoRejectionMemo List</param>
    /// <param name="rejectionMemo">CargoRejectionMemo to find in list</param>
    /// <returns>Stage2 CargoRejectionMemo</returns>
    public CargoRejectionMemo GetRejectionStage2MemoDetails(List<CargoRejectionMemo> memoList, CargoRejectionMemo rejectionMemo)
    {
      var stage2RM =
        memoList.Find(
          memo =>
          memo.RejectionMemoNumber.ToUpper() == rejectionMemo.YourRejectionNumber.ToUpper() && memo.Invoice.InvoiceNumber.ToUpper() == rejectionMemo.YourInvoiceNumber.ToUpper() &&
          memo.Invoice.BillingPeriod == rejectionMemo.YourInvoiceBillingPeriod && memo.Invoice.BillingMonth == rejectionMemo.YourInvoiceBillingMonth &&
          memo.Invoice.BillingYear == rejectionMemo.YourInvoiceBillingYear && memo.RejectionStage == 2);

      return stage2RM;
    }

    /// <summary>
    /// Following method retrieves Stage1 CargoRejectionMemo details
    /// </summary>
    /// <param name="memoList">CargoRejectionMemo List</param>
    /// <param name="stage2RM">Stage2 CargoRejectionMemo to find in list</param>
    /// <returns>Stage1 CargoRejectionMemo</returns>
    public CargoRejectionMemo GetRejectionStage1MemoDetails(List<CargoRejectionMemo> memoList, CargoRejectionMemo stage2RM)
    {
      var stage1RM =
        memoList.Find(
          memo =>
          memo.RejectionMemoNumber.ToUpper() == (stage2RM.YourRejectionNumber == null ? "" : stage2RM.YourRejectionNumber.ToUpper()) && memo.Invoice.InvoiceNumber.ToUpper() == stage2RM.YourInvoiceNumber.ToUpper() &&
          memo.Invoice.BillingPeriod == stage2RM.YourInvoiceBillingPeriod && memo.Invoice.BillingMonth == stage2RM.YourInvoiceBillingMonth &&
          memo.Invoice.BillingYear == stage2RM.YourInvoiceBillingYear && memo.RejectionStage == 1);

      return stage1RM;
    }

    /// <summary>
    /// Following method returns Credit memo record. it will be executed from cargo audit trail pdf .vm file 
    /// </summary>
    /// <param name="invoice">cargo invoice</param>
    /// <param name="stage1RM">rejection memo</param>
    /// <returns>Cargo credit memo record</returns>
    public CargoCreditMemo GetCreditMemoRecord(CargoInvoice invoice, CargoRejectionMemo stage1RM)
    {
      return invoice.CGOCreditMemo.Where(cm => cm.CreditMemoNumber.ToUpper() == stage1RM.YourBillingMemoNumber.ToUpper()).ToList()[0];
    }

    /// <summary>
    /// Following method is executed from .vm file to check whether CargoRejectionMemo is already displayed while creating .pdf file.  
    /// </summary>
    /// <param name="rejectionMemoString">String of CargoRejectionMemo Id's</param>
    /// <param name="rejectionMemoId">CargoRejectionMemo Id, to check whether it is displayed</param>
    /// <returns>Returns "Yes" if CargoRejectionMemo is already displayed, else returns "No"</returns>
    public string IsRejectionMemoDisplayed(string rejectionMemoString, Guid rejectionMemoId)
    {
      // If CargoRejectionMemo is already displayed return "Yes", else return "No"
      return rejectionMemoString.Contains(rejectionMemoId.ToString()) ? "Yes" : "No";
    }

    /// <summary>
    /// Retrieves Batch Number and Sequence number which will be pre populated while creating BM, CM, RM and AWB records.
    /// </summary>
    /// <param name="invoiceId">Invoice id</param>
    /// <param name="transactionTypeId">Transaction Type Id</param>
    /// <param name="batchNumber">Batch number</param>
    /// <param name="sequenceNumber">Sequence number</param>
    /// <returns>Retrieves Batch Number and Sequence number which will be pre populated.</returns>
    public void GetBatchAndSequenceNumber(Guid invoiceId, int transactionTypeId, out int batchNumber, out int sequenceNumber)
    {
      CargoInvoiceRepository.GetBatchAndSequenceNumber(invoiceId, transactionTypeId, out batchNumber, out sequenceNumber);
    }

    /// <summary>
    /// Marks the invoices in the invoice id list as presented.
    /// Note: This is only used for testing - will/should never be used in production.
    /// </summary>
    /// <param name="invoiceIdList">List of invoice ids to be submitted</param>
    /// <returns></returns>
    public IList<CargoInvoice> ProcessingCompleteInvoices(List<string> invoiceIdList)
    {
      var invoiceList = invoiceIdList.Select(ProcessingCompleteInvoice).ToList();

      return invoiceList.Where(invoice => invoice != null && invoice.InvoiceStatus == InvoiceStatusType.ProcessingComplete).ToList();
    }

    /// <summary>
    /// Marks the invoices in the invoice id list as presented.
    /// Note: This is only used for testing - will/should never be used in production.
    /// </summary>
    /// <param name="invoiceIdList">List of invoice ids to be submitted</param>
    /// <returns></returns>
    public IList<CargoInvoice> PresentInvoices(List<string> invoiceIdList)
    {
      var invoiceList = invoiceIdList.Select(PresentInvoice).ToList();

      return invoiceList.Where(invoice => invoice != null && invoice.InvoiceStatus == InvoiceStatusType.Presented).ToList();
    }

    /// <summary>
    /// Marks the invoice as presented.
    /// </summary>
    /// <param name="invoiceId"></param>
    /// <returns></returns>
    public CargoInvoice PresentInvoice(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var invoice = CargoInvoiceRepository.Single(id: invoiceGuid);

      if (invoice.InvoiceStatus == InvoiceStatusType.Presented)
      {
        return null;
      }

      // Allow to mark presented if InvoiceStatus is ReadyForBilling or ProcessingComplete
      if (invoice.InvoiceStatus == InvoiceStatusType.ReadyForBilling || invoice.InvoiceStatus == InvoiceStatusType.ProcessingComplete)
      {
        invoice.InvoiceDate = DateTime.UtcNow;
        invoice.InvoiceStatus = InvoiceStatusType.Presented;

        // Update invoice to database.
        var updatedInvoice = CargoInvoiceRepository.Update(invoice);
        UnitOfWork.CommitDefault();

        return updatedInvoice;
      }

      return invoice;
    }


    /// <summary>
    /// Processings the complete invoice.
    /// </summary>
    /// <param name="invoiceId">The invoice id.</param>
    /// <returns></returns>
    public CargoInvoice ProcessingCompleteInvoice(string invoiceId)
    {
      var invoiceGuid = invoiceId.ToGuid();
      var invoice = CargoInvoiceRepository.Single(id: invoiceGuid);

      if (invoice.InvoiceStatus == InvoiceStatusType.ProcessingComplete)
      {
        return null;
      }

      if (invoice.InvoiceStatus == InvoiceStatusType.ReadyForBilling)
      {
        invoice.InvoiceDate = DateTime.UtcNow;
        invoice.InvoiceStatus = InvoiceStatusType.ProcessingComplete;

        // Update invoice to database.
        var updatedInvoice = CargoInvoiceRepository.Update(invoice);
        UnitOfWork.CommitDefault();

        return updatedInvoice;
      }

      return invoice;
    }

    /// <summary>
    /// CMP#459 : Validates the original billing amount in RM.
    /// </summary>
    /// <param name="outcomeOfMismatchOnRmBilledOrAllowedAmounts">if set to <c>true</c> [outcome of mismatch on rm billed or allowed amounts].</param>
    /// <param name="currentRejectionMemoRecord">The current rejection memo record.</param>
    /// <param name="exceptionDetailsList">The exception details list.</param>
    /// <param name="currentInvoice">The current invoice.</param>
    /// <param name="yourInvoice">Your invoice.</param>
    /// <param name="currentRmAwbRecord">The current rm awb record.</param>
    /// <param name="primeAwbRecords">The prime awb records.</param>
    /// <param name="fileName">Name of the file.</param>
    /// <param name="fileSubmissionDate">The file submission date.</param>
    /// <param name="isIsWeb">if set to <c>true</c> [is is web].</param>
    /// <param name="isBillingHistory">if set to <c>true</c> [is billing history].</param>
    /// <param name="isErrorCorrection">if set to <c>true</c> [is error correction].</param>
    /// <returns></returns>
    public bool ValidateOriginalBillingAmountInRm(bool outcomeOfMismatchOnRmBilledOrAllowedAmounts, ExchangeRate prevExchangeRate, ExchangeRate currentExchangeRate, CargoRejectionMemo currentRejectionMemoRecord, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoInvoice currentInvoice, CargoInvoice yourInvoice, RMAwb currentRmAwbRecord, IList<AwbRecord> primeAwbRecords, string fileName, DateTime fileSubmissionDate, bool isIsWeb = false, bool isBillingHistory = true, bool isErrorCorrection = false)
    {
        bool isValidAmount = true;
        Tolerance currentInvoiceTolerance = new Tolerance();
        Logger.Info("CGO# Validate Original Billing Amount In RM.");
        var exchangeRateManager = Ioc.Resolve<IExchangeRateManager>(typeof(IExchangeRateManager));
        if (!exchangeRateManager.IsValidAttributeOfRejectedInvoice(yourInvoice.SettlementMethodId, yourInvoice.ListingCurrencyId.Value, yourInvoice.BillingCurrencyId.Value, Convert.ToDouble(yourInvoice.ExchangeRate), yourInvoice.BillingYear, yourInvoice.BillingMonth, prevExchangeRate))
        {
            Logger.Info("CGO# Attribute Of Rejected Invoice not valid.");
            return isValidAmount;
        }
        if (currentInvoice.Tolerance == null)
        {
            if (currentInvoice.ListingCurrencyId.HasValue)
            {

                currentInvoiceTolerance = CompareUtil.GetTolerance(BillingCategoryType.Pax, currentInvoice.ListingCurrencyId.Value, currentInvoice, Constants.PaxDecimalPlaces);

            }
            else
            {
                currentInvoiceTolerance = new Tolerance
                                              {
                                                  ClearingHouse = CompareUtil.GetClearingHouse(currentInvoice.SettlementMethodId),
                                                  BillingCategoryId = (int) BillingCategoryType.Pax,
                                                  RoundingTolerance = 0,
                                                  SummationTolerance = 0
                                              };
            }
        }
        else
        {
            currentInvoiceTolerance = currentInvoice.Tolerance;
        }

        string[] errorArgs = new string[] { currentRejectionMemoRecord.RejectionMemoNumber, Convert.ToString(currentRejectionMemoRecord.BatchSequenceNumber), Convert.ToString(currentRejectionMemoRecord.RecordSequenceWithinBatch) };

        if (currentRejectionMemoRecord.RejectionStage == 1)
        {
            if ((currentRejectionMemoRecord.BMCMIndicatorId == 0 || currentRejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.None) && (currentRejectionMemoRecord.CouponBreakdownRecord.Count > 0 || !isBillingHistory))
            {
                Logger.Info("CGO# RM Amount Validation : SC- 9");
                #region AWB Breakdown Level Validation SC:9
                IList<IsValidationExceptionDetail> amountExceptionDetailsList = new List<IsValidationExceptionDetail>();
                string[] awbErrorArgs = new string[] { currentRmAwbRecord.AwbIssueingAirline, Convert.ToString(currentRmAwbRecord.AwbSerialNumber) };
                foreach (var primeAwbRecord in primeAwbRecords)
                {
                  // ID : 239034 - Warning errors in the validation report
                  isValidAmount = true;
                    amountExceptionDetailsList = new List<IsValidationExceptionDetail>();
                    // AWB Breakdown Level Validation
                    // Validate amounts of current RM AWB with original AWB.
                    // Compare Weight Charges Billed and Weight Charges
                    #region Validate Weight Charges Billed  - SC:9
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(primeAwbRecord.WeightCharges), Convert.ToDouble(currentRmAwbRecord.BilledWeightCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.BilledWeightChargesDoesnotmatchwithRejectedAwb;
                        if (isIsWeb)
                        {
                          errorCode = CargoErrorCodes.IsWebBilledWeightChargesMismatchRejectedAwb;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrBilledWeightChargesDoesnotmatchwithRejectedAwb;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Weight Charges Billed Amount",
                                                                                             Convert.ToString(currentRmAwbRecord.BilledWeightCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemoCoupon,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }
                    #endregion

                    // Compare Valuation Charges Billed and Valuation Charges
                    #region Validate Valuation Charges Billed  - SC:9
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(primeAwbRecord.ValuationCharges), Convert.ToDouble(currentRmAwbRecord.BilledValuationCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.BilledValuationChargesDoesnotmatchwithRejectedAwb;
                        if (isIsWeb)
                        {
                          errorCode = CargoErrorCodes.IsWebBilledValuationChargesMismatchRejectedAwb;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrBilledValuationChargesDoesnotmatchwithRejectedAwb;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Valuation Charges Billed Amount",
                                                                                             Convert.ToString(currentRmAwbRecord.BilledValuationCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemoCoupon,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    // Compare Other Charges Amount and Billed	Other Charges
                    #region Validate Other Charges Billed  - SC:9

                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(primeAwbRecord.OtherCharges), Convert.ToDouble(currentRmAwbRecord.BilledOtherCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.BilledOtherChargesDoesnotmatchwithRejectedAwb;
                        if (isIsWeb)
                        {
                          errorCode = CargoErrorCodes.IsWebBilledOtherChargesMismatchRejectedAwb;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrBilledOtherChargesDoesnotmatchwithRejectedAwb;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Other Charges Billed Amount",
                                                                                             Convert.ToString(currentRmAwbRecord.BilledOtherCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemoCoupon,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    // Compare ISC Amount Allowed and Interline Service Charge Amount
                    #region Validate ISC Amount Allowed  - SC:9

                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(primeAwbRecord.IscAmount), Convert.ToDouble(currentRmAwbRecord.AllowedIscAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.AllowedIscAmountDoesnotmatchwithRejectedAwb;
                        if (isIsWeb)
                        {
                          errorCode = CargoErrorCodes.IsWebAllowedIscAmountMismatchRejectedAwb;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrAllowedIscAmountDoesnotmatchwithRejectedAwb;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Allowed ISC Amount",
                                                                                             Convert.ToString(currentRmAwbRecord.AllowedIscAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemoCoupon,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    // Compare VAT Amount Billed and VAT Amount
                    #region Validate VAT Amount Allowed  - SC:9
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(primeAwbRecord.VatAmount), Convert.ToDouble(currentRmAwbRecord.BilledVatAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.BilledVatAmountDoesnotmatchwithRejectedAwb;
                        if (isIsWeb)
                        {
                          errorCode = CargoErrorCodes.IsWebBilledVatAmountMismatchRejectedAwb;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrBilledVatAmountDoesnotmatchwithRejectedAwb;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Vat Billed Amount",
                                                                                             Convert.ToString(currentRmAwbRecord.BilledVatAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemoCoupon,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion
                  
                  if (isValidAmount) break;
                }

                // ID : 239034 - Warning errors in the validation report
                if (!isValidAmount)
                {
                  foreach (var isValidationExceptionDetail in amountExceptionDetailsList)
                  {
                    isValidationExceptionDetail.SerialNo = exceptionDetailsList.Count + 1;
                    if (isErrorCorrection)
                      isValidationExceptionDetail.ErrorDescription =
                        string.Format(isValidationExceptionDetail.ErrorDescription, awbErrorArgs);
                    exceptionDetailsList.Add(isValidationExceptionDetail);
                  }
                  if (!outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                  {
                    isValidAmount = true;
                  }
                }
              //End AWB Level Validation  - SC:9
                #endregion
                Logger.Info("-----------------------------------------------------------------------------------");
            }

            if (currentRejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.BMNumber)
            {
                Logger.Info("CGO# RM Amount Validation : SC- 10");
                #region Billing Memo level validation SC: 10
                //Memo level validation
                //Validates amounts of current RM with Billing memo in your invoice.
                IList<IsValidationExceptionDetail> amountExceptionDetailsList = new List<IsValidationExceptionDetail>();
                var billingMemos = yourInvoice.CGOBillingMemo.Where(billingMemo => billingMemo.BillingMemoNumber != null && billingMemo.BillingMemoNumber.Trim().ToUpper() == currentRejectionMemoRecord.YourBillingMemoNumber.Trim().ToUpper()).ToList();

                foreach (var bm in billingMemos)
                {
                  // ID : 239034 - Warning errors in the validation report
                  isValidAmount = true;
                    //Total Weight Charges billed
                    #region Validate Total Weight Charges Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(bm.BilledTotalWeightCharge), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalWeightCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalWeightChargesOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalWeightChargesOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalWeightChargesOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total Weight Charges billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalWeightCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);

                    }

                    #endregion

                    //Total Valuation Charges billed
                    #region Validate Total Valuation Charges Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(bm.BilledTotalValuationAmount), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalValuationCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalValuationAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalValuationAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalValuationAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total Valuation Charges billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalValuationCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    //Total Total Other Charges Amount billed
                    #region Validate Total Other Charges Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(bm.BilledTotalOtherChargeAmount), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalOtherChargeAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalOtherChargeAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalOtherChargeAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalOtherChargeAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total Other Charges Amount billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalOtherChargeAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    //Total ISC Amount Allowed
                    #region Validate Total ISC Amount Allowed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(bm.BilledTotalIscAmount), Convert.ToDouble(currentRejectionMemoRecord.AllowedTotalIscAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalIscAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalIscAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalIscAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total ISC Amount Allowed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.AllowedTotalIscAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    //Total VAT Amount Billed
                    #region Validate Total VAT Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(bm.BilledTotalVatAmount), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalVatAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalVatAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalVatAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalVatAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total VAT Amount billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalVatAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    if (isValidAmount) break;
                }

                // ID : 239034 - Warning errors in the validation report
                if (!isValidAmount)
                {
                  foreach (var isValidationExceptionDetail in amountExceptionDetailsList)
                  {
                    isValidationExceptionDetail.SerialNo = exceptionDetailsList.Count + 1;
                    if (isIsWeb)
                      isValidationExceptionDetail.ErrorDescription =
                        string.Format(isValidationExceptionDetail.ErrorDescription, errorArgs);
                    exceptionDetailsList.Add(isValidationExceptionDetail);
                  }
                  if (!outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                  {
                    isValidAmount = true;
                  }
                }

              #endregion
            }
            if (currentRejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.CMNumber)
            {
                Logger.Info("CGO# RM Amount Validation : SC- 11");
                #region Credit Memo level validation SC: 11
                //Memo level validation
                //Validates amounts of current RM with Credit memo in your invoice.
                IList<IsValidationExceptionDetail> amountExceptionDetailsList = new List<IsValidationExceptionDetail>();
                var creditMemos = yourInvoice.CGOCreditMemo.Where(creditMemo => creditMemo.CreditMemoNumber != null && creditMemo.CreditMemoNumber.Trim().ToUpper() == currentRejectionMemoRecord.YourBillingMemoNumber.Trim().ToUpper()).ToList();
                foreach (var cm in creditMemos)
                {
                  // ID : 239034 - Warning errors in the validation report
                  isValidAmount = true;
                    //Total Weight Charges billed
                    #region Validate Total Weight Charges Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(cm.TotalWeightCharges), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalWeightCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalWeightChargesOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalWeightChargesOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalWeightChargesOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total Weight Charges billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalWeightCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);

                    }

                    #endregion

                    //Total Valuation Charges billed
                    #region Validate Total Valuation Charges Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(cm.TotalValuationAmt), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalValuationCharge), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalValuationAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalValuationAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalValuationAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total Valuation Charges billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalValuationCharge),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    //Total Total Other Charges Amount billed
                    #region Validate Total Other Charges Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(cm.TotalOtherChargeAmt), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalOtherChargeAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalOtherChargeAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalOtherChargeAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalOtherChargeAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total Other Charges Amount billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalOtherChargeAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    //Total ISC Amount Allowed
                    #region Validate Total ISC Amount Allowed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(cm.TotalIscAmountCredited), Convert.ToDouble(currentRejectionMemoRecord.AllowedTotalIscAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalIscAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalIscAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalIscAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total ISC Amount Allowed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.AllowedTotalIscAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    //Total VAT Amount Billed
                    #region Validate Total VAT Amount Billed   - SC:10
                    if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(cm.TotalVatAmountCredited), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalVatAmount), currentInvoiceTolerance))
                    {
                        isValidAmount = false;
                        ErrorStatus errorStatus = ErrorStatus.W;
                        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                        {
                            errorStatus = ErrorStatus.X;
                        }
                        var errorCode = CargoErrorCodes.TotalVatAmountOfRmDoesnotmatch;
                        if (isIsWeb)
                        {
                            errorCode = CargoErrorCodes.IsWebTotalVatAmountOfRmDoesnotmatch;
                        }
                        if (isErrorCorrection)
                        {
                            errorCode = CargoErrorCodes.ErrCorrTotalVatAmountOfRmDoesnotmatch;
                        }
                        var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                             exceptionDetailsList.Count() + 1,
                                                                                             fileSubmissionDate,
                                                                                             "Total VAT Amount billed",
                                                                                             Convert.ToString(currentRejectionMemoRecord.BilledTotalVatAmount),
                                                                                             currentInvoice,
                                                                                             fileName,
                                                                                             ErrorLevels.ErrorLevelRejectionMemo,
                                                                                             errorCode,
                                                                                             errorStatus,
                                                                                             currentRejectionMemoRecord.BillingCode,
                                                                                             currentRejectionMemoRecord);
                        amountExceptionDetailsList.Add(validationExceptionDetail);
                    }

                    #endregion

                    if (isValidAmount) break;
                }

                // ID : 239034 - Warning errors in the validation report
                if (!isValidAmount)
                {
                  foreach (var isValidationExceptionDetail in amountExceptionDetailsList)
                  {
                    isValidationExceptionDetail.SerialNo = exceptionDetailsList.Count + 1;
                    if (isIsWeb)
                      isValidationExceptionDetail.ErrorDescription =
                        string.Format(isValidationExceptionDetail.ErrorDescription, errorArgs);
                    exceptionDetailsList.Add(isValidationExceptionDetail);
                  }
                  if (!outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                  {
                    isValidAmount = true;
                  }
                }

              #endregion
            }
        }
        if (currentRejectionMemoRecord.RejectionStage == 2 || currentRejectionMemoRecord.RejectionStage == 3)
        {
            Logger.Info("CGO# RM Amount Validation : SC- 12/13");
            #region Memo level validation RejectionStage 2 or 3 SC:12/13
            //Memo level validation
            //Validates amounts of current RM with previous stage RM in your invoice.
            IList<IsValidationExceptionDetail> amountExceptionDetailsList = new List<IsValidationExceptionDetail>();
            var rejectionMemos = yourInvoice.CGORejectionMemo.Where(rm => rm.RejectionMemoNumber == currentRejectionMemoRecord.YourRejectionNumber).ToList();
            foreach (var rm in rejectionMemos)
            {
              // ID : 239034 - Warning errors in the validation report
              isValidAmount = true;
                //Total Weight Charges billed
                #region Validate Total Weight Charges Amount Billed   - SC:12/13
                if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(rm.AcceptedTotalWeightCharge), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalWeightCharge), currentInvoiceTolerance))
                {
                    isValidAmount = false;
                    ErrorStatus errorStatus = ErrorStatus.W;
                    if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                    {
                        errorStatus = ErrorStatus.X;
                    }
                    var errorCode = CargoErrorCodes.TotalWeightChargesAcceptedOfRmDoesnotmatch;
                    if (isIsWeb)
                    {
                        errorCode = CargoErrorCodes.IsWebTotalWeightChargesAcceptedOfRmDoesnotmatch;
                    }
                    if (isErrorCorrection)
                    {
                        errorCode = CargoErrorCodes.ErrCorrTotalWeightChargesAcceptedOfRmDoesnotmatch;
                    }
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Total Weight Charges billed",
                                                                                         Convert.ToString(currentRejectionMemoRecord.BilledTotalWeightCharge),
                                                                                         currentInvoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         errorCode,
                                                                                         errorStatus,
                                                                                         currentRejectionMemoRecord.BillingCode,
                                                                                         currentRejectionMemoRecord);
                    amountExceptionDetailsList.Add(validationExceptionDetail);
                }

                #endregion

                //Total Valuation Charges billed
                #region Validate Total Valuation Charges Amount Billed   - SC:12/13
                if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(rm.AcceptedTotalValuationCharge), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalValuationCharge), currentInvoiceTolerance))
                {
                    isValidAmount = false;
                    ErrorStatus errorStatus = ErrorStatus.W;
                    if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                    {
                        errorStatus = ErrorStatus.X;
                    }
                    var errorCode = CargoErrorCodes.TotalValuationAmountAcceptedOfRmDoesnotmatch;
                    if (isIsWeb)
                    {
                        errorCode = CargoErrorCodes.IsWebTotalValuationAmountAcceptedOfRmDoesnotmatch;
                    }
                    if (isErrorCorrection)
                    {
                        errorCode = CargoErrorCodes.ErrCorrTotalValuationAmountAcceptedOfRmDoesnotmatch;
                    }
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Total Valuation Charges billed",
                                                                                         Convert.ToString(currentRejectionMemoRecord.BilledTotalValuationCharge),
                                                                                         currentInvoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         errorCode,
                                                                                         errorStatus,
                                                                                         currentRejectionMemoRecord.BillingCode,
                                                                                         currentRejectionMemoRecord);
                    amountExceptionDetailsList.Add(validationExceptionDetail);
                }

                #endregion

                //Total Total Other Charges Amount billed
                #region Validate Total Other Charges Amount Billed   - SC:12/13
                if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(rm.AcceptedTotalOtherChargeAmount), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalOtherChargeAmount), currentInvoiceTolerance))
                {
                    isValidAmount = false;
                    ErrorStatus errorStatus = ErrorStatus.W;
                    if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                    {
                        errorStatus = ErrorStatus.X;
                    }
                    var errorCode = CargoErrorCodes.TotalOtherChargeAmountAcceptedOfRmDoesnotmatch;
                    if (isIsWeb)
                    {
                        errorCode = CargoErrorCodes.IsWebTotalOtherChargeAmountAcceptedOfRmDoesnotmatch;
                    }
                    if (isErrorCorrection)
                    {
                        errorCode = CargoErrorCodes.ErrCorrTotalOtherChargeAmountAcceptedOfRmDoesnotmatch;
                    }
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Total Other Charges Amount billed",
                                                                                         Convert.ToString(currentRejectionMemoRecord.BilledTotalOtherChargeAmount),
                                                                                         currentInvoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         errorCode,
                                                                                         errorStatus,
                                                                                         currentRejectionMemoRecord.BillingCode,
                                                                                         currentRejectionMemoRecord);
                    amountExceptionDetailsList.Add(validationExceptionDetail);
                }

                #endregion

                //Total ISC Amount Allowed
                #region Validate Total ISC Amount Allowed   - SC:12/13
                if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(rm.AcceptedTotalIscAmount), Convert.ToDouble(currentRejectionMemoRecord.AllowedTotalIscAmount), currentInvoiceTolerance))
                {
                    isValidAmount = false;
                    ErrorStatus errorStatus = ErrorStatus.W;
                    if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                    {
                        errorStatus = ErrorStatus.X;
                    }
                    var errorCode = CargoErrorCodes.TotalIscAmountAcceptedOfRmDoesnotmatch;
                    if (isIsWeb)
                    {
                        errorCode = CargoErrorCodes.IsWebTotalIscAmountAcceptedOfRmDoesnotmatch;
                    }
                    if (isErrorCorrection)
                    {
                        errorCode = CargoErrorCodes.ErrCorrTotalIscAmountAcceptedOfRmDoesnotmatch;
                    }
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Total ISC Amount Allowed",
                                                                                         Convert.ToString(currentRejectionMemoRecord.AllowedTotalIscAmount),
                                                                                         currentInvoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         errorCode,
                                                                                         errorStatus,
                                                                                         currentRejectionMemoRecord.BillingCode,
                                                                                         currentRejectionMemoRecord);
                    amountExceptionDetailsList.Add(validationExceptionDetail);
                }

                #endregion

                //Total VAT Amount Billed
                #region Validate Total VAT Amount Billed   - SC:12/13
                if (IsAmountMismatch(currentInvoice, yourInvoice, prevExchangeRate, currentExchangeRate, Convert.ToDouble(rm.AcceptedTotalVatAmount), Convert.ToDouble(currentRejectionMemoRecord.BilledTotalVatAmount), currentInvoiceTolerance))
                {
                    isValidAmount = false;
                    ErrorStatus errorStatus = ErrorStatus.W;
                    if (outcomeOfMismatchOnRmBilledOrAllowedAmounts)
                    {
                        errorStatus = ErrorStatus.X;
                    }
                    var errorCode = CargoErrorCodes.TotalVatAmountAcceptedOfRmDoesnotmatch;
                    if (isIsWeb)
                    {
                        errorCode = CargoErrorCodes.IsWebTotalVatAmountAcceptedOfRmDoesnotmatch;
                    }
                    if (isErrorCorrection)
                    {
                        errorCode = CargoErrorCodes.ErrCorrTotalVatAmountAcceptedOfRmDoesnotmatch;
                    }
                    var validationExceptionDetail = CreateCgoRMValidationExceptionDetail(currentRejectionMemoRecord.Id.Value(),
                                                                                         exceptionDetailsList.Count() + 1,
                                                                                         fileSubmissionDate,
                                                                                         "Total VAT Amount billed",
                                                                                         Convert.ToString(currentRejectionMemoRecord.BilledTotalVatAmount),
                                                                                         currentInvoice,
                                                                                         fileName,
                                                                                         ErrorLevels.ErrorLevelRejectionMemo,
                                                                                         errorCode,
                                                                                         errorStatus,
                                                                                         currentRejectionMemoRecord.BillingCode,
                                                                                         currentRejectionMemoRecord);
                    amountExceptionDetailsList.Add(validationExceptionDetail);
                }

                #endregion

                if (isValidAmount) break;
            }

            // ID : 239034 - Warning errors in the validation report
            if (!isValidAmount)
            {
              foreach (var isValidationExceptionDetail in amountExceptionDetailsList)
              {
                isValidationExceptionDetail.SerialNo = exceptionDetailsList.Count + 1;
                if (isIsWeb)
                  isValidationExceptionDetail.ErrorDescription =
                    string.Format(isValidationExceptionDetail.ErrorDescription, errorArgs);
                exceptionDetailsList.Add(isValidationExceptionDetail);
              }
              if (!outcomeOfMismatchOnRmBilledOrAllowedAmounts)
              {
                isValidAmount = true;
              }
            }

          #endregion
        }

        return isValidAmount;
    }

    /// <summary>
    /// CMP#459 : Validates the amounts in RM.
    /// </summary>
    /// <param name="outcomeOfMismatchOnRmBilledOrAllowedAmounts">if set to <c>true</c> [outcome of mismatch on rm billed or allowed amounts].</param>
    /// <param name="exceptionDetailsList">The exception details list.</param>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <param name="isErrorCorrection">if set to <c>true</c> [is error correction].</param>
    /// <returns></returns>
    public bool ValidateAmountsInRMonMemoLevel(bool outcomeOfMismatchOnRmBilledOrAllowedAmounts, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoRejectionMemo rejectionMemoRecord, bool isErrorCorrection = false)
    {
        bool isValid = true;
        //CMP#459 : Validate Memo level amounts
        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts && Convert.ToBoolean(rejectionMemoRecord.IsLinkingSuccessful))
        {
            RejectionMemoRepository = Ioc.Resolve<IRejectionMemoRecordRepository>(typeof(IRejectionMemoRecordRepository));
            var invoice = CargoInvoiceRepository.Single(id: rejectionMemoRecord.InvoiceId);
            //Get Rejection Memo record from DB
            if (!isErrorCorrection)
            {
                rejectionMemoRecord = RejectionMemoRepository.Single(rejectionMemoId: rejectionMemoRecord.Id);
            }
          CargoInvoice yourInvoice = null;
          if(rejectionMemoRecord.RejectionStage == 1 && rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.BMNumber)
          {
            yourInvoice = GetInvoiceWithBMCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                      rejectionMemoRecord.YourInvoiceBillingMonth,
                                                      rejectionMemoRecord.YourInvoiceBillingYear,
                                                      rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                      invoice.BilledMemberId,
                                                      invoice.BillingMemberId);
          }
          else if (rejectionMemoRecord.RejectionStage == 1 && rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.CMNumber)
          {
            yourInvoice = GetInvoiceWithCMCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                    rejectionMemoRecord.YourInvoiceBillingMonth,
                                                    rejectionMemoRecord.YourInvoiceBillingYear,
                                                    rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                    invoice.BilledMemberId,
                                                    invoice.BillingMemberId);	
          }
          else
          {
            yourInvoice = GetInvoiceWithRMCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                               rejectionMemoRecord.YourInvoiceBillingMonth,
                                                               rejectionMemoRecord.YourInvoiceBillingYear,
                                                               rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                               invoice.BilledMemberId,
                                                               invoice.BillingMemberId,
                                                               null,
                                                               null);
          }
            
            if (yourInvoice != null)
            {
                var prevDate = new DateTime(yourInvoice.BillingYear, yourInvoice.BillingMonth, 1);
                var currDate = new DateTime(invoice.BillingYear, invoice.BillingMonth, 1);
                var exchangeRateRepository = Ioc.Resolve<IExchangeRateRepository>(typeof(IExchangeRateRepository));
                var prevInvExRate = exchangeRateRepository.Get(ex => ex.CurrencyId == yourInvoice.ListingCurrencyId && ex.EffectiveFromDate <= prevDate && ex.EffectiveToDate >= prevDate).FirstOrDefault();
                var currInvExRate = exchangeRateRepository.Get(ex => ex.CurrencyId == invoice.ListingCurrencyId && ex.EffectiveFromDate <= currDate && ex.EffectiveToDate >= currDate).FirstOrDefault();

                if (rejectionMemoRecord.RejectionStage == 1)
                {
                    if (rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.BMNumber)
                    {

                        isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts, prevInvExRate, currInvExRate,
                                                                    rejectionMemoRecord,
                                                                    exceptionDetailsList,
                                                                    invoice,
                                                                    yourInvoice,
                                                                    null,
                                                                    null,
                                                                    string.Empty,
                                                                    DateTime.UtcNow,
                                                                    true,true,
                                                                    isErrorCorrection);
                    }
                    if (rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.CMNumber)
                    {
                        isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts, prevInvExRate, currInvExRate,
                                                                    rejectionMemoRecord,
                                                                    exceptionDetailsList,
                                                                    invoice,
                                                                    yourInvoice,
                                                                    null,
                                                                    null,
                                                                    string.Empty,
                                                                    DateTime.UtcNow,
                                                                    true, true,
                                                                    isErrorCorrection);
                    }
                }
                if (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3)
                {
                    isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts, prevInvExRate, currInvExRate,
                                                                rejectionMemoRecord,
                                                                exceptionDetailsList,
                                                                invoice,
                                                                yourInvoice,
                                                                null,
                                                                null,
                                                                string.Empty,
                                                                DateTime.UtcNow,
                                                                true, true,
                                                                isErrorCorrection);
                }
            }

            
        }
        return isValid;
    }

    /// <summary>
    /// CMP#459 : Validates the amounts in R mon coupon level.
    /// </summary>
    /// <param name="outcomeOfMismatchOnRmBilledOrAllowedAmounts">if set to <c>true</c> [outcome of mismatch on rm billed or allowed amounts].</param>
    /// <param name="exceptionDetailsList">The exception details list.</param>
    /// <param name="rejectionMemoRecord">The rejection memo record.</param>
    /// <param name="rejectionMemoCouponBreakdownRecord">The rejection memo coupon breakdown record.</param>
    /// <param name="isBillingHistory">if set to <c>true</c> [is billing history].</param>
    /// <returns></returns>
    public bool ValidateAmountsInRMonAwbLevel(bool outcomeOfMismatchOnRmBilledOrAllowedAmounts, IList<IsValidationExceptionDetail> exceptionDetailsList, CargoRejectionMemo rejectionMemoRecord, RMAwb rejectionMemoCouponBreakdownRecord, bool isBillingHistory = true, bool isErrorCorrection = false)
    {
        bool isValid = true;
        //CMP#459 : Validate Amount at AWB level.
        if (outcomeOfMismatchOnRmBilledOrAllowedAmounts && Convert.ToBoolean(rejectionMemoRecord.IsLinkingSuccessful))
        {
            #region AWB Breakdown Level Validation SC:9

            if (rejectionMemoRecord.RejectionStage == 1)
            {
                if ((rejectionMemoRecord.BMCMIndicatorId == 0 || rejectionMemoRecord.BMCMIndicatorId == (int)BMCMIndicator.None) && (rejectionMemoRecord.CouponBreakdownRecord.Count > 0 || !isBillingHistory))
                {
                    var invoice = CargoInvoiceRepository.Single(id: rejectionMemoRecord.InvoiceId);
                    var couponSearchCriterias = new List<CouponSearchCriteria>();
                    if (!isBillingHistory)
                    {
                        couponSearchCriterias.Add(new CouponSearchCriteria() { TicketIssuingAirline = rejectionMemoCouponBreakdownRecord.AwbIssueingAirline, TicketCouponNo = rejectionMemoCouponBreakdownRecord.AwbSerialNumber, TicketDocNo = rejectionMemoCouponBreakdownRecord.AwbBillingCode });
                    }
                    else
                    {
                        foreach (var rmCoupon in rejectionMemoRecord.CouponBreakdownRecord)
                        {
                            couponSearchCriterias.Add(new CouponSearchCriteria() { TicketIssuingAirline = rmCoupon.AwbIssueingAirline, TicketCouponNo = rmCoupon.AwbSerialNumber, TicketDocNo = rmCoupon.AwbBillingCode });
                        } 
                    }
                    var yourInvoice = GetInvoiceWithCoupons(rejectionMemoRecord.YourInvoiceNumber,
                                                            rejectionMemoRecord.YourInvoiceBillingMonth,
                                                            rejectionMemoRecord.YourInvoiceBillingYear,
                                                            rejectionMemoRecord.YourInvoiceBillingPeriod,
                                                            invoice.BilledMemberId,
                                                            invoice.BillingMemberId,
                                                            null,
                                                            CreateCouponSearchCriteriaString(couponSearchCriterias));
                    var yourCouponRecords =
                        yourInvoice.AwbDataRecord.Where(
                            awbRecord =>
                            awbRecord.AwbIssueingAirline == rejectionMemoCouponBreakdownRecord.AwbIssueingAirline && awbRecord.AwbSerialNumber == rejectionMemoCouponBreakdownRecord.AwbSerialNumber).
                            ToList();

                    if (yourCouponRecords.Count() > 0)
                    {
                        //CMP#459 : Validate Amount
                        //If duplicate rejected FIMs are found in the rejected invoice, all amounts of at least one FIM coupon from the rejected invoice should match the RM level amounts of the rejecting RM
                        var prevDate = new DateTime(yourInvoice.BillingYear, yourInvoice.BillingMonth, 1);
                        var currDate = new DateTime(invoice.BillingYear, invoice.BillingMonth, 1);
                        var exchangeRateRepository = Ioc.Resolve<IExchangeRateRepository>(typeof(IExchangeRateRepository));
                        var prevInvExRate = exchangeRateRepository.Get(ex => ex.CurrencyId == yourInvoice.ListingCurrencyId && ex.EffectiveFromDate <= prevDate && ex.EffectiveToDate >= prevDate).FirstOrDefault();
                        var currInvExRate = exchangeRateRepository.Get(ex => ex.CurrencyId == invoice.ListingCurrencyId && ex.EffectiveFromDate <= currDate && ex.EffectiveToDate >= currDate).FirstOrDefault();
                        isValid = ValidateOriginalBillingAmountInRm(outcomeOfMismatchOnRmBilledOrAllowedAmounts,
                                                                    prevInvExRate,
                                                                    currInvExRate,
                                                                    rejectionMemoRecord,
                                                                    exceptionDetailsList,
                                                                    invoice,
                                                                    yourInvoice,
                                                                    rejectionMemoCouponBreakdownRecord,
                                                                    yourCouponRecords.ToList(),
                                                                    string.Empty,
                                                                    DateTime.UtcNow,
                                                                    true,
                                                                    isBillingHistory,
                                                                    isErrorCorrection);
                    }
                }
            }

            #endregion
        }
        return isValid;
    }

    /// <summary>
    /// CMP#459 : Validates the amountof rm on validation error correction.
    /// </summary>
    /// <param name="exceptionDetailsList">The exception details list.</param>
    /// <param name="errorCorrection">The error correction.</param>
    /// <returns></returns>
    public bool ValidateAmountofRmOnValidationErrorCorrection(IList<IsValidationExceptionDetail> exceptionDetailsList, ValidationErrorCorrection errorCorrection)
    {
        bool isValid = true;
        bool outcomeOfMismatchOnRmBilledOrAllowedAmounts = Convert.ToBoolean(SystemParameters.Instance.ValidationParams.CGORMBilledAllowedAmounts);
        var rejectionMemoRecord = RejectionMemoRepository.Single(rejectionMemoId: errorCorrection.PkReferenceId);
        if (rejectionMemoRecord != null && outcomeOfMismatchOnRmBilledOrAllowedAmounts)
        {
            var currentInvoice = CargoInvoiceRepository.Single(id: rejectionMemoRecord.InvoiceId);
            rejectionMemoRecord.IsLinkingSuccessful = true;
            rejectionMemoRecord.YourInvoiceBillingPeriod = errorCorrection.YourInvoicePeriod;
            rejectionMemoRecord.YourInvoiceBillingMonth = errorCorrection.YourInvoiceMonth;
            rejectionMemoRecord.YourInvoiceBillingYear = errorCorrection.YourInvoiceYear;
            rejectionMemoRecord.YourInvoiceNumber = errorCorrection.YourInvoiceNo;
            rejectionMemoRecord.YourRejectionNumber = errorCorrection.YourRejectionMemoNo;

            if (rejectionMemoRecord.RejectionStage == 1)
            {
                if ((rejectionMemoRecord.BMCMIndicatorId == 0 || rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.None) && rejectionMemoRecord.CouponBreakdownRecord.Count > 0)
                {
                    //AWB Level
                    foreach (var rejectionMemoAwbRecord in rejectionMemoRecord.CouponBreakdownRecord)
                    {
                        isValid = ValidateAmountsInRMonAwbLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord, rejectionMemoAwbRecord,true,true);
                    }
                }
                if (rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.BMNumber)
                {
                    //Memo Level
                    isValid = ValidateAmountsInRMonMemoLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord, true);
                }
                if (rejectionMemoRecord.BMCMIndicatorId == (int) BMCMIndicator.CMNumber)
                {
                    //Memo Level
                    isValid = ValidateAmountsInRMonMemoLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord, true);
                }
            }
            if (rejectionMemoRecord.RejectionStage == 2 || rejectionMemoRecord.RejectionStage == 3)
            {
                //Memo Level
                isValid = ValidateAmountsInRMonMemoLevel(outcomeOfMismatchOnRmBilledOrAllowedAmounts, exceptionDetailsList, rejectionMemoRecord, true);
            }

            rejectionMemoRecord = RejectionMemoRepository.Single(rejectionMemoId: rejectionMemoRecord.Id);
        }
        return isValid;
    }


    /// <summary>
    /// CMP#459 : Gets the currency conversion factor.
    /// </summary>
    /// <param name="currentInvoice">The current invoice.</param>
    /// <param name="yourInvoice">Your invoice.</param>
    /// <param name="prevInvExchangeRate">The prev inv exchange rate.</param>
    /// <param name="currentInvExchangeRate">The current inv exchange rate.</param>
    /// <param name="prevAmount">The prev amount.</param>
    /// <param name="currentAmount">The current amount.</param>
    /// <param name="currentInvoiceTolerance">The current invoice tolerance.</param>
    /// <returns></returns>
    private bool IsAmountMismatch(CargoInvoice currentInvoice, CargoInvoice yourInvoice, ExchangeRate prevInvExchangeRate, ExchangeRate currentInvExchangeRate, double prevAmount, double currentAmount, Tolerance currentInvoiceTolerance)
    {
      var referenceManager = Ioc.Resolve<IReferenceManager>(typeof(IReferenceManager));
      var prevInvListingCurrency = Convert.ToInt32(yourInvoice.ListingCurrencyId.Value);
      var prevInvBillingCurrency = Convert.ToInt32(yourInvoice.BillingCurrencyId.Value);
      var currentInvListingCurrency = Convert.ToInt32(currentInvoice.ListingCurrencyId.Value);
      var prevInvSmi = yourInvoice.SettlementMethodId;
      var currentInvSmi = currentInvoice.SettlementMethodId;
      double convertedAmount = prevAmount;
      if (currentInvExchangeRate != null && prevInvExchangeRate != null)
      {
        if (prevInvListingCurrency == prevInvBillingCurrency && prevInvBillingCurrency == currentInvListingCurrency)
        {
          convertedAmount = prevAmount;
          //SCP203775 : RM is validated when billed amount doesn't match with previous transaction 
          return (currentInvoiceTolerance != null && !CompareUtil.Compare(currentAmount, convertedAmount, currentInvoiceTolerance.RoundingTolerance, Constants.CgoDecimalPlaces));
        }
        // CMP#624 : Change#3 - Conditional validation of PAX/CGO Billed/Allowed amounts 
            if (prevInvSmi != (int) SettlementMethodValues.IchSpecialAgreement && currentInvSmi != (int) SettlementMethodValues.IchSpecialAgreement)
            {
        //SMI is I/A/M
        if (prevInvSmi == (int)SettlementMethodValues.Ich || prevInvSmi == (int)SettlementMethodValues.Ach || prevInvSmi == (int)SettlementMethodValues.AchUsingIATARules)
        {
          //Currency of Billing of previous transaction is USD && SMI I/M/A/B
          if ((prevInvBillingCurrency == (int)BillingCurrency.USD) &&
              (currentInvSmi == (int)SettlementMethodValues.Ich || currentInvSmi == (int)SettlementMethodValues.Ach || currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
               currentInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(currentInvSmi, false)))
          {
            convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateUsd));
            convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateUsd;
            convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
          }
          //Currency of Billing of previous transaction is GBP & SMI I/M/A/B
          if (prevInvSmi == (int)SettlementMethodValues.Ich && prevInvBillingCurrency == (int)BillingCurrency.GBP &&
              (currentInvSmi == (int)SettlementMethodValues.Ich || currentInvSmi == (int)SettlementMethodValues.Ach || currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
               currentInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(currentInvSmi, false)))
          {
            convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateGbp));
            convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateGbp;
            convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
          }
          //Currency of Billing of previous transaction is EUR
          if (prevInvSmi == (int)SettlementMethodValues.Ich && prevInvBillingCurrency == (int)BillingCurrency.EUR &&
              (currentInvSmi == (int)SettlementMethodValues.Ich || currentInvSmi == (int)SettlementMethodValues.Ach || currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
               currentInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(currentInvSmi, false)))
          {
            convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateEur));
            convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateEur;
            convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
          }


          //Currency of Billing of previous transaction is CAD
          if (prevInvSmi == (int)SettlementMethodValues.Ach && prevInvListingCurrency == (int)BillingCurrency.CAD && prevInvBillingCurrency == (int)BillingCurrency.CAD &&
              (currentInvSmi == (int)SettlementMethodValues.Ich || currentInvSmi == (int)SettlementMethodValues.Ach || currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
               currentInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(currentInvSmi, false)))
          {
            convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateUsd));
            convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateUsd;
            convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
          }
        }
        if (prevInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(prevInvSmi, false))
        {
          if (currentInvSmi == (int)SettlementMethodValues.Ich || currentInvSmi == (int)SettlementMethodValues.Ach || currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
              currentInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(currentInvSmi, false))
          {
            if (prevInvBillingCurrency == (int)BillingCurrency.USD)
            {
              convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateUsd));
              convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateUsd;
              convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
            }

            if (prevInvBillingCurrency == (int)BillingCurrency.GBP)
            {
              convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateGbp));
              convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateGbp;
              convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
            }

            if (prevInvBillingCurrency == (int)BillingCurrency.EUR)
            {
              convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateEur));
              convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateEur;
              convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
            }
            if (prevInvBillingCurrency != (int)BillingCurrency.USD && prevInvBillingCurrency != (int)BillingCurrency.GBP && prevInvBillingCurrency != (int)BillingCurrency.EUR)
            {
              convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateUsd));
              convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateUsd;
              convertedAmount = ConvertUtil.Round(convertedAmount, Constants.CgoDecimalPlaces);
            }
          }
        }
            }
            // CMP#624 : Change#3 - Conditional validation of PAX/CGO Billed/Allowed amounts 
            if (prevInvSmi == (int)SettlementMethodValues.IchSpecialAgreement && currentInvSmi == (int)SettlementMethodValues.IchSpecialAgreement)
            {
              if (!string.IsNullOrWhiteSpace(yourInvoice.CurrencyRateIndicator) && yourInvoice.CurrencyRateIndicator.Trim().ToUpper() == "F")
              {
                // Validate amounts for SMI X only if
                // When the Currency of Billing of the rejected invoice is USD, GBP or EUR
                //AND
                //Invoice level flag ‘Currency Rate Indicator’ of the rejected invoice is “F” (FDR)
                if (prevInvBillingCurrency == (int)BillingCurrency.USD)
                {
                  convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateUsd));
                  convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateUsd;
                  convertedAmount = ConvertUtil.Round(convertedAmount, Constants.PaxDecimalPlaces);
                  return (currentInvoiceTolerance != null && !CompareUtil.Compare(currentAmount, convertedAmount, currentInvoiceTolerance.RoundingTolerance, Constants.PaxDecimalPlaces));
                }
                if (prevInvBillingCurrency == (int)BillingCurrency.GBP)
                {
                  convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateGbp));
                  convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateGbp;
                  convertedAmount = ConvertUtil.Round(convertedAmount, Constants.PaxDecimalPlaces);
                  return (currentInvoiceTolerance != null && !CompareUtil.Compare(currentAmount, convertedAmount, currentInvoiceTolerance.RoundingTolerance, Constants.PaxDecimalPlaces));
                }

                if (prevInvBillingCurrency == (int)BillingCurrency.EUR)
                {
                  convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateEur));
                  convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateEur;
                  convertedAmount = ConvertUtil.Round(convertedAmount, Constants.PaxDecimalPlaces);
                  return (currentInvoiceTolerance != null && !CompareUtil.Compare(currentAmount, convertedAmount, currentInvoiceTolerance.RoundingTolerance, Constants.PaxDecimalPlaces));
                }

                //for other Billing Currency should not validate amounts
                return false;
              }

              //for currency rate indicator other than "F" amounts should not validated.
              return false;

            }
            //CMP #553: ACH Requirement for Multiple Currency Handling-FRS
            //This section will apply when Previous SMI is A OR M
            // CMP #456: section 8.1, 8.2, 8.3
            if (prevInvSmi == (int)SettlementMethodValues.Ach || prevInvSmi == (int)SettlementMethodValues.AchUsingIATARules)
            {
                //Previous billing currency 'GBP' and currenct SMI I/M/A/B/X
                if (prevInvBillingCurrency == (int)BillingCurrency.GBP && (currentInvSmi == (int)SettlementMethodValues.Ich ||
                    currentInvSmi == (int)SettlementMethodValues.Ach || currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
                    currentInvSmi == (int)SettlementMethodValues.Bilateral || referenceManager.IsSmiLikeBilateral(currentInvSmi, true)
                    || currentInvSmi == (int)SettlementMethodValues.IchSpecialAgreement))
                {
                    convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateGbp));
                    convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateGbp;
                    convertedAmount = ConvertUtil.Round(convertedAmount, Constants.PaxDecimalPlaces);
                }
                else
                {
                    //Previous billing currency 'EUR"' and currenct SMI I/M/A/B/X
                    if (prevInvBillingCurrency == (int)BillingCurrency.EUR &&
                        (currentInvSmi == (int)SettlementMethodValues.Ich ||
                         currentInvSmi == (int)SettlementMethodValues.Ach ||
                         currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
                         currentInvSmi == (int)SettlementMethodValues.Bilateral ||
                         referenceManager.IsSmiLikeBilateral(currentInvSmi, true)
                         || currentInvSmi == (int)SettlementMethodValues.IchSpecialAgreement))
                    {
                        convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateEur));
                        convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateEur;
                        convertedAmount = ConvertUtil.Round(convertedAmount, Constants.PaxDecimalPlaces);
                    }
                    else
                    {
                        //currenct SMI I/M/A/B/X
                        if (currentInvSmi == (int)SettlementMethodValues.Ich ||
                            currentInvSmi == (int)SettlementMethodValues.Ach ||
                            currentInvSmi == (int)SettlementMethodValues.AchUsingIATARules ||
                            currentInvSmi == (int)SettlementMethodValues.Bilateral ||
                            referenceManager.IsSmiLikeBilateral(currentInvSmi, true)
                            || currentInvSmi == (int)SettlementMethodValues.IchSpecialAgreement)
                        {
                            convertedAmount = TruncateAmount((prevAmount / prevInvExchangeRate.FiveDayRateUsd));
                            convertedAmount = convertedAmount * currentInvExchangeRate.FiveDayRateUsd;
                            convertedAmount = ConvertUtil.Round(convertedAmount, Constants.PaxDecimalPlaces);
                        }
                    }
                }
            }

      }
      return (currentInvoiceTolerance != null && !CompareUtil.Compare(currentAmount, convertedAmount, currentInvoiceTolerance.RoundingTolerance, Constants.CgoDecimalPlaces));
    }

    /// <summary>
    /// Truncates the amount.
    /// </summary>
    /// <param name="amount">The amount.</param>
    /// <returns></returns>
    private double TruncateAmount(double amount)
    {
      int precision = 10;
      double step = (double)Math.Pow(10, precision);
      double tmpAmount = Math.Truncate(step * amount);
      return (tmpAmount / step);
    }

    #region CMP612: Changes to PAX CGO Correspondence Audit Trail Download.

    /// <summary>
    /// Get rejection memo linked with correspondence.
    /// </summary>
    /// <param name="corrRefNo"></param>
    /// <returns></returns>
    //CMP612: Changes to PAX CGO Correspondence Audit Trail Download
    public List<CgoLinkedCorrRejectionSearchData> GetLinkedCorrRejectionSearchResult(Guid correspondenceId)
    {
      //Get stage 3 rejection memo based on correspondence id.
      var filteredList = CGOInvoiceRepository.GetLinkedCorrRejectionSearchResult(correspondenceId);
      return filteredList;
    }

    /// <summary>
    /// This function is used for create rejection audit trail pdf.
    /// </summary>
    /// <param name="request"></param>
    /// <param name="memberFtpRMAuditTrailPath"></param>
    /// <returns></returns>
    //CMP612: Changes to PAX CGO Correspondence Audit Trail Download
    public string CreateRejectionAuditTrailPdf(ReportDownloadRequestMessage request, string memberFtpRMAuditTrailPath,int ProcessingUnitNumber)
    {
      //Split file name and rejection memo id from request.
      var inputArray = request.InputData.Split(';');
      var zipFolderName = inputArray[1];
      var rejectionMemoIds = inputArray[0].Split(',');
      var reportPdfPaths = new List<string>();

      var pdfCreationPath = Path.Combine(memberFtpRMAuditTrailPath, Guid.NewGuid().ToString());
      if (!Directory.Exists(pdfCreationPath))
      {
        Logger.InfoFormat("Create temp folder for pdf file. {0}", pdfCreationPath);
        Directory.CreateDirectory(pdfCreationPath);
      }

      foreach (var rejectionMemoId in rejectionMemoIds)
      {
        var fileLocation = string.Empty;
        using (var p = new Process())
        {
          //Get single instance file name.
          p.StartInfo.FileName = ConfigurationManager.AppSettings["RMAuditTrailPDFGenerator"];
          Logger.InfoFormat("Calling Single Instance :" + p.StartInfo.FileName);

          //Set argument to single instance for create audit trail rejection pdf.
          string arguments = string.Format("{3} {0} \"{1}\" {2}", rejectionMemoId, pdfCreationPath, (int)BillingCategoryType.Cgo, ProcessingUnitNumber);

          //Set configuration setting for exe.
          p.StartInfo.Arguments = arguments;
          Logger.InfoFormat(string.Format("Single Instance Arguments [{0}].", p.StartInfo.Arguments));
          p.StartInfo.UseShellExecute = false;
          p.StartInfo.RedirectStandardOutput = true;
          p.StartInfo.RedirectStandardError = true;
          p.StartInfo.RedirectStandardInput = true;
          p.StartInfo.CreateNoWindow = true;
          p.EnableRaisingEvents = false;
          p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
          p.Start();

          fileLocation = p.StandardOutput.ReadToEnd();
          Logger.Info("Instance Started.......");
          p.WaitForExit();
          Logger.Info("Instance waiting.......");
          p.Close();
          Logger.Info("Instance Closed.......");

          //Exception occurring while generate audit trail PDF for RM, We will throw exception to service so that service can retry.  
          if (fileLocation.Contains("Exception"))
          {
            //Delete temporary folder after use. 
            DeleteTemporaryFolder(pdfCreationPath);

            //throw exception.
            throw new Exception(fileLocation);
          }
        }
        //Add file path for create zip file.
        reportPdfPaths.Add(fileLocation);
      }

      if (reportPdfPaths.Count > 0)
      {
        //Create zip file for audit trail rejection memo.
        string reportZipFilePath = CreateRejectionAuditTrailZip(memberFtpRMAuditTrailPath, zipFolderName, reportPdfPaths);
        Logger.InfoFormat("Report Zip Created at location {0}", reportZipFilePath);

        //Delete temporary folder after use. 
        DeleteTemporaryFolder(pdfCreationPath);

        return reportZipFilePath;
      }
      else
      {
        Logger.InfoFormat("No PDF found for Rejection Memo");
        return string.Empty;
      }
    }

    /// <summary>
    /// This function is used to delete temporary folder.
    /// </summary>
    /// <param name="pdfCreationPath"></param>
    //CMP612: Changes to PAX CGO Correspondence Audit Trail Download
    private static void DeleteTemporaryFolder(string pdfCreationPath)
    {
      //Delete temporary folder after use. 
      if (Directory.Exists(pdfCreationPath))
      {
        try
        {
          Directory.Delete(pdfCreationPath, true);
          Logger.InfoFormat("Delete temp folder. {0}", pdfCreationPath);
        }
        catch (Exception ex)
        {
          //Eat up exception.
          Logger.ErrorFormat("Handle Exception: Error occured while deleting temp folder. {0}", ex);
        }
      }
    }

    /// <summary>
    /// This function is used to create rejection audit trail zip.
    /// </summary>
    /// <param name="basePath"></param>
    /// <param name="zipFolderName"></param>
    /// <param name="reportPdfPaths"></param>
    /// <returns></returns>
    //CMP612: Changes to PAX CGO Correspondence Audit Trail Download
    private string CreateRejectionAuditTrailZip(string basePath, string zipFolderName, List<string> reportPdfPaths)
    {
      Logger.InfoFormat("Creating Zip ");
      var zipFileName = string.Format("{0}.ZIP", zipFolderName);
      var zipFolder = Path.Combine(basePath, zipFolderName);

      //Create zip file.
      FileIo.ZipOutputFile(zipFolder, string.Empty, zipFileName, reportPdfPaths.ToArray());

      Logger.InfoFormat("Zip Created Location: {0}", Path.Combine(basePath, zipFileName));
      return Path.Combine(basePath, zipFileName);
    }

    #endregion

    /// <summary>
    /// CMP#650 Conditional Validations on Reason Codes for CGO Rejections
    /// This Function is used for validating reason code for BM/RM
    /// </summary>
    /// <param name="rmCurrentRecord"></param>
    /// <param name="yourReasonCode"></param>
    /// <param name="isIsWeb"></param>
    /// <param name="isValidationCorrection"></param>
    /// <returns></returns>
    public string ValidateCargoReasonCode(CargoRejectionMemo rmCurrentRecord, string yourReasonCode, bool isIsWeb = false, bool isValidationCorrection = false)
    {
        string errorMessage = string.Empty;

        #region CMP650

        //Stage1 validation
        if (rmCurrentRecord.RejectionStage == (int)RejectionStage.StageOne &&
            rmCurrentRecord.BMCMIndicatorId == (int)BMCMIndicator.BMNumber)
        {

            // Rule 1a
            // A BM billed with Reason Code ‘2C’ can only be rejected via a Stage 1 RM having Reason Code ‘16’
            if (yourReasonCode == ReasonCode2C)
            {
                if (rmCurrentRecord.ReasonCode != ReasonCode16)
                {
                    string formatMessage =
                        string.Format(Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForBM),
                                      ReasonCode2C, ReasonCode16);
                    if (isIsWeb)
                    {
                        throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForBM, formatMessage);
                    }
                    else if (isValidationCorrection)
                    {
                      return formatMessage;
                    }
                    else
                    {
                      return CargoErrorCodes.InvalidRMReasonCodeForBM + "||" + formatMessage;
                    }
                }
            }

            // Rule 2a
            // A BM billed with Reason Code ‘2Z’ can only be rejected via a Stage 1 RM having Reason Code ‘17’
            if (yourReasonCode == ReasonCode2Z)
            {
                if (rmCurrentRecord.ReasonCode != ReasonCode17)
                {
                    string formatMessage =
                        string.Format(Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForBM),
                                      ReasonCode2Z, ReasonCode17);
                    if (isIsWeb)
                    {
                        throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForBM, formatMessage);
                    }
                    else if (isValidationCorrection)
                    {
                      return formatMessage;
                    }
                    else
                    {
                      return CargoErrorCodes.InvalidRMReasonCodeForBM + "||" + formatMessage;
                    }
                }
            }

            // Rule 1b
            // A Stage 1 RM having Reason Code ‘16’ can only reject a BM using Reason Code ‘2C’
            if (yourReasonCode == ReasonCode16)
            {
                if (rmCurrentRecord.ReasonCode != ReasonCode2C)
                {
                    string formatMessage =
                        string.Format(Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage1),
                                      rmCurrentRecord.ReasonCode, ReasonCode2C, ReasonCode16);
                    if (isIsWeb)
                    {
                        throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage1, formatMessage);
                    }
                    else if (isValidationCorrection)
                    {
                      return formatMessage;
                    }
                    else
                    {
                      return CargoErrorCodes.InvalidRMReasonCodeForStage1 + "||" + formatMessage;
                    }
                }
            }
            else
            {
                if (rmCurrentRecord.ReasonCode == ReasonCode16)
                {
                    if (yourReasonCode != ReasonCode2C)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage1),
                                yourReasonCode, ReasonCode2C, ReasonCode16);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage1, formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForStage1 + "||" + formatMessage;
                       }
                    }
                }
            }

            // Rule 2b
            // A Stage 1 RM having Reason Code ‘17’ can only reject a BM using Reason Code ‘2Z’
            if (yourReasonCode == ReasonCode17)
            {
                if (rmCurrentRecord.ReasonCode != ReasonCode2Z)
                {
                    string formatMessage =
                        string.Format(
                            Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage1),
                            rmCurrentRecord.ReasonCode, ReasonCode2Z, ReasonCode17);
                    if (isIsWeb)
                    {
                        throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage1, formatMessage);
                    }
                    else if (isValidationCorrection)
                    {
                      return formatMessage;
                    }
                    else
                    {
                      return CargoErrorCodes.InvalidRMReasonCodeForStage1 + "||" + formatMessage;
                    }
                }
            }
            else
            {
                if (rmCurrentRecord.ReasonCode == ReasonCode17)
                {
                    if (yourReasonCode != ReasonCode2Z)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage1),
                                yourReasonCode, ReasonCode2Z, ReasonCode17);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage1,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForStage1 + "||" + formatMessage;
                        }
                    }
                }
            }

        }

        //Stage2 validation
            if (rmCurrentRecord.RejectionStage == (int) RejectionStage.StageTwo)
            {
                // Rule 3a
                // A Stage 1 RM billed with Reason Code ‘16’ can only be rejected via a Stage 2 RM having Reason Code ’16’
                if (yourReasonCode == ReasonCode16)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode16)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM),
                                (int)RejectionStage.StageOne, yourReasonCode,
                                ReasonCode16);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForRejectedRM + "||" + formatMessage;
                        }
                    }
                }

                // Rule 4a
                // A Stage 1 RM billed with Reason Code ‘17’ can only be rejected via a Stage 2 RM having Reason Code ’17’
                if (yourReasonCode == ReasonCode17)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode17)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM),
                                (int)RejectionStage.StageOne, yourReasonCode,
                                ReasonCode17);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForRejectedRM + "||" + formatMessage;
                        }
                    }
                }

                // Rule 3b
                // A Stage 2 RM having Reason Code ‘16’ can only reject a Stage 1 RM having Reason Code ‘16’
                if (yourReasonCode == ReasonCode16)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode16)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                (int)RejectionStage.StageOne,
                                rmCurrentRecord.ReasonCode,
                                (int)RejectionStage.StageOne, ReasonCode16,
                                ReasonCode16);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                        }
                    }
                }
                else
                {
                    if (rmCurrentRecord.ReasonCode == ReasonCode16)
                    {
                        if (yourReasonCode != ReasonCode16)
                        {
                            string formatMessage =
                                string.Format(
                                    Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                    (int) RejectionStage.StageOne,
                                    yourReasonCode,
                                    (int)RejectionStage.StageOne, ReasonCode16,
                                    ReasonCode16);
                            if (isIsWeb)
                            {
                                throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                              formatMessage);
                            }
                            else if (isValidationCorrection)
                            {
                              return formatMessage;
                            }
                            else
                            {
                              return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                            }
                        }
                    }
                }

                // Rule 4b
                // A Stage 2 RM having Reason Code ‘17’ can only reject a Stage 1 RM having Reason Code ‘17’
                if (yourReasonCode == ReasonCode17)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode17)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                (int)RejectionStage.StageOne,
                                rmCurrentRecord.ReasonCode,
                                (int)RejectionStage.StageOne, ReasonCode17,
                                ReasonCode17);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                        }
                    }
                }
                else
                {
                    if (rmCurrentRecord.ReasonCode == ReasonCode17)
                    {
                        if (yourReasonCode != ReasonCode17)
                        {
                            string formatMessage =
                                string.Format(
                                    Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                    (int)RejectionStage.StageOne,
                                    yourReasonCode,
                                    (int)RejectionStage.StageOne, ReasonCode17,
                                    ReasonCode17);
                            if (isIsWeb)
                            {
                                throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                              formatMessage);
                            }
                            else if (isValidationCorrection)
                            {
                              return formatMessage;
                            }
                            else
                            {
                              return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                            }
                        }
                    }
                }
            }

            //Stage3 validation
            if (rmCurrentRecord.RejectionStage == (int) RejectionStage.StageThree)
            {
                // Rule 5a
                // A Stage 2 RM billed with Reason Code ‘16’ can only be rejected via a Stage 3 RM having Reason Code ’16’
                if (yourReasonCode == ReasonCode16)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode16)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM),
                                (int)RejectionStage.StageTwo, yourReasonCode,
                                ReasonCode16);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForRejectedRM + "||" + formatMessage;
                        }
                    }
                }

                // Rule 6a
                // A Stage 2 RM billed with Reason Code ‘17’ can only be rejected with a Stage 3 RM having Reason Code ’17’
                if (yourReasonCode == ReasonCode17)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode17)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM),
                                (int)RejectionStage.StageTwo, yourReasonCode,
                                ReasonCode17);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForRejectedRM,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForRejectedRM + "||" + formatMessage;
                        }
                    }
                }

                // Rule 5b
                // A Stage 3 RM having Reason Code ‘16’ can only reject a Stage 2 RM having Reason Code ‘16’ 
                if (yourReasonCode == ReasonCode16)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode16)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                (int) RejectionStage.StageTwo,
                                rmCurrentRecord.ReasonCode,
                                (int)RejectionStage.StageTwo, ReasonCode16,
                                ReasonCode16);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                        }
                    }
                }
                else
                {
                    if (rmCurrentRecord.ReasonCode == ReasonCode16)
                    {
                        if (yourReasonCode != ReasonCode16)
                        {
                            string formatMessage =
                                string.Format(
                                    Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                    (int)RejectionStage.StageTwo,
                                    yourReasonCode,
                                    (int)RejectionStage.StageTwo, ReasonCode16,
                                    ReasonCode16);
                            if (isIsWeb)
                            {
                                throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                              formatMessage);
                            }
                            else if (isValidationCorrection)
                            {
                              return formatMessage;
                            }
                            else
                            {
                              return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                            }
                        }
                    }
                }

                // Rule 6b
                // A Stage 3 RM having Reason Code ‘17’ can only reject a Stage 2 RM having Reason Code ‘17’
                if (yourReasonCode == ReasonCode17)
                {
                    if (rmCurrentRecord.ReasonCode != ReasonCode17)
                    {
                        string formatMessage =
                            string.Format(
                                Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                (int)RejectionStage.StageTwo,
                                rmCurrentRecord.ReasonCode,
                                (int)RejectionStage.StageTwo, ReasonCode17,
                                ReasonCode17);
                        if (isIsWeb)
                        {
                            throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                          formatMessage);
                        }
                        else if (isValidationCorrection)
                        {
                          return formatMessage;
                        }
                        else
                        {
                          return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                        }
                    }
                }
                else
                {
                    if (rmCurrentRecord.ReasonCode == ReasonCode17)
                    {
                        if (yourReasonCode != ReasonCode17)
                        {
                            string formatMessage =
                                string.Format(
                                    Messages.ResourceManager.GetString(CargoErrorCodes.InvalidRMReasonCodeForStage2And3),
                                    (int)RejectionStage.StageTwo,
                                    yourReasonCode,
                                    (int)RejectionStage.StageTwo, ReasonCode17,
                                    ReasonCode17);
                            if (isIsWeb)
                            {
                                throw new ISBusinessException(CargoErrorCodes.InvalidRMReasonCodeForStage2And3,
                                                              formatMessage);
                            }
                            else if (isValidationCorrection)
                            {
                              return formatMessage;
                            }
                            else
                            {
                              return CargoErrorCodes.InvalidRMReasonCodeForStage2And3 + "||" + formatMessage;
                            }
                        }
                    }

                }
            }

            #endregion

            return errorMessage;
        }
      
  }
}
